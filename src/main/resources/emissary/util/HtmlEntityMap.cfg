# copy of emissary version
# Current version reformatted from http://www.w3.org/Math/characters/byalpha.html 
# Previous version: http://www.w3.org/TR/REC-MathML/chap6/bycodes.html
"ENTITY_#160" = " "
ENTITY_AElig = "AE" #"\\U000C6" # capital AE diphthong (ligature), [LATIN CAPITAL LETTER AE]
ENTITY_Abreve = "\\U00102" # capital A, breve, [LATIN CAPITAL LETTER A WITH BREVE]
ENTITY_Acirc = "\\U000C2" # capital A, circumflex accent, [LATIN CAPITAL LETTER A WITH CIRCUMFLEX]
ENTITY_Acy = "\\U00410" # capital A, Cyrillic, [CYRILLIC CAPITAL LETTER A]
ENTITY_Afr = "\\U1D504" # /frak A, upper case a, [MATHEMATICAL FRAKTUR CAPITAL A]
ENTITY_Agrave = "\\U000C0" # capital A, grave accent, [LATIN CAPITAL LETTER A WITH GRAVE]
ENTITY_Amacr = "\\U00100" # capital A, macron, [LATIN CAPITAL LETTER A WITH MACRON]
ENTITY_And = "\\U02A53" # dbl logical and, [DOUBLE LOGICAL AND]
ENTITY_Aogon = "\\U00104" # capital A, ogonek, [LATIN CAPITAL LETTER A WITH OGONEK]
ENTITY_Aopf = "\\U1D538" # /Bbb A, open face A, [MATHEMATICAL DOUBLE-STRUCK CAPITAL A]
ENTITY_ApplyFunction = "\\U02061" # character showing function application in presentation tagging, [FUNCTION APPLICATION]
ENTITY_Aring = "\\U000C5" # capital A, ring, [LATIN CAPITAL LETTER A WITH RING ABOVE]
ENTITY_Ascr = "\\U1D49C" # /scr A, script letter A, [MATHEMATICAL SCRIPT CAPITAL A]
ENTITY_Assign = "\\U02254" # assignment operator, alias ISOAMSR colone, [COLON EQUALS]
ENTITY_Atilde = "\\U000C3" # capital A, tilde, [LATIN CAPITAL LETTER A WITH TILDE]
ENTITY_Auml = "\\U000C4" # capital A, dieresis or umlaut mark, [LATIN CAPITAL LETTER A WITH DIAERESIS]
ENTITY_Backslash = "\\U02216" # alias ISOAMSB setmn, [SET MINUS]
ENTITY_Barv = "\\U02AE7" # vert, dbl bar (over), [SHORT DOWN TACK WITH OVERBAR]
ENTITY_Barwed = "\\U02306" # /doublebarwedge B: log and, dbl bar above, [PERSPECTIVE]
ENTITY_Bcy = "\\U00411" # capital BE, Cyrillic, [CYRILLIC CAPITAL LETTER BE]
ENTITY_Because = "\\U02235" # alias ISOTECH becaus, [BECAUSE]
ENTITY_Bernoullis = "\\U0212C" # alias ISOTECH bernou, [SCRIPT CAPITAL B]
ENTITY_Bfr = "\\U1D505" # /frak B, upper case b, [MATHEMATICAL FRAKTUR CAPITAL B]
ENTITY_Bopf = "\\U1D539" # /Bbb B, open face B, [MATHEMATICAL DOUBLE-STRUCK CAPITAL B]
ENTITY_Breve = "\\U002D8" # alias ISODIA breve, [BREVE]
ENTITY_Bscr = "\\U0212C" # /scr B, script letter B, [SCRIPT CAPITAL B]
ENTITY_Bumpeq = "\\U0224E" # alias ISOAMSR bump, [GEOMETRICALLY EQUIVALENT TO]
ENTITY_CHcy = "\\U00427" # capital CHE, Cyrillic, [CYRILLIC CAPITAL LETTER CHE]
ENTITY_Cacute = "\\U00106" # capital C, acute accent, [LATIN CAPITAL LETTER C WITH ACUTE]
ENTITY_Cap = "\\U022D2" # /Cap /doublecap B: dbl intersection, [DOUBLE INTERSECTION]
ENTITY_CapitalDifferentialD = "\\U02145" # D for use in differentials, e.g., within integrals, [DOUBLE-STRUCK ITALIC CAPITAL D]
ENTITY_Cayleys = "\\U0212D" # the non-associative ring of octonions or Cayley numbers, [BLACK-LETTER CAPITAL C]
ENTITY_Ccaron = "\\U0010C" # capital C, caron, [LATIN CAPITAL LETTER C WITH CARON]
ENTITY_Ccedil = "\\U000C7" # capital C, cedilla, [LATIN CAPITAL LETTER C WITH CEDILLA]
ENTITY_Ccirc = "\\U00108" # capital C, circumflex accent, [LATIN CAPITAL LETTER C WITH CIRCUMFLEX]
ENTITY_Cconint = "\\U02230" # triple contour integral operator, [VOLUME INTEGRAL]
ENTITY_Cdot = "\\U0010A" # capital C, dot above, [LATIN CAPITAL LETTER C WITH DOT ABOVE]
ENTITY_Cedilla = "\\U000B8" # alias ISODIA cedil, [CEDILLA]
ENTITY_CenterDot = "\\U000B7" # alias ISONUM middot, [MIDDLE DOT]
ENTITY_Cfr = "\\U0212D" # /frak C, upper case c, [BLACK-LETTER CAPITAL C]
ENTITY_CircleDot = "\\U02299" # alias ISOAMSB odot, [CIRCLED DOT OPERATOR]
ENTITY_CircleMinus = "\\U02296" # alias ISOAMSB ominus, [CIRCLED MINUS]
ENTITY_CirclePlus = "\\U02295" # alias ISOAMSB oplus, [CIRCLED PLUS]
ENTITY_CircleTimes = "\\U02297" # alias ISOAMSB otimes, [CIRCLED TIMES]
ENTITY_ClockwiseContourIntegral = "\\U02232" # alias ISOTECH cwconint, [CLOCKWISE CONTOUR INTEGRAL]
ENTITY_CloseCurlyDoubleQuote = "\\U0201D" # alias ISONUM rdquo, [RIGHT DOUBLE QUOTATION MARK]
ENTITY_CloseCurlyQuote = "\\U02019" # alias ISONUM rsquo, [RIGHT SINGLE QUOTATION MARK]
ENTITY_Colon = "\\U02237" # /Colon, two colons, [PROPORTION]
ENTITY_Colone = "\\U02A74" # double colon, equals, [DOUBLE COLON EQUAL]
ENTITY_Congruent = "\\U02261" # alias ISOTECH equiv, [IDENTICAL TO]
ENTITY_Conint = "\\U0222F" # double contour integral operator, [SURFACE INTEGRAL]
ENTITY_ContourIntegral = "\\U0222E" # alias ISOTECH conint, [CONTOUR INTEGRAL]
ENTITY_Copf = "\\U02102" # /Bbb C, open face C, [DOUBLE-STRUCK CAPITAL C]
ENTITY_Coproduct = "\\U02210" # alias ISOAMSB coprod, [N-ARY COPRODUCT]
ENTITY_CounterClockwiseContourIntegral = "\\U02233" # alias ISOTECH awconint, [ANTICLOCKWISE CONTOUR INTEGRAL]
ENTITY_Cross = "\\U02A2F" # cross or vector product, [VECTOR OR CROSS PRODUCT]
ENTITY_Cscr = "\\U1D49E" # /scr C, script letter C, [MATHEMATICAL SCRIPT CAPITAL C]
ENTITY_Cup = "\\U022D3" # /Cup /doublecup B: dbl union, [DOUBLE UNION]
ENTITY_CupCap = "\\U0224D" # alias asympeq, [EQUIVALENT TO]
ENTITY_DD = "\\U02145" # D for use in differentials, e.g., within integrals, [DOUBLE-STRUCK ITALIC CAPITAL D]
ENTITY_DDotrahd = "\\U02911" # right arrow with dotted stem, [RIGHTWARDS ARROW WITH DOTTED STEM]
ENTITY_DJcy = "\\U00402" # capital DJE, Serbian, [CYRILLIC CAPITAL LETTER DJE]
ENTITY_DScy = "\\U00405" # capital DSE, Macedonian, [CYRILLIC CAPITAL LETTER DZE]
ENTITY_DZcy = "\\U0040F" # capital dze, Serbian, [CYRILLIC CAPITAL LETTER DZHE]
ENTITY_Dagger = "\\U02021" # /ddagger B: =double dagger, [DOUBLE DAGGER]
ENTITY_Dagger = "\\U02021" # /ddagger B: double dagger relation, [DOUBLE DAGGER]
ENTITY_Darr = "\\U021A1" # down two-headed arrow, [DOWNWARDS TWO HEADED ARROW]
ENTITY_Dashv = "\\U02AE4" # dbl dash, vertical, [VERTICAL BAR DOUBLE LEFT TURNSTILE]
ENTITY_Dcaron = "\\U0010E" # capital D, caron, [LATIN CAPITAL LETTER D WITH CARON]
ENTITY_Dcy = "\\U00414" # capital DE, Cyrillic, [CYRILLIC CAPITAL LETTER DE]
ENTITY_Del = "\\U02207" # alias ISOTECH nabla, [NABLA]
ENTITY_Delta = "\\U00394" # /Delta capital Delta, Greek, [GREEK CAPITAL LETTER DELTA]
ENTITY_Dfr = "\\U1D507" # /frak D, upper case d, [MATHEMATICAL FRAKTUR CAPITAL D]
ENTITY_DiacriticalAcute = "\\U000B4" # alias ISODIA acute, [ACUTE ACCENT]
ENTITY_DiacriticalDot = "\\U002D9" # alias ISODIA dot, [DOT ABOVE]
ENTITY_DiacriticalDoubleAcute = "\\U002DD" # alias ISODIA dblac, [DOUBLE ACUTE ACCENT]
ENTITY_DiacriticalGrave = "\\U00060" # alias ISODIA grave, [GRAVE ACCENT]
ENTITY_DiacriticalTilde = "\\U002DC" # alias ISODIA tilde, [SMALL TILDE]
ENTITY_Diamond = "\\U022C4" # alias ISOAMSB diam, [DIAMOND OPERATOR]
ENTITY_DifferentialD = "\\U02146" # d for use in differentials, e.g., within integrals, [DOUBLE-STRUCK ITALIC SMALL D]
ENTITY_Dopf = "\\U1D53B" # /Bbb D, open face D, [MATHEMATICAL DOUBLE-STRUCK CAPITAL D]
ENTITY_Dot = "\\U000A8" # dieresis or umlaut mark, [DIAERESIS]
ENTITY_DotDot = "\\U020DC" # four dots above, [COMBINING FOUR DOTS ABOVE]
ENTITY_DotEqual = "\\U02250" # alias ISOAMSR esdot, [APPROACHES THE LIMIT]
ENTITY_DoubleContourIntegral = "\\U0222F" # alias ISOTECH Conint, [SURFACE INTEGRAL]
ENTITY_DoubleDot = "\\U000A8" # alias ISODIA die, [DIAERESIS]
ENTITY_DoubleDownArrow = "\\U021D3" # alias ISOAMSA dArr, [DOWNWARDS DOUBLE ARROW]
ENTITY_DoubleLeftArrow = "\\U021D0" # alias ISOTECH lArr, [LEFTWARDS DOUBLE ARROW]
ENTITY_DoubleLeftRightArrow = "\\U021D4" # alias ISOAMSA hArr, [LEFT RIGHT DOUBLE ARROW]
ENTITY_DoubleLeftTee = "\\U02AE4" # alias for &amp;Dashv;, [VERTICAL BAR DOUBLE LEFT TURNSTILE]
ENTITY_DoubleLongLeftArrow = "\\U027F8" # alias ISOAMSA xlArr, [LONG LEFTWARDS DOUBLE ARROW]
ENTITY_DoubleLongLeftRightArrow = "\\U027FA" # alias ISOAMSA xhArr, [LONG LEFT RIGHT DOUBLE ARROW]
ENTITY_DoubleLongRightArrow = "\\U027F9" # alias ISOAMSA xrArr, [LONG RIGHTWARDS DOUBLE ARROW]
ENTITY_DoubleRightArrow = "\\U021D2" # alias ISOTECH rArr, [RIGHTWARDS DOUBLE ARROW]
ENTITY_DoubleRightTee = "\\U022A8" # alias ISOAMSR vDash, [TRUE]
ENTITY_DoubleUpArrow = "\\U021D1" # alias ISOAMSA uArr, [UPWARDS DOUBLE ARROW]
ENTITY_DoubleUpDownArrow = "\\U021D5" # alias ISOAMSA vArr, [UP DOWN DOUBLE ARROW]
ENTITY_DoubleVerticalBar = "\\U02225" # alias ISOTECH par, [PARALLEL TO]
ENTITY_DownArrow = "\\U02193" # alias ISONUM darr, [DOWNWARDS ARROW]
ENTITY_DownArrowBar = "\\U02913" # down arrow to bar, [DOWNWARDS ARROW TO BAR]
ENTITY_DownArrowUpArrow = "\\U021F5" # alias ISOAMSA duarr, [DOWNWARDS ARROW LEFTWARDS OF UPWARDS ARROW]
ENTITY_DownBreve = "\\U00311" # breve, inverted (non-spacing), [COMBINING INVERTED BREVE]
ENTITY_DownLeftRightVector = "\\U02950" # left-down-right-down harpoon, [LEFT BARB DOWN RIGHT BARB DOWN HARPOON]
ENTITY_DownLeftTeeVector = "\\U0295E" # left-down harpoon from bar, [LEFTWARDS HARPOON WITH BARB DOWN FROM BAR]
ENTITY_DownLeftVector = "\\U021BD" # alias ISOAMSA lhard, [LEFTWARDS HARPOON WITH BARB DOWNWARDS]
ENTITY_DownLeftVectorBar = "\\U02956" # left-down harpoon to bar, [LEFTWARDS HARPOON WITH BARB DOWN TO BAR]
ENTITY_DownRightTeeVector = "\\U0295F" # right-down harpoon from bar, [RIGHTWARDS HARPOON WITH BARB DOWN FROM BAR]
ENTITY_DownRightVector = "\\U021C1" # alias ISOAMSA rhard, [RIGHTWARDS HARPOON WITH BARB DOWNWARDS]
ENTITY_DownRightVectorBar = "\\U02957" # right-down harpoon to bar, [RIGHTWARDS HARPOON WITH BARB DOWN TO BAR]
ENTITY_DownTee = "\\U022A4" # alias ISOTECH top, [DOWN TACK]
ENTITY_DownTeeArrow = "\\U021A7" # alias for mapstodown, [DOWNWARDS ARROW FROM BAR]
ENTITY_Downarrow = "\\U021D3" # alias ISOAMSA dArr, [DOWNWARDS DOUBLE ARROW]
ENTITY_Dscr = "\\U1D49F" # /scr D, script letter D, [MATHEMATICAL SCRIPT CAPITAL D]
ENTITY_Dstrok = "\\U00110" # capital D, stroke, [LATIN CAPITAL LETTER D WITH STROKE]
ENTITY_ENG = "\\U0014A" # capital ENG, Lapp, [LATIN CAPITAL LETTER ENG]
ENTITY_ETH = "\\U000D0" # capital Eth, Icelandic, [LATIN CAPITAL LETTER ETH]
ENTITY_Eacute = "\\U000C9" # capital E, acute accent, [LATIN CAPITAL LETTER E WITH ACUTE]
ENTITY_Ecaron = "\\U0011A" # capital E, caron, [LATIN CAPITAL LETTER E WITH CARON]
ENTITY_Ecirc = "\\U000CA" # capital E, circumflex accent, [LATIN CAPITAL LETTER E WITH CIRCUMFLEX]
ENTITY_Ecy = "\\U0042D" # capital E, Cyrillic, [CYRILLIC CAPITAL LETTER E]
ENTITY_Edot = "\\U00116" # capital E, dot above, [LATIN CAPITAL LETTER E WITH DOT ABOVE]
ENTITY_Efr = "\\U1D508" # /frak E, upper case e, [MATHEMATICAL FRAKTUR CAPITAL E]
ENTITY_Egrave = "\\U000C8" # capital E, grave accent, [LATIN CAPITAL LETTER E WITH GRAVE]
ENTITY_Element = "\\U02208" # alias ISOTECH isinv, [ELEMENT OF]
ENTITY_Emacr = "\\U00112" # capital E, macron, [LATIN CAPITAL LETTER E WITH MACRON]
ENTITY_EmptySmallSquare = "\\U025FB" # empty small square, [WHITE MEDIUM SQUARE]
ENTITY_EmptyVerySmallSquare = "\\U025AB" # empty small square, [WHITE SMALL SQUARE]
ENTITY_Eogon = "\\U00118" # capital E, ogonek, [LATIN CAPITAL LETTER E WITH OGONEK]
ENTITY_Eopf = "\\U1D53C" # /Bbb E, open face E, [MATHEMATICAL DOUBLE-STRUCK CAPITAL E]
ENTITY_Equal = "\\U02A75" # two consecutive equal signs, [TWO CONSECUTIVE EQUALS SIGNS]
ENTITY_EqualTilde = "\\U02242" # alias ISOAMSR esim, [MINUS TILDE]
ENTITY_Equilibrium = "\\U021CC" # alias ISOAMSA rlhar, [RIGHTWARDS HARPOON OVER LEFTWARDS HARPOON]
ENTITY_Escr = "\\U02130" # /scr E, script letter E, [SCRIPT CAPITAL E]
ENTITY_Esim = "\\U02A73" # equal, similar, [EQUALS SIGN ABOVE TILDE OPERATOR]
ENTITY_Euml = "\\U000CB" # capital E, dieresis or umlaut mark, [LATIN CAPITAL LETTER E WITH DIAERESIS]
ENTITY_Exists = "\\U02203" # alias ISOTECH exist, [THERE EXISTS]
ENTITY_ExponentialE = "\\U02147" # e use for the exponential base of the natural logarithms, [DOUBLE-STRUCK ITALIC SMALL E]
ENTITY_Fcy = "\\U00424" # capital EF, Cyrillic, [CYRILLIC CAPITAL LETTER EF]
ENTITY_Ffr = "\\U1D509" # /frak F, upper case f, [MATHEMATICAL FRAKTUR CAPITAL F]
ENTITY_FilledSmallSquare = "\\U025FC" # filled small square, [BLACK MEDIUM SQUARE]
ENTITY_FilledVerySmallSquare = "\\U025AA" # filled very small square, [BLACK SMALL SQUARE]
ENTITY_Fopf = "\\U1D53D" # /Bbb F, open face F, [MATHEMATICAL DOUBLE-STRUCK CAPITAL F]
ENTITY_ForAll = "\\U02200" # alias ISOTECH forall, [FOR ALL]
ENTITY_Fouriertrf = "\\U02131" # Fourier transform, [SCRIPT CAPITAL F]
ENTITY_Fscr = "\\U02131" # /scr F, script letter F, [SCRIPT CAPITAL F]
ENTITY_GJcy = "\\U00403" # capital GJE Macedonian, [CYRILLIC CAPITAL LETTER GJE]
ENTITY_Gamma = "\\U00393" # /Gamma capital Gamma, Greek, [GREEK CAPITAL LETTER GAMMA]
ENTITY_Gammad = "\\U003DC" # capital digamma, [GREEK LETTER DIGAMMA]
ENTITY_Gbreve = "\\U0011E" # capital G, breve, [LATIN CAPITAL LETTER G WITH BREVE]
ENTITY_Gcedil = "\\U00122" # capital G, cedilla, [LATIN CAPITAL LETTER G WITH CEDILLA]
ENTITY_Gcirc = "\\U0011C" # capital G, circumflex accent, [LATIN CAPITAL LETTER G WITH CIRCUMFLEX]
ENTITY_Gcy = "\\U00413" # capital GHE, Cyrillic, [CYRILLIC CAPITAL LETTER GHE]
ENTITY_Gdot = "\\U00120" # capital G, dot above, [LATIN CAPITAL LETTER G WITH DOT ABOVE]
ENTITY_Gfr = "\\U1D50A" # /frak G, upper case g, [MATHEMATICAL FRAKTUR CAPITAL G]
ENTITY_Gg = "\\U022D9" # /ggg /Gg /gggtr R: triple gtr-than, [VERY MUCH GREATER-THAN]
ENTITY_Gopf = "\\U1D53E" # /Bbb G, open face G, [MATHEMATICAL DOUBLE-STRUCK CAPITAL G]
ENTITY_GreaterEqual = "\\U02265" # alias ISOTECH ge, [GREATER-THAN OR EQUAL TO]
ENTITY_GreaterEqualLess = "\\U022DB" # alias ISOAMSR gel, [GREATER-THAN EQUAL TO OR LESS-THAN]
ENTITY_GreaterFullEqual = "\\U02267" # alias ISOAMSR gE, [GREATER-THAN OVER EQUAL TO]
ENTITY_GreaterGreater = "\\U02AA2" # alias for GT, [DOUBLE NESTED GREATER-THAN]
ENTITY_GreaterLess = "\\U02277" # alias ISOAMSR gl, [GREATER-THAN OR LESS-THAN]
ENTITY_GreaterSlantEqual = "\\U02A7E" # alias ISOAMSR ges, [GREATER-THAN OR SLANTED EQUAL TO]
ENTITY_GreaterTilde = "\\U02273" # alias ISOAMSR gsim, [GREATER-THAN OR EQUIVALENT TO]
ENTITY_Gscr = "\\U1D4A2" # /scr G, script letter G, [MATHEMATICAL SCRIPT CAPITAL G]
ENTITY_Gt = "\\U0226B" # /gg R: dbl greater-than sign, [MUCH GREATER-THAN]
ENTITY_HARDcy = "\\U0042A" # capital HARD sign, Cyrillic, [CYRILLIC CAPITAL LETTER HARD SIGN]
ENTITY_Hacek = "\\U002C7" # alias ISODIA caron, [CARON]
ENTITY_Hat = "\\U0005E" # circumflex accent, [CIRCUMFLEX ACCENT]
ENTITY_Hcirc = "\\U00124" # capital H, circumflex accent, [LATIN CAPITAL LETTER H WITH CIRCUMFLEX]
ENTITY_Hfr = "\\U0210C" # /frak H, upper case h, [BLACK-LETTER CAPITAL H]
ENTITY_HilbertSpace = "\\U0210B" # Hilbert space, [SCRIPT CAPITAL H]
ENTITY_Hopf = "\\U0210D" # /Bbb H, open face H, [DOUBLE-STRUCK CAPITAL H]
ENTITY_HorizontalLine = "\\U02500" # short horizontal line, [BOX DRAWINGS LIGHT HORIZONTAL]
ENTITY_Hscr = "\\U0210B" # /scr H, script letter H, [SCRIPT CAPITAL H]
ENTITY_Hstrok = "\\U00126" # capital H, stroke, [LATIN CAPITAL LETTER H WITH STROKE]
ENTITY_HumpDownHump = "\\U0224E" # alias ISOAMSR bump, [GEOMETRICALLY EQUIVALENT TO]
ENTITY_HumpEqual = "\\U0224F" # alias ISOAMSR bumpe, [DIFFERENCE BETWEEN]
ENTITY_IEcy = "\\U00415" # capital IE, Cyrillic, [CYRILLIC CAPITAL LETTER IE]
ENTITY_IJlig = "IJ" # "\\U00132" # capital IJ ligature, [LATIN CAPITAL LIGATURE IJ]
ENTITY_IOcy = "\\U00401" # capital IO, Russian, [CYRILLIC CAPITAL LETTER IO]
ENTITY_Iacute = "\\U000CD" # capital I, acute accent, [LATIN CAPITAL LETTER I WITH ACUTE]
ENTITY_Icirc = "\\U000CE" # capital I, circumflex accent, [LATIN CAPITAL LETTER I WITH CIRCUMFLEX]
ENTITY_Icy = "\\U00418" # capital I, Cyrillic, [CYRILLIC CAPITAL LETTER I]
ENTITY_Idot = "\\U00130" # capital I, dot above, [LATIN CAPITAL LETTER I WITH DOT ABOVE]
ENTITY_Ifr = "\\U02111" # /frak I, upper case i, [BLACK-LETTER CAPITAL I]
ENTITY_Igrave = "\\U000CC" # capital I, grave accent, [LATIN CAPITAL LETTER I WITH GRAVE]
ENTITY_Im = "\\U02111" # alias ISOAMSO image, [BLACK-LETTER CAPITAL I]
ENTITY_Imacr = "\\U0012A" # capital I, macron, [LATIN CAPITAL LETTER I WITH MACRON]
ENTITY_ImaginaryI = "\\U02148" # i for use as a square root of -1, [DOUBLE-STRUCK ITALIC SMALL I]
ENTITY_Implies = "\\U021D2" # alias ISOTECH rArr, [RIGHTWARDS DOUBLE ARROW]
ENTITY_Int = "\\U0222C" # double integral operator, [DOUBLE INTEGRAL]
ENTITY_Integral = "\\U0222B" # alias ISOTECH int, [INTEGRAL]
ENTITY_Intersection = "\\U022C2" # alias ISOAMSB xcap, [N-ARY INTERSECTION]
ENTITY_InvisibleComma = "" #"\\U02063" # used as a separator, e.g., in indices, [INVISIBLE SEPARATOR]
ENTITY_InvisibleTimes = "" # "\\U02062" # marks multiplication when it is understood without a mark, [INVISIBLE TIMES]
ENTITY_Iogon = "\\U0012E" # capital I, ogonek, [LATIN CAPITAL LETTER I WITH OGONEK]
ENTITY_Iopf = "\\U1D540" # /Bbb I, open face I, [MATHEMATICAL DOUBLE-STRUCK CAPITAL I]
ENTITY_Iscr = "\\U02110" # /scr I, script letter I, [SCRIPT CAPITAL I]
ENTITY_Itilde = "\\U00128" # capital I, tilde, [LATIN CAPITAL LETTER I WITH TILDE]
ENTITY_Iukcy = "\\U00406" # capital I, Ukrainian, [CYRILLIC CAPITAL LETTER BYELORUSSIAN-UKRAINIAN I]
ENTITY_Iuml = "\\U000CF" # capital I, dieresis or umlaut mark, [LATIN CAPITAL LETTER I WITH DIAERESIS]
ENTITY_Jcirc = "\\U00134" # capital J, circumflex accent, [LATIN CAPITAL LETTER J WITH CIRCUMFLEX]
ENTITY_Jcy = "\\U00419" # capital short I, Cyrillic, [CYRILLIC CAPITAL LETTER SHORT I]
ENTITY_Jfr = "\\U1D50D" # /frak J, upper case j, [MATHEMATICAL FRAKTUR CAPITAL J]
ENTITY_Jopf = "\\U1D541" # /Bbb J, open face J, [MATHEMATICAL DOUBLE-STRUCK CAPITAL J]
ENTITY_Jscr = "\\U1D4A5" # /scr J, script letter J, [MATHEMATICAL SCRIPT CAPITAL J]
ENTITY_Jsercy = "\\U00408" # capital JE, Serbian, [CYRILLIC CAPITAL LETTER JE]
ENTITY_Jukcy = "\\U00404" # capital JE, Ukrainian, [CYRILLIC CAPITAL LETTER UKRAINIAN IE]
ENTITY_KHcy = "\\U00425" # capital HA, Cyrillic, [CYRILLIC CAPITAL LETTER HA]
ENTITY_KJcy = "\\U0040C" # capital KJE, Macedonian, [CYRILLIC CAPITAL LETTER KJE]
ENTITY_Kcedil = "\\U00136" # capital K, cedilla, [LATIN CAPITAL LETTER K WITH CEDILLA]
ENTITY_Kcy = "\\U0041A" # capital KA, Cyrillic, [CYRILLIC CAPITAL LETTER KA]
ENTITY_Kfr = "\\U1D50E" # /frak K, upper case k, [MATHEMATICAL FRAKTUR CAPITAL K]
ENTITY_Kopf = "\\U1D542" # /Bbb K, open face K, [MATHEMATICAL DOUBLE-STRUCK CAPITAL K]
ENTITY_Kscr = "\\U1D4A6" # /scr K, script letter K, [MATHEMATICAL SCRIPT CAPITAL K]
ENTITY_LJcy = "\\U00409" # capital LJE, Serbian, [CYRILLIC CAPITAL LETTER LJE]
ENTITY_Lacute = "\\U00139" # capital L, acute accent, [LATIN CAPITAL LETTER L WITH ACUTE]
ENTITY_Lambda = "\\U0039B" # /Lambda capital Lambda, Greek, [GREEK CAPITAL LETTER LAMDA]
ENTITY_Lang = "\\U0300A" # left angle bracket, double, [LEFT DOUBLE ANGLE BRACKET]
ENTITY_Laplacetrf = "\\U02112" # Laplace transform, [SCRIPT CAPITAL L]
ENTITY_Larr = "\\U0219E" # /twoheadleftarrow A:, [LEFTWARDS TWO HEADED ARROW]
ENTITY_Lcaron = "\\U0013D" # capital L, caron, [LATIN CAPITAL LETTER L WITH CARON]
ENTITY_Lcedil = "\\U0013B" # capital L, cedilla, [LATIN CAPITAL LETTER L WITH CEDILLA]
ENTITY_Lcy = "\\U0041B" # capital EL, Cyrillic, [CYRILLIC CAPITAL LETTER EL]
ENTITY_LeftAngleBracket = "\\U02329" # alias ISOTECH lang, [LEFT-POINTING ANGLE BRACKET]
ENTITY_LeftArrow = "\\U02190" # alias ISONUM larr, [LEFTWARDS ARROW]
ENTITY_LeftArrowBar = "\\U021E4" # alias for larrb, [LEFTWARDS ARROW TO BAR]
ENTITY_LeftArrowRightArrow = "\\U021C6" # alias ISOAMSA lrarr, [LEFTWARDS ARROW OVER RIGHTWARDS ARROW]
ENTITY_LeftCeiling = "\\U02308" # alias ISOAMSC lceil, [LEFT CEILING]
ENTITY_LeftDoubleBracket = "\\U0301A" # left double bracket delimiter, [LEFT WHITE SQUARE BRACKET]
ENTITY_LeftDownTeeVector = "\\U02961" # down-left harpoon from bar, [DOWNWARDS HARPOON WITH BARB LEFT FROM BAR]
ENTITY_LeftDownVector = "\\U021C3" # alias ISOAMSA dharl, [DOWNWARDS HARPOON WITH BARB LEFTWARDS]
ENTITY_LeftDownVectorBar = "\\U02959" # down-left harpoon to bar, [DOWNWARDS HARPOON WITH BARB LEFT TO BAR]
ENTITY_LeftFloor = "\\U0230A" # alias ISOAMSC lfloor, [LEFT FLOOR]
ENTITY_LeftRightArrow = "\\U02194" # alias ISOAMSA harr, [LEFT RIGHT ARROW]
ENTITY_LeftRightVector = "\\U0294E" # left-up-right-up harpoon, [LEFT BARB UP RIGHT BARB UP HARPOON]
ENTITY_LeftTee = "\\U022A3" # alias ISOAMSR dashv, [LEFT TACK]
ENTITY_LeftTeeArrow = "\\U021A4" # alias for mapstoleft, [LEFTWARDS ARROW FROM BAR]
ENTITY_LeftTeeVector = "\\U0295A" # left-up harpoon from bar, [LEFTWARDS HARPOON WITH BARB UP FROM BAR]
ENTITY_LeftTriangle = "\\U022B2" # alias ISOAMSR vltri, [NORMAL SUBGROUP OF]
ENTITY_LeftTriangleBar = "\\U029CF" # left triangle, vertical bar, [LEFT TRIANGLE BESIDE VERTICAL BAR]
ENTITY_LeftTriangleEqual = "\\U022B4" # alias ISOAMSR ltrie, [NORMAL SUBGROUP OF OR EQUAL TO]
ENTITY_LeftUpDownVector = "\\U02951" # up-left-down-left harpoon, [UP BARB LEFT DOWN BARB LEFT HARPOON]
ENTITY_LeftUpTeeVector = "\\U02960" # up-left harpoon from bar, [UPWARDS HARPOON WITH BARB LEFT FROM BAR]
ENTITY_LeftUpVector = "\\U021BF" # alias ISOAMSA uharl, [UPWARDS HARPOON WITH BARB LEFTWARDS]
ENTITY_LeftUpVectorBar = "\\U02958" # up-left harpoon to bar, [UPWARDS HARPOON WITH BARB LEFT TO BAR]
ENTITY_LeftVector = "\\U021BC" # alias ISOAMSA lharu, [LEFTWARDS HARPOON WITH BARB UPWARDS]
ENTITY_LeftVectorBar = "\\U02952" # left-up harpoon to bar, [LEFTWARDS HARPOON WITH BARB UP TO BAR]
ENTITY_Leftarrow = "\\U021D0" # alias ISOTECH lArr, [LEFTWARDS DOUBLE ARROW]
ENTITY_Leftrightarrow = "\\U021D4" # alias ISOAMSA hArr, [LEFT RIGHT DOUBLE ARROW]
ENTITY_LessEqualGreater = "\\U022DA" # alias ISOAMSR leg, [LESS-THAN EQUAL TO OR GREATER-THAN]
ENTITY_LessFullEqual = "\\U02266" # alias ISOAMSR lE, [LESS-THAN OVER EQUAL TO]
ENTITY_LessGreater = "\\U02276" # alias ISOAMSR lg, [LESS-THAN OR GREATER-THAN]
ENTITY_LessLess = "\\U02AA1" # alias for Lt, [DOUBLE NESTED LESS-THAN]
ENTITY_LessSlantEqual = "\\U02A7D" # alias ISOAMSR les, [LESS-THAN OR SLANTED EQUAL TO]
ENTITY_LessTilde = "\\U02272" # alias ISOAMSR lsim, [LESS-THAN OR EQUIVALENT TO]
ENTITY_Lfr = "\\U1D50F" # /frak L, upper case l, [MATHEMATICAL FRAKTUR CAPITAL L]
ENTITY_Ll = "\\U022D8" # /Ll /lll /llless R: triple less-than, [VERY MUCH LESS-THAN]
ENTITY_Lleftarrow = "\\U021DA" # alias ISOAMSA lAarr, [LEFTWARDS TRIPLE ARROW]
ENTITY_Lmidot = "\\U0013F" # capital L, middle dot, [LATIN CAPITAL LETTER L WITH MIDDLE DOT]
ENTITY_LongLeftArrow = "\\U027F5" # alias ISOAMSA xlarr, [LONG LEFTWARDS ARROW]
ENTITY_LongLeftRightArrow = "\\U027F7" # alias ISOAMSA xharr, [LONG LEFT RIGHT ARROW]
ENTITY_LongRightArrow = "\\U027F6" # alias ISOAMSA xrarr, [LONG RIGHTWARDS ARROW]
ENTITY_Longleftarrow = "\\U027F8" # alias ISOAMSA xlArr, [LONG LEFTWARDS DOUBLE ARROW]
ENTITY_Longleftrightarrow = "\\U027FA" # alias ISOAMSA xhArr, [LONG LEFT RIGHT DOUBLE ARROW]
ENTITY_Longrightarrow = "\\U027F9" # alias ISOAMSA xrArr, [LONG RIGHTWARDS DOUBLE ARROW]
ENTITY_Lopf = "\\U1D543" # /Bbb L, open face L, [MATHEMATICAL DOUBLE-STRUCK CAPITAL L]
ENTITY_LowerLeftArrow = "\\U02199" # alias ISOAMSA swarr, [SOUTH WEST ARROW]
ENTITY_LowerRightArrow = "\\U02198" # alias ISOAMSA searr, [SOUTH EAST ARROW]
ENTITY_Lscr = "\\U02112" # /scr L, script letter L, [SCRIPT CAPITAL L]
ENTITY_Lsh = "\\U021B0" # alias ISOAMSA lsh, [UPWARDS ARROW WITH TIP LEFTWARDS]
ENTITY_Lstrok = "\\U00141" # capital L, stroke, [LATIN CAPITAL LETTER L WITH STROKE]
ENTITY_Lt = "\\U0226A" # /ll R: double less-than sign, [MUCH LESS-THAN]
ENTITY_Map = "\\U02905" # twoheaded mapsto, [RIGHTWARDS TWO-HEADED ARROW FROM BAR]
ENTITY_Mcy = "\\U0041C" # capital EM, Cyrillic, [CYRILLIC CAPITAL LETTER EM]
ENTITY_MediumSpace = " " #"\\U0205F" # space of width 4/18 em, [MEDIUM MATHEMATICAL SPACE]
ENTITY_Mellintrf = "\\U02133" # Mellin transform, [SCRIPT CAPITAL M]
ENTITY_Mfr = "\\U1D510" # /frak M, upper case m, [MATHEMATICAL FRAKTUR CAPITAL M]
ENTITY_MinusPlus = "\\U02213" # alias ISOTECH mnplus, [MINUS-OR-PLUS SIGN]
ENTITY_Mopf = "\\U1D544" # /Bbb M, open face M, [MATHEMATICAL DOUBLE-STRUCK CAPITAL M]
ENTITY_Mscr = "\\U02133" # /scr M, script letter M, [SCRIPT CAPITAL M]
ENTITY_NJcy = "\\U0040A" # capital NJE, Serbian, [CYRILLIC CAPITAL LETTER NJE]
ENTITY_Nacute = "\\U00143" # capital N, acute accent, [LATIN CAPITAL LETTER N WITH ACUTE]
ENTITY_Ncaron = "\\U00147" # capital N, caron, [LATIN CAPITAL LETTER N WITH CARON]
ENTITY_Ncedil = "\\U00145" # capital N, cedilla, [LATIN CAPITAL LETTER N WITH CEDILLA]
ENTITY_Ncy = "\\U0041D" # capital EN, Cyrillic, [CYRILLIC CAPITAL LETTER EN]
ENTITY_NegativeMediumSpace = "" # "\\U0200B" # space of width -4/18 em, [ZERO WIDTH SPACE]
ENTITY_NegativeThickSpace = "" # "\\U0200B" # space of width -5/18 em, [ZERO WIDTH SPACE]
ENTITY_NegativeThinSpace = "" # "\\U0200B" # space of width -3/18 em, [ZERO WIDTH SPACE]
ENTITY_NegativeVeryThinSpace = "" # "\\U0200B" # space of width -1/18 em, [ZERO WIDTH SPACE]
ENTITY_NestedGreaterGreater = "\\U0226B" # alias ISOAMSR Gt, [MUCH GREATER-THAN]
ENTITY_NestedLessLess = "\\U0226A" # alias ISOAMSR Lt, [MUCH LESS-THAN]
ENTITY_NewLine = "\\U0000A" # force a line break; line feed, [LINE FEED (LF)]
ENTITY_Nfr = "\\U1D511" # /frak N, upper case n, [MATHEMATICAL FRAKTUR CAPITAL N]
ENTITY_NoBreak = "\\U02060" # never break line here, [WORD JOINER]
ENTITY_NonBreakingSpace = " " # "\\U000A0" # alias ISONUM nbsp, [NO-BREAK SPACE]
ENTITY_Nopf = "\\U02115" # /Bbb N, open face N, [DOUBLE-STRUCK CAPITAL N]
ENTITY_Not = "\\U02AEC" # not with two horizontal strokes, [DOUBLE STROKE NOT SIGN]
ENTITY_NotCongruent = "\\U02262" # alias ISOAMSN nequiv, [NOT IDENTICAL TO]
ENTITY_NotCupCap = "\\U0226D" # alias for &amp;nasymp;, [NOT EQUIVALENT TO]
ENTITY_NotDoubleVerticalBar = "\\U02226" # alias ISOAMSN npar, [NOT PARALLEL TO]
ENTITY_NotElement = "\\U02209" # alias ISOTECH notin, [NOT AN ELEMENT OF]
ENTITY_NotEqual = "\\U02260" # alias ISOTECH ne, [NOT EQUAL TO]
ENTITY_NotEqualTilde = "\\U02242" # 00338, alias for &amp;nesim;, [MINUS TILDE with slash]
ENTITY_NotExists = "\\U02204" # alias ISOAMSO nexist, [THERE DOES NOT EXIST]
ENTITY_NotGreater = "\\U0226F" # alias ISOAMSN ngt, [NOT GREATER-THAN]
ENTITY_NotGreaterEqual = "\\U02271" # alias ISOAMSN nge, [NEITHER GREATER-THAN NOR EQUAL TO]
ENTITY_NotGreaterFullEqual = "\\U02266" # 00338, alias ISOAMSN nlE, [LESS-THAN OVER EQUAL TO with slash]
ENTITY_NotGreaterGreater = "\\U0226B" # 00338, alias ISOAMSN nGtv, [MUCH GREATER THAN with slash]
ENTITY_NotGreaterLess = "\\U02279" # alias ISOAMSN ntvgl, [NEITHER GREATER-THAN NOR LESS-THAN]
ENTITY_NotGreaterSlantEqual = "\\U02A7E" # 00338, alias ISOAMSN nges, [GREATER-THAN OR SLANTED EQUAL TO with slash]
ENTITY_NotGreaterTilde = "\\U02275" # alias ISOAMSN ngsim, [NEITHER GREATER-THAN NOR EQUIVALENT TO]
ENTITY_NotHumpDownHump = "\\U0224E" # 00338, alias for &amp;nbump;, [GEOMETRICALLY EQUIVALENT TO with slash]
ENTITY_NotHumpEqual = "\\U0224F" # 00338, alias for &amp;nbumpe;, [DIFFERENCE BETWEEN with slash]
ENTITY_NotLeftTriangle = "\\U022EA" # alias ISOAMSN nltri, [NOT NORMAL SUBGROUP OF]
ENTITY_NotLeftTriangleBar = "\\U029CF" # 00338, not left triangle, vertical bar, [LEFT TRIANGLE BESIDE VERTICAL BAR with slash]
ENTITY_NotLeftTriangleEqual = "\\U022EC" # alias ISOAMSN nltrie, [NOT NORMAL SUBGROUP OF OR EQUAL TO]
ENTITY_NotLess = "\\U0226E" # alias ISOAMSN nlt, [NOT LESS-THAN]
ENTITY_NotLessEqual = "\\U02270" # alias ISOAMSN nle, [NEITHER LESS-THAN NOR EQUAL TO]
ENTITY_NotLessGreater = "\\U02278" # alias ISOAMSN ntvlg, [NEITHER LESS-THAN NOR GREATER-THAN]
ENTITY_NotLessLess = "\\U0226A" # 00338, alias ISOAMSN nLtv, [MUCH LESS THAN with slash]
ENTITY_NotLessSlantEqual = "\\U02A7D" # 00338, alias ISOAMSN nles, [LESS-THAN OR SLANTED EQUAL TO with slash]
ENTITY_NotLessTilde = "\\U02274" # alias ISOAMSN nlsim, [NEITHER LESS-THAN NOR EQUIVALENT TO]
ENTITY_NotNestedGreaterGreater = "\\U02AA2" # 00338, not double greater-than sign, [DOUBLE NESTED GREATER-THAN with slash]
ENTITY_NotNestedLessLess = "\\U02AA1" # 00338, not double less-than sign, [DOUBLE NESTED LESS-THAN with slash]
ENTITY_NotPrecedes = "\\U02280" # alias ISOAMSN npr, [DOES NOT PRECEDE]
ENTITY_NotPrecedesEqual = "\\U02AAF" # 00338, alias ISOAMSN npre, [PRECEDES ABOVE SINGLE-LINE EQUALS SIGN with slash]
ENTITY_NotPrecedesSlantEqual = "\\U022E0" # alias ISOAMSN nprcue, [DOES NOT PRECEDE OR EQUAL]
ENTITY_NotReverseElement = "\\U0220C" # alias ISOTECH notniva, [DOES NOT CONTAIN AS MEMBER]
ENTITY_NotRightTriangle = "\\U022EB" # alias ISOAMSN nrtri, [DOES NOT CONTAIN AS NORMAL SUBGROUP]
ENTITY_NotRightTriangleBar = "\\U029D0" # 00338, not vertical bar, right triangle, [VERTICAL BAR BESIDE RIGHT TRIANGLE with slash]
ENTITY_NotRightTriangleEqual = "\\U022ED" # alias ISOAMSN nrtrie, [DOES NOT CONTAIN AS NORMAL SUBGROUP OR EQUAL]
ENTITY_NotSquareSubset = "\\U0228F" # 00338, square not subset, [SQUARE IMAGE OF with slash]
ENTITY_NotSquareSubsetEqual = "\\U022E2" # alias ISOAMSN nsqsube, [NOT SQUARE IMAGE OF OR EQUAL TO]
ENTITY_NotSquareSuperset = "\\U02290" # 00338, negated set-like partial order operator, [SQUARE ORIGINAL OF with slash]
ENTITY_NotSquareSupersetEqual = "\\U022E3" # alias ISOAMSN nsqsupe, [NOT SQUARE ORIGINAL OF OR EQUAL TO]
ENTITY_NotSubset = "\\U02282" # 020D2, alias ISOAMSN vnsub, [SUBSET OF with vertical line]
ENTITY_NotSubsetEqual = "\\U02288" # alias ISOAMSN nsube, [NEITHER A SUBSET OF NOR EQUAL TO]
ENTITY_NotSucceeds = "\\U02281" # alias ISOAMSN nsc, [DOES NOT SUCCEED]
ENTITY_NotSucceedsEqual = "\\U02AB0" # 00338, alias ISOAMSN nsce, [SUCCEEDS ABOVE SINGLE-LINE EQUALS SIGN with slash]
ENTITY_NotSucceedsSlantEqual = "\\U022E1" # alias ISOAMSN nsccue, [DOES NOT SUCCEED OR EQUAL]
ENTITY_NotSucceedsTilde = "\\U0227F" # 00338, not succeeds or similar, [SUCCEEDS OR EQUIVALENT TO with slash]
ENTITY_NotSuperset = "\\U02283" # 020D2, alias ISOAMSN vnsup, [SUPERSET OF with vertical line]
ENTITY_NotSupersetEqual = "\\U02289" # alias ISOAMSN nsupe, [NEITHER A SUPERSET OF NOR EQUAL TO]
ENTITY_NotTilde = "\\U02241" # alias ISOAMSN nsim, [NOT TILDE]
ENTITY_NotTildeEqual = "\\U02244" # alias ISOAMSN nsime, [NOT ASYMPTOTICALLY EQUAL TO]
ENTITY_NotTildeFullEqual = "\\U02247" # alias ISOAMSN ncong, [NEITHER APPROXIMATELY NOR ACTUALLY EQUAL TO]
ENTITY_NotTildeTilde = "\\U02249" # alias ISOAMSN nap, [NOT ALMOST EQUAL TO]
ENTITY_NotVerticalBar = "\\U02224" # alias ISOAMSN nmid, [DOES NOT DIVIDE]
ENTITY_Nscr = "\\U1D4A9" # /scr N, script letter N, [MATHEMATICAL SCRIPT CAPITAL N]
ENTITY_Ntilde = "\\U000D1" # capital N, tilde, [LATIN CAPITAL LETTER N WITH TILDE]
ENTITY_OElig = "OE" # "\\U00152" # capital OE ligature, [LATIN CAPITAL LIGATURE OE]
ENTITY_Oacute = "\\U000D3" # capital O, acute accent, [LATIN CAPITAL LETTER O WITH ACUTE]
ENTITY_Ocirc = "\\U000D4" # capital O, circumflex accent, [LATIN CAPITAL LETTER O WITH CIRCUMFLEX]
ENTITY_Ocy = "\\U0041E" # capital O, Cyrillic, [CYRILLIC CAPITAL LETTER O]
ENTITY_Odblac = "\\U00150" # capital O, double acute accent, [LATIN CAPITAL LETTER O WITH DOUBLE ACUTE]
ENTITY_Ofr = "\\U1D512" # /frak O, upper case o, [MATHEMATICAL FRAKTUR CAPITAL O]
ENTITY_Ograve = "\\U000D2" # capital O, grave accent, [LATIN CAPITAL LETTER O WITH GRAVE]
ENTITY_Omacr = "\\U0014C" # capital O, macron, [LATIN CAPITAL LETTER O WITH MACRON]
ENTITY_Omega = "\\U003A9" # /Omega capital Omega, Greek, [GREEK CAPITAL LETTER OMEGA]
ENTITY_Oopf = "\\U1D546" # /Bbb O, open face O, [MATHEMATICAL DOUBLE-STRUCK CAPITAL O]
ENTITY_OpenCurlyDoubleQuote = "\\U0201C" # alias ISONUM ldquo, [LEFT DOUBLE QUOTATION MARK]
ENTITY_OpenCurlyQuote = "\\U02018" # alias ISONUM lsquo, [LEFT SINGLE QUOTATION MARK]
ENTITY_Or = "\\U02A54" # dbl logical or, [DOUBLE LOGICAL OR]
ENTITY_Oscr = "\\U1D4AA" # /scr O, script letter O, [MATHEMATICAL SCRIPT CAPITAL O]
ENTITY_Oslash = "\\U000D8" # capital O, slash, [LATIN CAPITAL LETTER O WITH STROKE]
ENTITY_Otilde = "\\U000D5" # capital O, tilde, [LATIN CAPITAL LETTER O WITH TILDE]
ENTITY_Otimes = "\\U02A37" # multiply sign in double circle, [MULTIPLICATION SIGN IN DOUBLE CIRCLE]
ENTITY_Ouml = "\\U000D6" # capital O, dieresis or umlaut mark, [LATIN CAPITAL LETTER O WITH DIAERESIS]
ENTITY_OverBar = "\\U000AF" # over bar, [MACRON]
ENTITY_OverBrace = "\\U0FE37" # over brace, [PRESENTATION FORM FOR VERTICAL LEFT CURLY BRACKET]
ENTITY_OverBracket = "\\U023B4" # over bracket, [TOP SQUARE BRACKET]
ENTITY_OverParenthesis = "\\U0FE35" # over parenthesis, [PRESENTATION FORM FOR VERTICAL LEFT PARENTHESIS]
ENTITY_PartialD = "\\U02202" # alias ISOTECH part, [PARTIAL DIFFERENTIAL]
ENTITY_Pcy = "\\U0041F" # capital PE, Cyrillic, [CYRILLIC CAPITAL LETTER PE]
ENTITY_Pfr = "\\U1D513" # /frak P, upper case p, [MATHEMATICAL FRAKTUR CAPITAL P]
ENTITY_Phi = "\\U003A6" # /Phi capital Phi, Greek, [GREEK CAPITAL LETTER PHI]
ENTITY_Pi = "\\U003A0" # /Pi capital Pi, Greek, [GREEK CAPITAL LETTER PI]
ENTITY_PlusMinus = "\\U000B1" # alias ISONUM plusmn, [PLUS-MINUS SIGN]
ENTITY_Poincareplane = "\\U0210C" # the Poincare upper half-plane, [BLACK-LETTER CAPITAL H]
ENTITY_Popf = "\\U02119" # /Bbb P, open face P, [DOUBLE-STRUCK CAPITAL P]
ENTITY_Pr = "\\U02ABB" # dbl precedes, [DOUBLE PRECEDES]
ENTITY_Precedes = "\\U0227A" # alias ISOAMSR pr, [PRECEDES]
ENTITY_PrecedesEqual = "\\U02AAF" # alias ISOAMSR pre, [PRECEDES ABOVE SINGLE-LINE EQUALS SIGN]
ENTITY_PrecedesSlantEqual = "\\U0227C" # alias ISOAMSR prcue, [PRECEDES OR EQUAL TO]
ENTITY_PrecedesTilde = "\\U0227E" # alias ISOAMSR prsim, [PRECEDES OR EQUIVALENT TO]
ENTITY_Prime = "\\U02033" # double prime or second, [DOUBLE PRIME]
ENTITY_Product = "\\U0220F" # alias for &amp;prod;, [N-ARY PRODUCT]
ENTITY_Proportion = "\\U02237" # alias ISOAMSR Colon, [PROPORTION]
ENTITY_Proportional = "\\U0221D" # alias ISOTECH prop, [PROPORTIONAL TO]
ENTITY_Pscr = "\\U1D4AB" # /scr P, script letter P, [MATHEMATICAL SCRIPT CAPITAL P]
ENTITY_Psi = "\\U003A8" # /Psi capital Psi, Greek, [GREEK CAPITAL LETTER PSI]
ENTITY_Qfr = "\\U1D514" # /frak Q, upper case q, [MATHEMATICAL FRAKTUR CAPITAL Q]
ENTITY_Qopf = "\\U0211A" # /Bbb Q, open face Q, [DOUBLE-STRUCK CAPITAL Q]
ENTITY_Qscr = "\\U1D4AC" # /scr Q, script letter Q, [MATHEMATICAL SCRIPT CAPITAL Q]
ENTITY_RBarr = "\\U02910" # /drbkarow A: twoheaded right broken arrow, [RIGHTWARDS TWO-HEADED TRIPLE DASH ARROW]
ENTITY_Racute = "\\U00154" # capital R, acute accent, [LATIN CAPITAL LETTER R WITH ACUTE]
ENTITY_Rang = "\\U0300B" # right angle bracket, double, [RIGHT DOUBLE ANGLE BRACKET]
ENTITY_Rarr = "\\U021A0" # /twoheadrightarrow A:, [RIGHTWARDS TWO HEADED ARROW]
ENTITY_Rarrtl = "\\U02916" # right two-headed arrow with tail, [RIGHTWARDS TWO-HEADED ARROW WITH TAIL]
ENTITY_Rcaron = "\\U00158" # capital R, caron, [LATIN CAPITAL LETTER R WITH CARON]
ENTITY_Rcedil = "\\U00156" # capital R, cedilla, [LATIN CAPITAL LETTER R WITH CEDILLA]
ENTITY_Rcy = "\\U00420" # capital ER, Cyrillic, [CYRILLIC CAPITAL LETTER ER]
ENTITY_Re = "\\U0211C" # alias ISOAMSO real, [BLACK-LETTER CAPITAL R]
ENTITY_ReverseElement = "\\U0220B" # alias ISOTECH niv, [CONTAINS AS MEMBER]
ENTITY_ReverseEquilibrium = "\\U021CB" # alias ISOAMSA lrhar, [LEFTWARDS HARPOON OVER RIGHTWARDS HARPOON]
ENTITY_ReverseUpEquilibrium = "\\U0296F" # alias ISOAMSA duhar, [DOWNWARDS HARPOON WITH BARB LEFT BESIDE UPWARDS HARPOON WITH BARB RIGHT]
ENTITY_Rfr = "\\U0211C" # /frak R, upper case r, [BLACK-LETTER CAPITAL R]
ENTITY_RightAngleBracket = "\\U0232A" # alias ISOTECH rang, [RIGHT-POINTING ANGLE BRACKET]
ENTITY_RightArrow = "\\U02192" # alias ISONUM rarr, [RIGHTWARDS ARROW]
ENTITY_RightArrowBar = "\\U021E5" # alias for rarrb, [RIGHTWARDS ARROW TO BAR]
ENTITY_RightArrowLeftArrow = "\\U021C4" # alias ISOAMSA rlarr, [RIGHTWARDS ARROW OVER LEFTWARDS ARROW]
ENTITY_RightCeiling = "\\U02309" # alias ISOAMSC rceil, [RIGHT CEILING]
ENTITY_RightDoubleBracket = "\\U0301B" # right double bracket delimiter, [RIGHT WHITE SQUARE BRACKET]
ENTITY_RightDownTeeVector = "\\U0295D" # down-right harpoon from bar, [DOWNWARDS HARPOON WITH BARB RIGHT FROM BAR]
ENTITY_RightDownVector = "\\U021C2" # alias ISOAMSA dharr, [DOWNWARDS HARPOON WITH BARB RIGHTWARDS]
ENTITY_RightDownVectorBar = "\\U02955" # down-right harpoon to bar, [DOWNWARDS HARPOON WITH BARB RIGHT TO BAR]
ENTITY_RightFloor = "\\U0230B" # alias ISOAMSC rfloor, [RIGHT FLOOR]
ENTITY_RightTee = "\\U022A2" # alias ISOAMSR vdash, [RIGHT TACK]
ENTITY_RightTeeArrow = "\\U021A6" # alias ISOAMSA map, [RIGHTWARDS ARROW FROM BAR]
ENTITY_RightTeeVector = "\\U0295B" # right-up harpoon from bar, [RIGHTWARDS HARPOON WITH BARB UP FROM BAR]
ENTITY_RightTriangle = "\\U022B3" # alias ISOAMSR vrtri, [CONTAINS AS NORMAL SUBGROUP]
ENTITY_RightTriangleBar = "\\U029D0" # vertical bar, right triangle, [VERTICAL BAR BESIDE RIGHT TRIANGLE]
ENTITY_RightTriangleEqual = "\\U022B5" # alias ISOAMSR rtrie, [CONTAINS AS NORMAL SUBGROUP OR EQUAL TO]
ENTITY_RightUpDownVector = "\\U0294F" # up-right-down-right harpoon, [UP BARB RIGHT DOWN BARB RIGHT HARPOON]
ENTITY_RightUpTeeVector = "\\U0295C" # up-right harpoon from bar, [UPWARDS HARPOON WITH BARB RIGHT FROM BAR]
ENTITY_RightUpVector = "\\U021BE" # alias ISOAMSA uharr, [UPWARDS HARPOON WITH BARB RIGHTWARDS]
ENTITY_RightUpVectorBar = "\\U02954" # up-right harpoon to bar, [UPWARDS HARPOON WITH BARB RIGHT TO BAR]
ENTITY_RightVector = "\\U021C0" # alias ISOAMSA rharu, [RIGHTWARDS HARPOON WITH BARB UPWARDS]
ENTITY_RightVectorBar = "\\U02953" # up-right harpoon to bar, [RIGHTWARDS HARPOON WITH BARB UP TO BAR]
ENTITY_Rightarrow = "\\U021D2" # alias ISOTECH rArr, [RIGHTWARDS DOUBLE ARROW]
ENTITY_Ropf = "\\U0211D" # /Bbb R, open face R, [DOUBLE-STRUCK CAPITAL R]
ENTITY_RoundImplies = "\\U02970" # round implies, [RIGHT DOUBLE ARROW WITH ROUNDED HEAD]
ENTITY_Rrightarrow = "\\U021DB" # alias ISOAMSA rAarr, [RIGHTWARDS TRIPLE ARROW]
ENTITY_Rscr = "\\U0211B" # /scr R, script letter R, [SCRIPT CAPITAL R]
ENTITY_Rsh = "\\U021B1" # alias ISOAMSA rsh, [UPWARDS ARROW WITH TIP RIGHTWARDS]
ENTITY_RuleDelayed = "\\U029F4" # rule-delayed (colon right arrow), [RULE-DELAYED]
ENTITY_SHCHcy = "\\U00429" # capital SHCHA, Cyrillic, [CYRILLIC CAPITAL LETTER SHCHA]
ENTITY_SHcy = "\\U00428" # capital SHA, Cyrillic, [CYRILLIC CAPITAL LETTER SHA]
ENTITY_SOFTcy = "\\U0042C" # capital SOFT sign, Cyrillic, [CYRILLIC CAPITAL LETTER SOFT SIGN]
ENTITY_Sacute = "\\U0015A" # capital S, acute accent, [LATIN CAPITAL LETTER S WITH ACUTE]
ENTITY_Sc = "\\U02ABC" # dbl succeeds, [DOUBLE SUCCEEDS]
ENTITY_Scaron = "\\U00160" # capital S, caron, [LATIN CAPITAL LETTER S WITH CARON]
ENTITY_Scedil = "\\U0015E" # capital S, cedilla, [LATIN CAPITAL LETTER S WITH CEDILLA]
ENTITY_Scirc = "\\U0015C" # capital S, circumflex accent, [LATIN CAPITAL LETTER S WITH CIRCUMFLEX]
ENTITY_Scy = "\\U00421" # capital ES, Cyrillic, [CYRILLIC CAPITAL LETTER ES]
ENTITY_Sfr = "\\U1D516" # /frak S, upper case s, [MATHEMATICAL FRAKTUR CAPITAL S]
ENTITY_ShortDownArrow = "\\U02193" # short down arrow, [DOWNWARDS ARROW]
ENTITY_ShortLeftArrow = "\\U02190" # alias ISOAMSA slarr, [LEFTWARDS ARROW]
ENTITY_ShortRightArrow = "\\U02192" # alias ISOAMSA srarr, [RIGHTWARDS ARROW]
ENTITY_ShortUpArrow = "\\U02191" # short up arrow, [UPWARDS ARROW]
ENTITY_Sigma = "\\U003A3" # /Sigma capital Sigma, Greek, [GREEK CAPITAL LETTER SIGMA]
ENTITY_SmallCircle = "\\U02218" # alias ISOTECH compfn, [RING OPERATOR]
ENTITY_Sopf = "\\U1D54A" # /Bbb S, open face S, [MATHEMATICAL DOUBLE-STRUCK CAPITAL S]
ENTITY_Sqrt = "\\U0221A" # alias ISOTECH radic, [SQUARE ROOT]
ENTITY_Square = "\\U025A1" # alias for square, [WHITE SQUARE]
ENTITY_SquareIntersection = "\\U02293" # alias ISOAMSB sqcap, [SQUARE CAP]
ENTITY_SquareSubset = "\\U0228F" # alias ISOAMSR sqsub, [SQUARE IMAGE OF]
ENTITY_SquareSubsetEqual = "\\U02291" # alias ISOAMSR sqsube, [SQUARE IMAGE OF OR EQUAL TO]
ENTITY_SquareSuperset = "\\U02290" # alias ISOAMSR sqsup, [SQUARE ORIGINAL OF]
ENTITY_SquareSupersetEqual = "\\U02292" # alias ISOAMSR sqsupe, [SQUARE ORIGINAL OF OR EQUAL TO]
ENTITY_SquareUnion = "\\U02294" # alias ISOAMSB sqcup, [SQUARE CUP]
ENTITY_Sscr = "\\U1D4AE" # /scr S, script letter S, [MATHEMATICAL SCRIPT CAPITAL S]
ENTITY_Star = "\\U022C6" # alias ISOAMSB sstarf, [STAR OPERATOR]
ENTITY_Sub = "\\U022D0" # /Subset R: double subset, [DOUBLE SUBSET]
ENTITY_Subset = "\\U022D0" # alias ISOAMSR Sub, [DOUBLE SUBSET]
ENTITY_SubsetEqual = "\\U02286" # alias ISOTECH sube, [SUBSET OF OR EQUAL TO]
ENTITY_Succeeds = "\\U0227B" # alias ISOAMSR sc, [SUCCEEDS]
ENTITY_SucceedsEqual = "\\U02AB0" # alias ISOAMSR sce, [SUCCEEDS ABOVE SINGLE-LINE EQUALS SIGN]
ENTITY_SucceedsSlantEqual = "\\U0227D" # alias ISOAMSR sccue, [SUCCEEDS OR EQUAL TO]
ENTITY_SucceedsTilde = "\\U0227F" # alias ISOAMSR scsim, [SUCCEEDS OR EQUIVALENT TO]
ENTITY_SuchThat = "\\U0220B" # ISOTECH ni, [CONTAINS AS MEMBER]
ENTITY_Sum = "\\U02211" # alias ISOAMSB sum, [N-ARY SUMMATION]
ENTITY_Sup = "\\U022D1" # /Supset R: dbl superset, [DOUBLE SUPERSET]
ENTITY_Superset = "\\U02283" # alias ISOTECH sup, [SUPERSET OF]
ENTITY_SupersetEqual = "\\U02287" # alias ISOTECH supe, [SUPERSET OF OR EQUAL TO]
ENTITY_Supset = "\\U022D1" # alias ISOAMSR Sup, [DOUBLE SUPERSET]
ENTITY_THORN = "\\U000DE" # capital THORN, Icelandic, [LATIN CAPITAL LETTER THORN]
ENTITY_TSHcy = "\\U0040B" # capital TSHE, Serbian, [CYRILLIC CAPITAL LETTER TSHE]
ENTITY_TScy = "\\U00426" # capital TSE, Cyrillic, [CYRILLIC CAPITAL LETTER TSE]
ENTITY_Tab = "\\U00009" # tabulator stop; horizontal tabulation, [CHARACTER TABULATION]
ENTITY_Tcaron = "\\U00164" # capital T, caron, [LATIN CAPITAL LETTER T WITH CARON]
ENTITY_Tcedil = "\\U00162" # capital T, cedilla, [LATIN CAPITAL LETTER T WITH CEDILLA]
ENTITY_Tcy = "\\U00422" # capital TE, Cyrillic, [CYRILLIC CAPITAL LETTER TE]
ENTITY_Tfr = "\\U1D517" # /frak T, upper case t, [MATHEMATICAL FRAKTUR CAPITAL T]
ENTITY_Therefore = "\\U02234" # alias ISOTECH there4, [THEREFORE]
ENTITY_Theta = "\\U00398" # /Theta capital Theta, Greek, [GREEK CAPITAL LETTER THETA]
ENTITY_ThickSpace = " " #"\\U02009" # 0200A-0200A, space of width 5/18 em, [space of width 5/18 em]
ENTITY_ThinSpace = " " #"\\U02009" # space of width 3/18 em alias ISOPUB thinsp, [THIN SPACE]
ENTITY_Tilde = "\\U0223C" # alias ISOTECH sim, [TILDE OPERATOR]
ENTITY_TildeEqual = "\\U02243" # alias ISOTECH sime, [ASYMPTOTICALLY EQUAL TO]
ENTITY_TildeFullEqual = "\\U02245" # alias ISOTECH cong, [APPROXIMATELY EQUAL TO]
ENTITY_TildeTilde = "\\U02248" # alias ISOTECH ap, [ALMOST EQUAL TO]
ENTITY_Topf = "\\U1D54B" # /Bbb T, open face T, [MATHEMATICAL DOUBLE-STRUCK CAPITAL T]
ENTITY_TripleDot = "\\U020DB" # alias ISOTECH tdot, [COMBINING THREE DOTS ABOVE]
ENTITY_Tscr = "\\U1D4AF" # /scr T, script letter T, [MATHEMATICAL SCRIPT CAPITAL T]
ENTITY_Tstrok = "\\U00166" # capital T, stroke, [LATIN CAPITAL LETTER T WITH STROKE]
ENTITY_Uacute = "\\U000DA" # capital U, acute accent, [LATIN CAPITAL LETTER U WITH ACUTE]
ENTITY_Uarr = "\\U0219F" # up two-headed arrow, [UPWARDS TWO HEADED ARROW]
ENTITY_Uarrocir = "\\U02949" # up two-headed arrow above circle, [UPWARDS TWO-HEADED ARROW FROM SMALL CIRCLE]
ENTITY_Ubrcy = "\\U0040E" # capital U, Byelorussian, [CYRILLIC CAPITAL LETTER SHORT U]
ENTITY_Ubreve = "\\U0016C" # capital U, breve, [LATIN CAPITAL LETTER U WITH BREVE]
ENTITY_Ucirc = "\\U000DB" # capital U, circumflex accent, [LATIN CAPITAL LETTER U WITH CIRCUMFLEX]
ENTITY_Ucy = "\\U00423" # capital U, Cyrillic, [CYRILLIC CAPITAL LETTER U]
ENTITY_Udblac = "\\U00170" # capital U, double acute accent, [LATIN CAPITAL LETTER U WITH DOUBLE ACUTE]
ENTITY_Ufr = "\\U1D518" # /frak U, upper case u, [MATHEMATICAL FRAKTUR CAPITAL U]
ENTITY_Ugrave = "\\U000D9" # capital U, grave accent, [LATIN CAPITAL LETTER U WITH GRAVE]
ENTITY_Umacr = "\\U0016A" # capital U, macron, [LATIN CAPITAL LETTER U WITH MACRON]
ENTITY_UnderBar = "\\U00332" # combining low line, [COMBINING LOW LINE]
ENTITY_UnderBrace = "\\U0FE38" # under brace, [PRESENTATION FORM FOR VERTICAL RIGHT CURLY BRACKET]
ENTITY_UnderBracket = "\\U023B5" # under bracket, [BOTTOM SQUARE BRACKET]
ENTITY_UnderParenthesis = "\\U0FE36" # under parenthesis, [PRESENTATION FORM FOR VERTICAL RIGHT PARENTHESIS]
ENTITY_Union = "\\U022C3" # alias ISOAMSB xcup, [N-ARY UNION]
ENTITY_UnionPlus = "\\U0228E" # alias ISOAMSB uplus, [MULTISET UNION]
ENTITY_Uogon = "\\U00172" # capital U, ogonek, [LATIN CAPITAL LETTER U WITH OGONEK]
ENTITY_Uopf = "\\U1D54C" # /Bbb U, open face U, [MATHEMATICAL DOUBLE-STRUCK CAPITAL U]
ENTITY_UpArrow = "\\U02191" # alias ISONUM uarr, [UPWARDS ARROW]
ENTITY_UpArrowBar = "\\U02912" # up arrow to bar, [UPWARDS ARROW TO BAR]
ENTITY_UpArrowDownArrow = "\\U021C5" # alias ISOAMSA udarr, [UPWARDS ARROW LEFTWARDS OF DOWNWARDS ARROW]
ENTITY_UpDownArrow = "\\U02195" # alias ISOAMSA varr, [UP DOWN ARROW]
ENTITY_UpEquilibrium = "\\U0296E" # alias ISOAMSA udhar, [UPWARDS HARPOON WITH BARB LEFT BESIDE DOWNWARDS HARPOON WITH BARB RIGHT]
ENTITY_UpTee = "\\U022A5" # alias ISOTECH perp, [UP TACK]
ENTITY_UpTeeArrow = "\\U021A5" # Alias mapstoup, [UPWARDS ARROW FROM BAR]
ENTITY_Uparrow = "\\U021D1" # alias ISOAMSA uArr, [UPWARDS DOUBLE ARROW]
ENTITY_Updownarrow = "\\U021D5" # alias ISOAMSA vArr, [UP DOWN DOUBLE ARROW]
ENTITY_UpperLeftArrow = "\\U02196" # alias ISOAMSA nwarr, [NORTH WEST ARROW]
ENTITY_UpperRightArrow = "\\U02197" # alias ISOAMSA nearr, [NORTH EAST ARROW]
ENTITY_Upsi = "\\U003D2" # /Upsilon capital Upsilon, Greek, [GREEK UPSILON WITH HOOK SYMBOL]
ENTITY_Upsilon = "\\U003A5" # ISOGRK1 Ugr, HTML4 Upsilon, [GREEK CAPITAL LETTER UPSILON]
ENTITY_Uring = "\\U0016E" # capital U, ring, [LATIN CAPITAL LETTER U WITH RING ABOVE]
ENTITY_Uscr = "\\U1D4B0" # /scr U, script letter U, [MATHEMATICAL SCRIPT CAPITAL U]
ENTITY_Utilde = "\\U00168" # capital U, tilde, [LATIN CAPITAL LETTER U WITH TILDE]
ENTITY_Uuml = "\\U000DC" # capital U, dieresis or umlaut mark, [LATIN CAPITAL LETTER U WITH DIAERESIS]
ENTITY_VDash = "\\U022AB" # dbl vert, dbl dash, [DOUBLE VERTICAL BAR DOUBLE RIGHT TURNSTILE]
ENTITY_Vbar = "\\U02AEB" # dbl vert, bar (under), [DOUBLE UP TACK]
ENTITY_Vcy = "\\U00412" # capital VE, Cyrillic, [CYRILLIC CAPITAL LETTER VE]
ENTITY_Vdash = "\\U022A9" # /Vdash R: dbl vertical, dash, [FORCES]
ENTITY_Vdashl = "\\U02AE6" # vertical, dash (long), [LONG DASH FROM LEFT MEMBER OF DOUBLE VERTICAL]
ENTITY_Vee = "\\U022C1" # alias ISOAMSB xvee, [N-ARY LOGICAL OR]
ENTITY_Verbar = "\\U02016" # /Vert dbl vertical bar, [DOUBLE VERTICAL LINE]
ENTITY_Vert = "\\U02016" # alias ISOTECH Verbar, [DOUBLE VERTICAL LINE]
ENTITY_VerticalBar = "\\U02223" # alias ISOAMSR mid, [DIVIDES]
ENTITY_VerticalLine = "\\U0007C" # alias ISONUM verbar, [VERTICAL LINE]
ENTITY_VerticalSeparator = "\\U02758" # vertical separating operator, [LIGHT VERTICAL BAR]
ENTITY_VerticalTilde = "\\U02240" # alias ISOAMSB wreath, [WREATH PRODUCT]
ENTITY_VeryThinSpace = " " #"\\U0200A" # space of width 1/18 em alias ISOPUB hairsp, [HAIR SPACE]
ENTITY_Vfr = "\\U1D519" # /frak V, upper case v, [MATHEMATICAL FRAKTUR CAPITAL V]
ENTITY_Vopf = "\\U1D54D" # /Bbb V, open face V, [MATHEMATICAL DOUBLE-STRUCK CAPITAL V]
ENTITY_Vscr = "\\U1D4B1" # /scr V, script letter V, [MATHEMATICAL SCRIPT CAPITAL V]
ENTITY_Vvdash = "\\U022AA" # /Vvdash R: triple vertical, dash, [TRIPLE VERTICAL BAR RIGHT TURNSTILE]
ENTITY_Wcirc = "\\U00174" # capital W, circumflex accent, [LATIN CAPITAL LETTER W WITH CIRCUMFLEX]
ENTITY_Wedge = "\\U022C0" # alias ISOAMSB xwedge, [N-ARY LOGICAL AND]
ENTITY_Wfr = "\\U1D51A" # /frak W, upper case w, [MATHEMATICAL FRAKTUR CAPITAL W]
ENTITY_Wopf = "\\U1D54E" # /Bbb W, open face W, [MATHEMATICAL DOUBLE-STRUCK CAPITAL W]
ENTITY_Wscr = "\\U1D4B2" # /scr W, script letter W, [MATHEMATICAL SCRIPT CAPITAL W]
ENTITY_Xfr = "\\U1D51B" # /frak X, upper case x, [MATHEMATICAL FRAKTUR CAPITAL X]
ENTITY_Xi = "\\U0039E" # /Xi capital Xi, Greek, [GREEK CAPITAL LETTER XI]
ENTITY_Xopf = "\\U1D54F" # /Bbb X, open face X, [MATHEMATICAL DOUBLE-STRUCK CAPITAL X]
ENTITY_Xscr = "\\U1D4B3" # /scr X, script letter X, [MATHEMATICAL SCRIPT CAPITAL X]
ENTITY_YAcy = "\\U0042F" # capital YA, Cyrillic, [CYRILLIC CAPITAL LETTER YA]
ENTITY_YIcy = "\\U00407" # capital YI, Ukrainian, [CYRILLIC CAPITAL LETTER YI]
ENTITY_YUcy = "\\U0042E" # capital YU, Cyrillic, [CYRILLIC CAPITAL LETTER YU]
ENTITY_Yacute = "\\U000DD" # capital Y, acute accent, [LATIN CAPITAL LETTER Y WITH ACUTE]
ENTITY_Ycirc = "\\U00176" # capital Y, circumflex accent, [LATIN CAPITAL LETTER Y WITH CIRCUMFLEX]
ENTITY_Ycy = "\\U0042B" # capital YERU, Cyrillic, [CYRILLIC CAPITAL LETTER YERU]
ENTITY_Yfr = "\\U1D51C" # /frak Y, upper case y, [MATHEMATICAL FRAKTUR CAPITAL Y]
ENTITY_Yopf = "\\U1D550" # /Bbb Y, open face Y, [MATHEMATICAL DOUBLE-STRUCK CAPITAL Y]
ENTITY_Yscr = "\\U1D4B4" # /scr Y, script letter Y, [MATHEMATICAL SCRIPT CAPITAL Y]
ENTITY_Yuml = "\\U00178" # capital Y, dieresis or umlaut mark, [LATIN CAPITAL LETTER Y WITH DIAERESIS]
ENTITY_ZHcy = "\\U00416" # capital ZHE, Cyrillic, [CYRILLIC CAPITAL LETTER ZHE]
ENTITY_Zacute = "\\U00179" # capital Z, acute accent, [LATIN CAPITAL LETTER Z WITH ACUTE]
ENTITY_Zcaron = "\\U0017D" # capital Z, caron, [LATIN CAPITAL LETTER Z WITH CARON]
ENTITY_Zcy = "\\U00417" # capital ZE, Cyrillic, [CYRILLIC CAPITAL LETTER ZE]
ENTITY_Zdot = "\\U0017B" # capital Z, dot above, [LATIN CAPITAL LETTER Z WITH DOT ABOVE]
ENTITY_ZeroWidthSpace = " " #"\\U0200B" # zero width space, [ZERO WIDTH SPACE]
ENTITY_Zfr = "\\U02128" # /frak Z, upper case z, [BLACK-LETTER CAPITAL Z]
ENTITY_Zopf = "\\U02124" # /Bbb Z, open face Z, [DOUBLE-STRUCK CAPITAL Z]
ENTITY_Zscr = "\\U1D4B5" # /scr Z, script letter Z, [MATHEMATICAL SCRIPT CAPITAL Z]
ENTITY_aacute = "\\U000E1" # small a, acute accent, [LATIN SMALL LETTER A WITH ACUTE]
ENTITY_abreve = "\\U00103" # small a, breve, [LATIN SMALL LETTER A WITH BREVE]
ENTITY_ac = "\\U0223E" # most positive, [INVERTED LAZY S]
ENTITY_acE = "\\U0223E"  #-00333, most positive, two lines below, [INVERTED LAZY S with double underline]
ENTITY_acd = "\\U0223F" # ac current, [SINE WAVE]
ENTITY_acirc = "\\U000E2" # small a, circumflex accent, [LATIN SMALL LETTER A WITH CIRCUMFLEX]
ENTITY_acute = "\\U000B4" # acute accent, [ACUTE ACCENT]
ENTITY_acy = "\\U00430" # small a, Cyrillic, [CYRILLIC SMALL LETTER A]
ENTITY_aelig = "ae" # "\\U000E6" # small ae diphthong (ligature), [LATIN SMALL LETTER AE]
ENTITY_af = "\\U02061" # character showing function application in presentation tagging, [FUNCTION APPLICATION]
ENTITY_afr = "\\U1D51E" # /frak a, lower case a, [MATHEMATICAL FRAKTUR SMALL A]
ENTITY_agrave = "\\U000E0" # small a, grave accent, [LATIN SMALL LETTER A WITH GRAVE]
ENTITY_aleph = "\\U02135" # /aleph aleph, Hebrew, [ALEF SYMBOL]
ENTITY_alpha = "\\U003B1" # /alpha small alpha, Greek, [GREEK SMALL LETTER ALPHA]
ENTITY_amacr = "\\U00101" # small a, macron, [LATIN SMALL LETTER A WITH MACRON]
ENTITY_amalg = "\\U02A3F" # /amalg B: amalgamation or coproduct, [AMALGAMATION OR COPRODUCT]
ENTITY_amp = "\\U00026" # ampersand, [AMPERSAND]
ENTITY_and = "\\U02227" # /wedge /land B: logical and, [LOGICAL AND]
ENTITY_andand = "\\U02A55" # two logical and, [TWO INTERSECTING LOGICAL AND]
ENTITY_andd = "\\U02A5C" # and, horizontal dash, [LOGICAL AND WITH HORIZONTAL DASH]
ENTITY_andslope = "\\U02A58" # sloping large and, [SLOPING LARGE AND]
ENTITY_andv = "\\U02A5A" # and with middle stem, [LOGICAL AND WITH MIDDLE STEM]
ENTITY_ang = "\\U02220" # /angle - angle, [ANGLE]
ENTITY_ange = "\\U029A4" # angle, equal, [ANGLE WITH UNDERBAR]
ENTITY_angle = "\\U02220" # alias ISOAMSO ang, [ANGLE]
ENTITY_angmsd = "\\U02221" # /measuredangle - angle-measured, [MEASURED ANGLE]
ENTITY_angmsdaa = "\\U029A8" # angle-measured, arrow, up, right, [MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING UP AND RIGHT]
ENTITY_angmsdab = "\\U029A9" # angle-measured, arrow, up, left, [MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING UP AND LEFT]
ENTITY_angmsdac = "\\U029AA" # angle-measured, arrow, down, right, [MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING DOWN AND RIGHT]
ENTITY_angmsdad = "\\U029AB" # angle-measured, arrow, down, left, [MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING DOWN AND LEFT]
ENTITY_angmsdae = "\\U029AC" # angle-measured, arrow, right, up, [MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING RIGHT AND UP]
ENTITY_angmsdaf = "\\U029AD" # angle-measured, arrow, left, up, [MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING LEFT AND UP]
ENTITY_angmsdag = "\\U029AE" # angle-measured, arrow, right, down, [MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING RIGHT AND DOWN]
ENTITY_angmsdah = "\\U029AF" # angle-measured, arrow, left, down, [MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING LEFT AND DOWN]
ENTITY_angrt = "\\U0221F" # right (90 degree) angle, [RIGHT ANGLE]
ENTITY_angrtvb = "\\U022BE" # right angle-measured, [RIGHT ANGLE WITH ARC]
ENTITY_angrtvbd = "\\U0299D" # right angle-measured, dot, [MEASURED RIGHT ANGLE WITH DOT]
ENTITY_angsph = "\\U02222" # /sphericalangle angle-spherical, [SPHERICAL ANGLE]
ENTITY_angst = "\\U0212B" # Angstrom capital A, ring, [ANGSTROM SIGN]
ENTITY_angzarr = "\\U0237C" # angle with down zig-zag arrow, [RIGHT ANGLE WITH DOWNWARDS ZIGZAG ARROW]
ENTITY_aogon = "\\U00105" # small a, ogonek, [LATIN SMALL LETTER A WITH OGONEK]
ENTITY_aopf = "\\U1D552" # , [MATHEMATICAL DOUBLE-STRUCK SMALL A]
ENTITY_ap = "\\U02248" # /approx R: approximate, [ALMOST EQUAL TO]
ENTITY_apE = "\\U02A70" # approximately equal or equal to, [APPROXIMATELY EQUAL OR EQUAL TO]
ENTITY_apacir = "\\U02A6F" # approximate, circumflex accent, [ALMOST EQUAL TO WITH CIRCUMFLEX ACCENT]
ENTITY_ape = "\\U0224A" # /approxeq R: approximate, equals, [ALMOST EQUAL OR EQUAL TO]
ENTITY_apid = "\\U0224B" # approximately identical to, [TRIPLE TILDE]
ENTITY_apos = "\\U00027" # apostrophe, [APOSTROPHE]
ENTITY_approx = "\\U02248" # alias ISOTECH ap, [ALMOST EQUAL TO]
ENTITY_approxeq = "\\U0224A" # alias ISOAMSR ape, [ALMOST EQUAL OR EQUAL TO]
ENTITY_aring = "\\U000E5" # small a, ring, [LATIN SMALL LETTER A WITH RING ABOVE]
ENTITY_ascr = "\\U1D4B6" # /scr a, script letter a, [MATHEMATICAL SCRIPT SMALL A]
ENTITY_ast = "\\U0002A" # /ast B: =asterisk, [ASTERISK]
ENTITY_asymp = "\\U02248" # /asymp R: asymptotically equal to, [ALMOST EQUAL TO]
ENTITY_asympeq = "\\U0224D" # Old ISOAMSR asymp (for HTML compatibility), [EQUIVALENT TO]
ENTITY_atilde = "\\U000E3" # small a, tilde, [LATIN SMALL LETTER A WITH TILDE]
ENTITY_auml = "\\U000E4" # small a, dieresis or umlaut mark, [LATIN SMALL LETTER A WITH DIAERESIS]
ENTITY_awconint = "\\U02233" # contour integral, anti-clockwise, [ANTICLOCKWISE CONTOUR INTEGRAL]
ENTITY_awint = "\\U02A11" # anti clock-wise integration, [ANTICLOCKWISE INTEGRATION]
ENTITY_bNot = "\\U02AED" # reverse not with two horizontal strokes, [REVERSED DOUBLE STROKE NOT SIGN]
ENTITY_backcong = "\\U0224C" # alias ISOAMSR bcong, [ALL EQUAL TO]
ENTITY_backepsilon = "\\U003F6" # alias ISOAMSR bepsi, [GREEK REVERSED LUNATE EPSILON SYMBOL]
ENTITY_backprime = "\\U02035" # alias ISOAMSO bprime, [REVERSED PRIME]
ENTITY_backsim = "\\U0223D" # alias ISOAMSR bsim, [REVERSED TILDE]
ENTITY_backsimeq = "\\U022CD" # alias ISOAMSR bsime, [REVERSED TILDE EQUALS]
ENTITY_barvee = "\\U022BD" # bar, vee, [NOR]
ENTITY_barwed = "\\U02305" # /barwedge B: logical and, bar above, [PROJECTIVE]
ENTITY_barwedge = "\\U02305" # alias ISOAMSB barwed, [PROJECTIVE]
ENTITY_bbrk = "\\U023B5" # bottom square bracket, [BOTTOM SQUARE BRACKET]
ENTITY_bbrktbrk = "\\U023B6" # bottom above top square bracket, [BOTTOM SQUARE BRACKET OVER TOP SQUARE BRACKET]
ENTITY_bcong = "\\U0224C" # /backcong R: reverse congruent, [ALL EQUAL TO]
ENTITY_bcy = "\\U00431" # small be, Cyrillic, [CYRILLIC SMALL LETTER BE]
ENTITY_becaus = "\\U02235" # /because R: because, [BECAUSE]
ENTITY_because = "\\U02235" # alias ISOTECH becaus, [BECAUSE]
ENTITY_bemptyv = "\\U029B0" # reversed circle, slash, [REVERSED EMPTY SET]
ENTITY_bepsi = "\\U003F6" # /backepsilon R: such that, [GREEK REVERSED LUNATE EPSILON SYMBOL]
ENTITY_bernou = "\\U0212C" # Bernoulli function (script capital B), [SCRIPT CAPITAL B]
ENTITY_beta = "\\U003B2" # /beta small beta, Greek, [GREEK SMALL LETTER BETA]
ENTITY_beth = "\\U02136" # /beth - beth, Hebrew, [BET SYMBOL]
ENTITY_between = "\\U0226C" # alias ISOAMSR twixt, [BETWEEN]
ENTITY_bfr = "\\U1D51F" # /frak b, lower case b, [MATHEMATICAL FRAKTUR SMALL B]
ENTITY_bigcap = "\\U022C2" # alias ISOAMSB xcap, [N-ARY INTERSECTION]
ENTITY_bigcirc = "\\U025EF" # alias ISOAMSB xcirc, [LARGE CIRCLE]
ENTITY_bigcup = "\\U022C3" # alias ISOAMSB xcup, [N-ARY UNION]
ENTITY_bigodot = "\\U02A00" # alias ISOAMSB xodot, [N-ARY CIRCLED DOT OPERATOR]
ENTITY_bigoplus = "\\U02A01" # alias ISOAMSB xoplus, [N-ARY CIRCLED PLUS OPERATOR]
ENTITY_bigotimes = "\\U02A02" # alias ISOAMSB xotime, [N-ARY CIRCLED TIMES OPERATOR]
ENTITY_bigsqcup = "\\U02A06" # alias ISOAMSB xsqcup, [N-ARY SQUARE UNION OPERATOR]
ENTITY_bigstar = "\\U02605" # ISOPUB starf, [BLACK STAR]
ENTITY_bigtriangledown = "\\U025BD" # alias ISOAMSB xdtri, [WHITE DOWN-POINTING TRIANGLE]
ENTITY_bigtriangleup = "\\U025B3" # alias ISOAMSB xutri, [WHITE UP-POINTING TRIANGLE]
ENTITY_biguplus = "\\U02A04" # alias ISOAMSB xuplus, [N-ARY UNION OPERATOR WITH PLUS]
ENTITY_bigvee = "\\U022C1" # alias ISOAMSB xvee, [N-ARY LOGICAL OR]
ENTITY_bigwedge = "\\U022C0" # alias ISOAMSB xwedge, [N-ARY LOGICAL AND]
ENTITY_bkarow = "\\U0290D" # alias ISOAMSA rbarr, [RIGHTWARDS DOUBLE DASH ARROW]
ENTITY_blacklozenge = "\\U029EB" # alias ISOPUB lozf, [BLACK LOZENGE]
ENTITY_blacksquare = "\\U025AA" # ISOTECH squarf, [BLACK SMALL SQUARE]
ENTITY_blacktriangle = "\\U025B4" # alias ISOPUB utrif, [BLACK UP-POINTING SMALL TRIANGLE]
ENTITY_blacktriangledown = "\\U025BE" # alias ISOPUB dtrif, [BLACK DOWN-POINTING SMALL TRIANGLE]
ENTITY_blacktriangleleft = "\\U025C2" # alias ISOPUB ltrif, [BLACK LEFT-POINTING SMALL TRIANGLE]
ENTITY_blacktriangleright = "\\U025B8" # alias ISOPUB rtrif, [BLACK RIGHT-POINTING SMALL TRIANGLE]
ENTITY_blank = "\\U02423" # significant blank symbol, [OPEN BOX]
ENTITY_blk12 = "\\U02592" # 50% shaded block, [MEDIUM SHADE]
ENTITY_blk14 = "\\U02591" # 25% shaded block, [LIGHT SHADE]
ENTITY_blk34 = "\\U02593" # 75% shaded block, [DARK SHADE]
ENTITY_block = "\\U02588" # full block, [FULL BLOCK]
ENTITY_bne = "\\U0003D" # 020E5, reverse not equal, [EQUALS SIGN with reverse slash]
ENTITY_bnequiv = "\\U02261" # 020E5, reverse not equivalent, [IDENTICAL TO with reverse slash]
ENTITY_bnot = "\\U02310" # reverse not, [REVERSED NOT SIGN]
ENTITY_bopf = "\\U1D553" # , [MATHEMATICAL DOUBLE-STRUCK SMALL B]
ENTITY_bot = "\\U022A5" # alias ISOTECH bottom, [UP TACK]
ENTITY_bottom = "\\U022A5" # /bot bottom, [UP TACK]
ENTITY_bowtie = "\\U022C8" # /bowtie R:, [BOWTIE]
ENTITY_boxDL = "\\U02557" # lower left quadrant, [BOX DRAWINGS DOUBLE DOWN AND LEFT]
ENTITY_boxDR = "\\U02554" # lower right quadrant, [BOX DRAWINGS DOUBLE DOWN AND RIGHT]
ENTITY_boxDl = "\\U02556" # lower left quadrant, [BOX DRAWINGS DOWN DOUBLE AND LEFT SINGLE]
ENTITY_boxDr = "\\U02553" # lower right quadrant, [BOX DRAWINGS DOWN DOUBLE AND RIGHT SINGLE]
ENTITY_boxH = "\\U02550" # horizontal line, [BOX DRAWINGS DOUBLE HORIZONTAL]
ENTITY_boxHD = "\\U02566" # lower left and right quadrants, [BOX DRAWINGS DOUBLE DOWN AND HORIZONTAL]
ENTITY_boxHU = "\\U02569" # upper left and right quadrants, [BOX DRAWINGS DOUBLE UP AND HORIZONTAL]
ENTITY_boxHd = "\\U02564" # lower left and right quadrants, [BOX DRAWINGS DOWN SINGLE AND HORIZONTAL DOUBLE]
ENTITY_boxHu = "\\U02567" # upper left and right quadrants, [BOX DRAWINGS UP SINGLE AND HORIZONTAL DOUBLE]
ENTITY_boxUL = "\\U0255D" # upper left quadrant, [BOX DRAWINGS DOUBLE UP AND LEFT]
ENTITY_boxUR = "\\U0255A" # upper right quadrant, [BOX DRAWINGS DOUBLE UP AND RIGHT]
ENTITY_boxUl = "\\U0255C" # upper left quadrant, [BOX DRAWINGS UP DOUBLE AND LEFT SINGLE]
ENTITY_boxUr = "\\U02559" # upper right quadrant, [BOX DRAWINGS UP DOUBLE AND RIGHT SINGLE]
ENTITY_boxV = "\\U02551" # vertical line, [BOX DRAWINGS DOUBLE VERTICAL]
ENTITY_boxVH = "\\U0256C" # all four quadrants, [BOX DRAWINGS DOUBLE VERTICAL AND HORIZONTAL]
ENTITY_boxVL = "\\U02563" # upper and lower left quadrants, [BOX DRAWINGS DOUBLE VERTICAL AND LEFT]
ENTITY_boxVR = "\\U02560" # upper and lower right quadrants, [BOX DRAWINGS DOUBLE VERTICAL AND RIGHT]
ENTITY_boxVh = "\\U0256B" # all four quadrants, [BOX DRAWINGS VERTICAL DOUBLE AND HORIZONTAL SINGLE]
ENTITY_boxVl = "\\U02562" # upper and lower left quadrants, [BOX DRAWINGS VERTICAL DOUBLE AND LEFT SINGLE]
ENTITY_boxVr = "\\U0255F" # upper and lower right quadrants, [BOX DRAWINGS VERTICAL DOUBLE AND RIGHT SINGLE]
ENTITY_boxbox = "\\U029C9" # two joined squares, [TWO JOINED SQUARES]
ENTITY_boxdL = "\\U02555" # lower left quadrant, [BOX DRAWINGS DOWN SINGLE AND LEFT DOUBLE]
ENTITY_boxdR = "\\U02552" # lower right quadrant, [BOX DRAWINGS DOWN SINGLE AND RIGHT DOUBLE]
ENTITY_boxdl = "\\U02510" # lower left quadrant, [BOX DRAWINGS LIGHT DOWN AND LEFT]
ENTITY_boxdr = "\\U0250C" # lower right quadrant, [BOX DRAWINGS LIGHT DOWN AND RIGHT]
ENTITY_boxh = "\\U02500" # horizontal line, [BOX DRAWINGS LIGHT HORIZONTAL]
ENTITY_boxhD = "\\U02565" # lower left and right quadrants, [BOX DRAWINGS DOWN DOUBLE AND HORIZONTAL SINGLE]
ENTITY_boxhU = "\\U02568" # upper left and right quadrants, [BOX DRAWINGS UP DOUBLE AND HORIZONTAL SINGLE]
ENTITY_boxhd = "\\U0252C" # lower left and right quadrants, [BOX DRAWINGS LIGHT DOWN AND HORIZONTAL]
ENTITY_boxhu = "\\U02534" # upper left and right quadrants, [BOX DRAWINGS LIGHT UP AND HORIZONTAL]
ENTITY_boxminus = "\\U0229F" # alias ISOAMSB minusb, [SQUARED MINUS]
ENTITY_boxplus = "\\U0229E" # alias ISOAMSB plusb, [SQUARED PLUS]
ENTITY_boxtimes = "\\U022A0" # alias ISOAMSB timesb, [SQUARED TIMES]
ENTITY_boxuL = "\\U0255B" # upper left quadrant, [BOX DRAWINGS UP SINGLE AND LEFT DOUBLE]
ENTITY_boxuR = "\\U02558" # upper right quadrant, [BOX DRAWINGS UP SINGLE AND RIGHT DOUBLE]
ENTITY_boxul = "\\U02518" # upper left quadrant, [BOX DRAWINGS LIGHT UP AND LEFT]
ENTITY_boxur = "\\U02514" # upper right quadrant, [BOX DRAWINGS LIGHT UP AND RIGHT]
ENTITY_boxv = "\\U02502" # vertical line, [BOX DRAWINGS LIGHT VERTICAL]
ENTITY_boxvH = "\\U0256A" # all four quadrants, [BOX DRAWINGS VERTICAL SINGLE AND HORIZONTAL DOUBLE]
ENTITY_boxvL = "\\U02561" # upper and lower left quadrants, [BOX DRAWINGS VERTICAL SINGLE AND LEFT DOUBLE]
ENTITY_boxvR = "\\U0255E" # upper and lower right quadrants, [BOX DRAWINGS VERTICAL SINGLE AND RIGHT DOUBLE]
ENTITY_boxvh = "\\U0253C" # all four quadrants, [BOX DRAWINGS LIGHT VERTICAL AND HORIZONTAL]
ENTITY_boxvl = "\\U02524" # upper and lower left quadrants, [BOX DRAWINGS LIGHT VERTICAL AND LEFT]
ENTITY_boxvr = "\\U0251C" # upper and lower right quadrants, [BOX DRAWINGS LIGHT VERTICAL AND RIGHT]
ENTITY_bprime = "\\U02035" # /backprime - reverse prime, [REVERSED PRIME]
ENTITY_breve = "\\U002D8" # breve, [BREVE]
ENTITY_brvbar = "\\U000A6" # broken (vertical) bar, [BROKEN BAR]
ENTITY_bscr = "\\U1D4B7" # /scr b, script letter b, [MATHEMATICAL SCRIPT SMALL B]
ENTITY_bsemi = "\\U0204F" # reverse semi-colon, [REVERSED SEMICOLON]
ENTITY_bsim = "\\U0223D" # /backsim R: reverse similar, [REVERSED TILDE]
ENTITY_bsime = "\\U022CD" # /backsimeq R: reverse similar, eq, [REVERSED TILDE EQUALS]
ENTITY_bsol = "\\U0005C" # /backslash =reverse solidus, [REVERSE SOLIDUS]
ENTITY_bsolb = "\\U029C5" # reverse solidus in square, [SQUARED FALLING DIAGONAL SLASH]
ENTITY_bsolhsub = "\\U0005C" # 02282, reverse solidus, subset, [REVERSE SOLIDUS, SUBSET OF]
ENTITY_bull = "\\U02022" # /bullet B: =round bullet, filled, [BULLET]
ENTITY_bullet = "\\U02022" # alias ISOPUB bull, [BULLET]
ENTITY_bump = "\\U0224E" # /Bumpeq R: bumpy equals, [GEOMETRICALLY EQUIVALENT TO]
ENTITY_bumpE = "\\U02AAE" # bump, equals, [EQUALS SIGN WITH BUMPY ABOVE]
ENTITY_bumpe = "\\U0224F" # /bumpeq R: bumpy equals, equals, [DIFFERENCE BETWEEN]
ENTITY_bumpeq = "\\U0224F" # alias ISOAMSR bumpe, [DIFFERENCE BETWEEN]
ENTITY_cacute = "\\U00107" # small c, acute accent, [LATIN SMALL LETTER C WITH ACUTE]
ENTITY_cap = "\\U02229" # /cap B: intersection, [INTERSECTION]
ENTITY_capand = "\\U02A44" # intersection, and, [INTERSECTION WITH LOGICAL AND]
ENTITY_capbrcup = "\\U02A49" # intersection, bar, union, [INTERSECTION ABOVE BAR ABOVE UNION]
ENTITY_capcap = "\\U02A4B" # intersection, intersection, joined, [INTERSECTION BESIDE AND JOINED WITH INTERSECTION]
ENTITY_capcup = "\\U02A47" # intersection above union, [INTERSECTION ABOVE UNION]
ENTITY_capdot = "\\U02A40" # intersection, with dot, [INTERSECTION WITH DOT]
ENTITY_caps = "\\U02229" # 0FE00, intersection, serifs, [INTERSECTION with serifs]
ENTITY_caret = "\\U02041" # caret (insertion mark), [CARET INSERTION POINT]
ENTITY_caron = "\\U002C7" # caron, [CARON]
ENTITY_ccaps = "\\U02A4D" # closed intersection, serifs, [CLOSED INTERSECTION WITH SERIFS]
ENTITY_ccaron = "\\U0010D" # small c, caron, [LATIN SMALL LETTER C WITH CARON]
ENTITY_ccedil = "\\U000E7" # small c, cedilla, [LATIN SMALL LETTER C WITH CEDILLA]
ENTITY_ccirc = "\\U00109" # small c, circumflex accent, [LATIN SMALL LETTER C WITH CIRCUMFLEX]
ENTITY_ccups = "\\U02A4C" # closed union, serifs, [CLOSED UNION WITH SERIFS]
ENTITY_ccupssm = "\\U02A50" # closed union, serifs, smash product, [CLOSED UNION WITH SERIFS AND SMASH PRODUCT]
ENTITY_cdot = "\\U0010B" # small c, dot above, [LATIN SMALL LETTER C WITH DOT ABOVE]
ENTITY_cedil = "\\U000B8" # cedilla, [CEDILLA]
ENTITY_cemptyv = "\\U029B2" # circle, slash, small circle above, [EMPTY SET WITH SMALL CIRCLE ABOVE]
ENTITY_cent = "\\U000A2" # cent sign, [CENT SIGN]
ENTITY_centerdot = "\\U000B7" # alias ISONUM middot, [MIDDLE DOT]
ENTITY_cfr = "\\U1D520" # /frak c, lower case c, [MATHEMATICAL FRAKTUR SMALL C]
ENTITY_chcy = "\\U00447" # small che, Cyrillic, [CYRILLIC SMALL LETTER CHE]
ENTITY_check = "\\U02713" # /checkmark =tick, check mark, [CHECK MARK]
ENTITY_checkmark = "\\U02713" # alias ISOPUB check, [CHECK MARK]
ENTITY_chi = "\\U003C7" # /chi small chi, Greek, [GREEK SMALL LETTER CHI]
ENTITY_cir = "\\U025CB" # /circ B: =circle, open, [WHITE CIRCLE]
ENTITY_cirE = "\\U029C3" # circle, two horizontal stroked to the right, [CIRCLE WITH TWO HORIZONTAL STROKES TO THE RIGHT]
ENTITY_circ = "\\U002C6" # circumflex accent, [MODIFIER LETTER CIRCUMFLEX ACCENT]
ENTITY_circeq = "\\U02257" # alias ISOAMSR cire, [RING EQUAL TO]
ENTITY_circlearrowleft = "\\U021BA" # alias ISOAMSA olarr, [ANTICLOCKWISE OPEN CIRCLE ARROW]
ENTITY_circlearrowright = "\\U021BB" # alias ISOAMSA orarr, [CLOCKWISE OPEN CIRCLE ARROW]
ENTITY_circledR = "\\U000AE" # alias ISONUM reg, [REGISTERED SIGN]
ENTITY_circledS = "\\U024C8" # alias ISOAMSO oS, [CIRCLED LATIN CAPITAL LETTER S]
ENTITY_circledast = "\\U0229B" # alias ISOAMSB oast, [CIRCLED ASTERISK OPERATOR]
ENTITY_circledcirc = "\\U0229A" # alias ISOAMSB ocir, [CIRCLED RING OPERATOR]
ENTITY_circleddash = "\\U0229D" # alias ISOAMSB odash, [CIRCLED DASH]
ENTITY_cire = "\\U02257" # /circeq R: circle, equals, [RING EQUAL TO]
ENTITY_cirfnint = "\\U02A10" # circulation function, [CIRCULATION FUNCTION]
ENTITY_cirmid = "\\U02AEF" # circle, mid below, [VERTICAL LINE WITH CIRCLE ABOVE]
ENTITY_cirscir = "\\U029C2" # circle, small circle to the right, [CIRCLE WITH SMALL CIRCLE TO THE RIGHT]
ENTITY_clubs = "\\U02663" # /clubsuit =club suit symbol, [BLACK CLUB SUIT]
ENTITY_clubsuit = "\\U02663" # ISOPUB clubs, [BLACK CLUB SUIT]
ENTITY_colon = "\\U0003A" # /colon P:, [COLON]
ENTITY_colone = "\\U02254" # /coloneq R: colon, equals, [COLON EQUALS]
ENTITY_coloneq = "\\U02254" # alias ISOAMSR colone, [COLON EQUALS]
ENTITY_comma = "\\U0002C" # P: =comma, [COMMA]
ENTITY_commat = "\\U00040" # commercial at, [COMMERCIAL AT]
ENTITY_comp = "\\U02201" # /complement - complement sign, [COMPLEMENT]
ENTITY_compfn = "\\U02218" # /circ B: composite function (small circle), [RING OPERATOR]
ENTITY_complement = "\\U02201" # alias ISOAMSO comp, [COMPLEMENT]
ENTITY_complexes = "\\U02102" # the field of complex numbers, [DOUBLE-STRUCK CAPITAL C]
ENTITY_cong = "\\U02245" # /cong R: congruent with, [APPROXIMATELY EQUAL TO]
ENTITY_congdot = "\\U02A6D" # congruent, dot, [CONGRUENT WITH DOT ABOVE]
ENTITY_conint = "\\U0222E" # /oint L: contour integral operator, [CONTOUR INTEGRAL]
ENTITY_copf = "\\U1D554" # , [MATHEMATICAL DOUBLE-STRUCK SMALL C]
ENTITY_coprod = "\\U02210" # /coprod L: coproduct operator, [N-ARY COPRODUCT]
ENTITY_copy = "\\U000A9" # copyright sign, [COPYRIGHT SIGN]
ENTITY_copysr = "\\U02117" # sound recording copyright sign, [SOUND RECORDING COPYRIGHT]
ENTITY_cross = "\\U02717" # ballot cross, [BALLOT X]
ENTITY_cscr = "\\U1D4B8" # /scr c, script letter c, [MATHEMATICAL SCRIPT SMALL C]
ENTITY_csub = "\\U02ACF" # subset, closed, [CLOSED SUBSET]
ENTITY_csube = "\\U02AD1" # subset, closed, equals, [CLOSED SUBSET OR EQUAL TO]
ENTITY_csup = "\\U02AD0" # superset, closed, [CLOSED SUPERSET]
ENTITY_csupe = "\\U02AD2" # superset, closed, equals, [CLOSED SUPERSET OR EQUAL TO]
ENTITY_ctdot = "\\U022EF" # /cdots, three dots, centered, [MIDLINE HORIZONTAL ELLIPSIS]
ENTITY_cudarrl = "\\U02938" # left, curved, down arrow, [RIGHT-SIDE ARC CLOCKWISE ARROW]
ENTITY_cudarrr = "\\U02935" # right, curved, down arrow, [ARROW POINTING RIGHTWARDS THEN CURVING DOWNWARDS]
ENTITY_cuepr = "\\U022DE" # /curlyeqprec R: curly eq, precedes, [EQUAL TO OR PRECEDES]
ENTITY_cuesc = "\\U022DF" # /curlyeqsucc R: curly eq, succeeds, [EQUAL TO OR SUCCEEDS]
ENTITY_cularr = "\\U021B6" # /curvearrowleft A: left curved arrow, [ANTICLOCKWISE TOP SEMICIRCLE ARROW]
ENTITY_cularrp = "\\U0293D" # curved left arrow with plus, [TOP ARC ANTICLOCKWISE ARROW WITH PLUS]
ENTITY_cup = "\\U0222A" # /cup B: union or logical sum, [UNION]
ENTITY_cupbrcap = "\\U02A48" # union, bar, intersection, [UNION ABOVE BAR ABOVE INTERSECTION]
ENTITY_cupcap = "\\U02A46" # union above intersection, [UNION ABOVE INTERSECTION]
ENTITY_cupcup = "\\U02A4A" # union, union, joined, [UNION BESIDE AND JOINED WITH UNION]
ENTITY_cupdot = "\\U0228D" # union, with dot, [MULTISET MULTIPLICATION]
ENTITY_cupor = "\\U02A45" # union, or, [UNION WITH LOGICAL OR]
ENTITY_cups = "\\U0222A" # 0FE00, union, serifs, [UNION with serifs]
ENTITY_curarr = "\\U021B7" # /curvearrowright A: rt curved arrow, [CLOCKWISE TOP SEMICIRCLE ARROW]
ENTITY_curarrm = "\\U0293C" # curved right arrow with minus, [TOP ARC CLOCKWISE ARROW WITH MINUS]
ENTITY_curlyeqprec = "\\U022DE" # alias ISOAMSR cuepr, [EQUAL TO OR PRECEDES]
ENTITY_curlyeqsucc = "\\U022DF" # alias ISOAMSR cuesc, [EQUAL TO OR SUCCEEDS]
ENTITY_curlyvee = "\\U022CE" # alias ISOAMSB cuvee, [CURLY LOGICAL OR]
ENTITY_curlywedge = "\\U022CF" # alias ISOAMSB cuwed, [CURLY LOGICAL AND]
ENTITY_curren = "\\U000A4" # general currency sign, [CURRENCY SIGN]
ENTITY_curvearrowleft = "\\U021B6" # alias ISOAMSA cularr, [ANTICLOCKWISE TOP SEMICIRCLE ARROW]
ENTITY_curvearrowright = "\\U021B7" # alias ISOAMSA curarr, [CLOCKWISE TOP SEMICIRCLE ARROW]
ENTITY_cuvee = "\\U022CE" # /curlyvee B: curly logical or, [CURLY LOGICAL OR]
ENTITY_cuwed = "\\U022CF" # /curlywedge B: curly logical and, [CURLY LOGICAL AND]
ENTITY_cwconint = "\\U02232" # contour integral, clockwise, [CLOCKWISE CONTOUR INTEGRAL]
ENTITY_cwint = "\\U02231" # clockwise integral, [CLOCKWISE INTEGRAL]
ENTITY_cylcty = "\\U0232D" # cylindricity, [CYLINDRICITY]
ENTITY_dArr = "\\U021D3" # /Downarrow A: down dbl arrow, [DOWNWARDS DOUBLE ARROW]
ENTITY_dHar = "\\U02965" # down harpoon-left, down harpoon-right, [DOWNWARDS HARPOON WITH BARB LEFT BESIDE DOWNWARDS HARPOON WITH BARB RIGHT]
ENTITY_dagger = "\\U02020" # /dagger B: =dagger, [DAGGER]
ENTITY_dagger = "\\U02020" # /dagger B: dagger relation, [DAGGER]
ENTITY_daleth = "\\U02138" # /daleth - daleth, Hebrew, [DALET SYMBOL]
ENTITY_darr = "\\U02193" # /downarrow A: =downward arrow, [DOWNWARDS ARROW]
ENTITY_dash = "\\U02010" # hyphen (true graphic), [HYPHEN]
ENTITY_dashv = "\\U022A3" # /dashv R: dash, vertical, [LEFT TACK]
ENTITY_dbkarow = "\\U0290F" # alias ISOAMSA rBarr, [RIGHTWARDS TRIPLE DASH ARROW]
ENTITY_dblac = "\\U002DD" # double acute accent, [DOUBLE ACUTE ACCENT]
ENTITY_dcaron = "\\U0010F" # small d, caron, [LATIN SMALL LETTER D WITH CARON]
ENTITY_dcy = "\\U00434" # small de, Cyrillic, [CYRILLIC SMALL LETTER DE]
ENTITY_dd = "\\U02146" # d for use in differentials, e.g., within integrals, [DOUBLE-STRUCK ITALIC SMALL D]
ENTITY_ddagger = "\\U02021" # alias ISOPUB Dagger, [DOUBLE DAGGER]
ENTITY_ddarr = "\\U021CA" # /downdownarrows A: two down arrows, [DOWNWARDS PAIRED ARROWS]
ENTITY_ddotseq = "\\U02A77" # alias ISOAMSR eDDot, [EQUALS SIGN WITH TWO DOTS ABOVE AND TWO DOTS BELOW]
ENTITY_deg = "\\U000B0" # degree sign, [DEGREE SIGN]
ENTITY_delta = "\\U003B4" # /delta small delta, Greek, [GREEK SMALL LETTER DELTA]
ENTITY_demptyv = "\\U029B1" # circle, slash, bar above, [EMPTY SET WITH OVERBAR]
ENTITY_dfisht = "\\U0297F" # down fish tail, [DOWN FISH TAIL]
ENTITY_dfr = "\\U1D521" # /frak d, lower case d, [MATHEMATICAL FRAKTUR SMALL D]
ENTITY_dharl = "\\U021C3" # /downharpoonleft A: dn harpoon-left, [DOWNWARDS HARPOON WITH BARB LEFTWARDS]
ENTITY_dharr = "\\U021C2" # /downharpoonright A: down harpoon-rt, [DOWNWARDS HARPOON WITH BARB RIGHTWARDS]
ENTITY_diam = "\\U022C4" # /diamond B: open diamond, [DIAMOND OPERATOR]
ENTITY_diamond = "\\U022C4" # alias ISOAMSB diam, [DIAMOND OPERATOR]
ENTITY_diamondsuit = "\\U02666" # ISOPUB diams, [BLACK DIAMOND SUIT]
ENTITY_diams = "\\U02666" # /diamondsuit =diamond suit symbol, [BLACK DIAMOND SUIT]
ENTITY_die = "\\U000A8" # dieresis, [DIAERESIS]
ENTITY_digamma = "\\U003DD" # alias ISOGRK3 gammad, [GREEK SMALL LETTER DIGAMMA]
ENTITY_disin = "\\U022F2" # set membership, long horizontal stroke, [ELEMENT OF WITH LONG HORIZONTAL STROKE]
ENTITY_div = "\\U000F7" # alias ISONUM divide, [DIVISION SIGN]
ENTITY_divide = "\\U000F7" # /div B: =divide sign, [DIVISION SIGN]
ENTITY_divideontimes = "\\U022C7" # alias ISOAMSB divonx, [DIVISION TIMES]
ENTITY_divonx = "\\U022C7" # /divideontimes B: division on times, [DIVISION TIMES]
ENTITY_djcy = "\\U00452" # small dje, Serbian, [CYRILLIC SMALL LETTER DJE]
ENTITY_dlcorn = "\\U0231E" # /llcorner O: lower left corner, [BOTTOM LEFT CORNER]
ENTITY_dlcrop = "\\U0230D" # downward left crop mark, [BOTTOM LEFT CROP]
ENTITY_dollar = "\\U00024" # dollar sign, [DOLLAR SIGN]
ENTITY_dopf = "\\U1D555" # , [MATHEMATICAL DOUBLE-STRUCK SMALL D]
ENTITY_dot = "\\U002D9" # dot above, [DOT ABOVE]
ENTITY_doteq = "\\U02250" # alias ISOAMSR esdot, [APPROACHES THE LIMIT]
ENTITY_doteqdot = "\\U02251" # alias ISOAMSR eDot, [GEOMETRICALLY EQUAL TO]
ENTITY_dotminus = "\\U02238" # alias ISOAMSB minusd, [DOT MINUS]
ENTITY_dotplus = "\\U02214" # alias ISOAMSB plusdo, [DOT PLUS]
ENTITY_dotsquare = "\\U022A1" # alias ISOAMSB sdotb, [SQUARED DOT OPERATOR]
ENTITY_doublebarwedge = "\\U02306" # alias ISOAMSB Barwed, [PERSPECTIVE]
ENTITY_downarrow = "\\U02193" # alias ISONUM darr, [DOWNWARDS ARROW]
ENTITY_downdownarrows = "\\U021CA" # alias ISOAMSA ddarr, [DOWNWARDS PAIRED ARROWS]
ENTITY_downharpoonleft = "\\U021C3" # alias ISOAMSA dharl, [DOWNWARDS HARPOON WITH BARB LEFTWARDS]
ENTITY_downharpoonright = "\\U021C2" # alias ISOAMSA dharr, [DOWNWARDS HARPOON WITH BARB RIGHTWARDS]
ENTITY_drbkarow = "\\U02910" # alias ISOAMSA RBarr, [RIGHTWARDS TWO-HEADED TRIPLE DASH ARROW]
ENTITY_drcorn = "\\U0231F" # /lrcorner C: lower right corner, [BOTTOM RIGHT CORNER]
ENTITY_drcrop = "\\U0230C" # downward right crop mark, [BOTTOM RIGHT CROP]
ENTITY_dscr = "\\U1D4B9" # /scr d, script letter d, [MATHEMATICAL SCRIPT SMALL D]
ENTITY_dscy = "\\U00455" # small dse, Macedonian, [CYRILLIC SMALL LETTER DZE]
ENTITY_dsol = "\\U029F6" # solidus, bar above, [SOLIDUS WITH OVERBAR]
ENTITY_dstrok = "\\U00111" # small d, stroke, [LATIN SMALL LETTER D WITH STROKE]
ENTITY_dtdot = "\\U022F1" # /ddots, three dots, descending, [DOWN RIGHT DIAGONAL ELLIPSIS]
ENTITY_dtri = "\\U025BF" # /triangledown =down triangle, open, [WHITE DOWN-POINTING SMALL TRIANGLE]
ENTITY_dtrif = "\\U025BE" # /blacktriangledown =dn tri, filled, [BLACK DOWN-POINTING SMALL TRIANGLE]
ENTITY_duarr = "\\U021F5" # down arrow, up arrow, [DOWNWARDS ARROW LEFTWARDS OF UPWARDS ARROW]
ENTITY_duhar = "\\U0296F" # down harp, up harp, [DOWNWARDS HARPOON WITH BARB LEFT BESIDE UPWARDS HARPOON WITH BARB RIGHT]
ENTITY_dwangle = "\\U029A6" # large downward pointing angle, [OBLIQUE ANGLE OPENING UP]
ENTITY_dzcy = "\\U0045F" # small dze, Serbian, [CYRILLIC SMALL LETTER DZHE]
ENTITY_dzigrarr = "\\U027FF" # right long zig-zag arrow, [LONG RIGHTWARDS SQUIGGLE ARROW]
ENTITY_eDDot = "\\U02A77" # /ddotseq R: equal with four dots, [EQUALS SIGN WITH TWO DOTS ABOVE AND TWO DOTS BELOW]
ENTITY_eDot = "\\U02251" # /doteqdot /Doteq R: eq, even dots, [GEOMETRICALLY EQUAL TO]
ENTITY_eacute = "\\U000E9" # small e, acute accent, [LATIN SMALL LETTER E WITH ACUTE]
ENTITY_easter = "\\U02A6E" # equal, asterisk above, [EQUALS WITH ASTERISK]
ENTITY_ecaron = "\\U0011B" # small e, caron, [LATIN SMALL LETTER E WITH CARON]
ENTITY_ecir = "\\U02256" # /eqcirc R: circle on equals sign, [RING IN EQUAL TO]
ENTITY_ecirc = "\\U000EA" # small e, circumflex accent, [LATIN SMALL LETTER E WITH CIRCUMFLEX]
ENTITY_ecolon = "\\U02255" # /eqcolon R: equals, colon, [EQUALS COLON]
ENTITY_ecy = "\\U0044D" # small e, Cyrillic, [CYRILLIC SMALL LETTER E]
ENTITY_edot = "\\U00117" # small e, dot above, [LATIN SMALL LETTER E WITH DOT ABOVE]
ENTITY_ee = "\\U02147" # e use for the exponential base of the natural logarithms, [DOUBLE-STRUCK ITALIC SMALL E]
ENTITY_efDot = "\\U02252" # /fallingdotseq R: eq, falling dots, [APPROXIMATELY EQUAL TO OR THE IMAGE OF]
ENTITY_efr = "\\U1D522" # /frak e, lower case e, [MATHEMATICAL FRAKTUR SMALL E]
ENTITY_eg = "\\U02A9A" # equal-or-greater, [DOUBLE-LINE EQUAL TO OR GREATER-THAN]
ENTITY_egrave = "\\U000E8" # small e, grave accent, [LATIN SMALL LETTER E WITH GRAVE]
ENTITY_egs = "\\U02A96" # /eqslantgtr R: equal-or-gtr, slanted, [SLANTED EQUAL TO OR GREATER-THAN]
ENTITY_egsdot = "\\U02A98" # equal-or-greater, slanted, dot inside, [SLANTED EQUAL TO OR GREATER-THAN WITH DOT INSIDE]
ENTITY_el = "\\U02A99" # equal-or-less, [DOUBLE-LINE EQUAL TO OR LESS-THAN]
ENTITY_elinters = "\\U0FFFD" # electrical intersection, [REPLACEMENT CHARACTER]
ENTITY_ell = "\\U02113" # /ell - cursive small l, [SCRIPT SMALL L]
ENTITY_els = "\\U02A95" # /eqslantless R: eq-or-less, slanted, [SLANTED EQUAL TO OR LESS-THAN]
ENTITY_elsdot = "\\U02A97" # equal-or-less, slanted, dot inside, [SLANTED EQUAL TO OR LESS-THAN WITH DOT INSIDE]
ENTITY_emacr = "\\U00113" # small e, macron, [LATIN SMALL LETTER E WITH MACRON]
ENTITY_empty = "\\U02205" # /emptyset - zero, slash, [EMPTY SET]
ENTITY_emptyset = "\\U02205" # alias ISOAMSO empty, [EMPTY SET]
ENTITY_emptyv = "\\U02205" # /varnothing - circle, slash, [EMPTY SET]
ENTITY_emsp = " " #"\\U02003" # em space, [EM SPACE]
ENTITY_emsp13 = " " #"\\U02004" # 1/3-em space, [THREE-PER-EM SPACE]
ENTITY_emsp14 = " " #"\\U02005" # 1/4-em space, [FOUR-PER-EM SPACE]
ENTITY_eng = "\\U0014B" # small eng, Lapp, [LATIN SMALL LETTER ENG]
ENTITY_ensp = " " #"\\U02002" # en space (1/2-em), [EN SPACE]
ENTITY_eogon = "\\U00119" # small e, ogonek, [LATIN SMALL LETTER E WITH OGONEK]
ENTITY_eopf = "\\U1D556" # , [MATHEMATICAL DOUBLE-STRUCK SMALL E]
ENTITY_epar = "\\U022D5" # parallel, equal; equal or parallel, [EQUAL AND PARALLEL TO]
ENTITY_eparsl = "\\U029E3" # parallel, slanted, equal; homothetically congruent to, [EQUALS SIGN AND SLANTED PARALLEL]
ENTITY_eplus = "\\U02A71" # equal, plus, [EQUALS SIGN ABOVE PLUS SIGN]
ENTITY_epsi = "\\U003F5" # /straightepsilon, small epsilon, Greek, [GREEK LUNATE EPSILON SYMBOL]
ENTITY_epsiv = "\\U003B5" # /varepsilon, [GREEK SMALL LETTER EPSILON]
ENTITY_eqcirc = "\\U02256" # alias ISOAMSR ecir, [RING IN EQUAL TO]
ENTITY_eqcolon = "\\U02255" # alias ISOAMSR ecolon, [EQUALS COLON]
ENTITY_eqsim = "\\U02242" # alias ISOAMSR esim, [MINUS TILDE]
ENTITY_eqslantgtr = "\\U02A96" # alias ISOAMSR egs, [SLANTED EQUAL TO OR GREATER-THAN]
ENTITY_eqslantless = "\\U02A95" # alias ISOAMSR els, [SLANTED EQUAL TO OR LESS-THAN]
ENTITY_equals = "\\U0003D" # equals sign R:, [EQUALS SIGN]
ENTITY_equest = "\\U0225F" # /questeq R: equal with questionmark, [QUESTIONED EQUAL TO]
ENTITY_equiv = "\\U02261" # /equiv R: identical with, [IDENTICAL TO]
ENTITY_equivDD = "\\U02A78" # equivalent, four dots above, [EQUIVALENT WITH FOUR DOTS ABOVE]
ENTITY_eqvparsl = "\\U029E5" # equivalent, equal; congruent and parallel, [IDENTICAL TO AND SLANTED PARALLEL]
ENTITY_erDot = "\\U02253" # /risingdotseq R: eq, rising dots, [IMAGE OF OR APPROXIMATELY EQUAL TO]
ENTITY_erarr = "\\U02971" # equal, right arrow below, [EQUALS SIGN ABOVE RIGHTWARDS ARROW]
ENTITY_escr = "\\U0212F" # /scr e, script letter e, [SCRIPT SMALL E]
ENTITY_esdot = "\\U02250" # /doteq R: equals, single dot above, [APPROACHES THE LIMIT]
ENTITY_esim = "\\U02242" # /esim R: equals, similar, [MINUS TILDE]
ENTITY_eta = "\\U003B7" # /eta small eta, Greek, [GREEK SMALL LETTER ETA]
ENTITY_eth = "\\U000F0" # small eth, Icelandic, [LATIN SMALL LETTER ETH]
ENTITY_euml = "\\U000EB" # small e, dieresis or umlaut mark, [LATIN SMALL LETTER E WITH DIAERESIS]
ENTITY_excl = "\\U00021" # exclamation mark, [EXCLAMATION MARK]
ENTITY_exist = "\\U02203" # /exists at least one exists, [THERE EXISTS]
ENTITY_expectation = "\\U02130" # expectation (operator), [SCRIPT CAPITAL E]
ENTITY_exponentiale = "\\U02147" # base of the Napierian logarithms, [DOUBLE-STRUCK ITALIC SMALL E]
ENTITY_fallingdotseq = "\\U02252" # alias ISOAMSR efDot, [APPROXIMATELY EQUAL TO OR THE IMAGE OF]
ENTITY_fcy = "\\U00444" # small ef, Cyrillic, [CYRILLIC SMALL LETTER EF]
ENTITY_female = "\\U02640" # female symbol, [FEMALE SIGN]
ENTITY_ffilig = "ffi" # "\\U0FB03" # small ffi ligature, [LATIN SMALL LIGATURE FFI]
ENTITY_fflig = "ff" # "\\U0FB00" # small ff ligature, [LATIN SMALL LIGATURE FF]
ENTITY_ffllig = "ffl" # "\\U0FB04" # small ffl ligature, [LATIN SMALL LIGATURE FFL]
ENTITY_ffr = "\\U1D523" # /frak f, lower case f, [MATHEMATICAL FRAKTUR SMALL F]
ENTITY_filig = "fi" # "\\U0FB01" # small fi ligature, [LATIN SMALL LIGATURE FI]
ENTITY_flat = "\\U0266D" # /flat =musical flat, [MUSIC FLAT SIGN]
ENTITY_fllig = "fl" # "\\U0FB02" # small fl ligature, [LATIN SMALL LIGATURE FL]
ENTITY_fltns = "\\U025B1" # flatness, [WHITE PARALLELOGRAM]
ENTITY_fnof = "\\U00192" # function of (italic small f), [LATIN SMALL LETTER F WITH HOOK]
ENTITY_fopf = "\\U1D557" # , [MATHEMATICAL DOUBLE-STRUCK SMALL F]
ENTITY_forall = "\\U02200" # /forall for all, [FOR ALL]
ENTITY_fork = "\\U022D4" # /pitchfork R: pitchfork, [PITCHFORK]
ENTITY_forkv = "\\U02AD9" # fork, variant, [ELEMENT OF OPENING DOWNWARDS]
ENTITY_fpartint = "\\U02A0D" # finite part integral, [FINITE PART INTEGRAL]
ENTITY_frac12 = "\\U000BD" # fraction one-half, [VULGAR FRACTION ONE HALF]
ENTITY_frac13 = "\\U02153" # fraction one-third, [VULGAR FRACTION ONE THIRD]
ENTITY_frac14 = "\\U000BC" # fraction one-quarter, [VULGAR FRACTION ONE QUARTER]
ENTITY_frac15 = "\\U02155" # fraction one-fifth, [VULGAR FRACTION ONE FIFTH]
ENTITY_frac16 = "\\U02159" # fraction one-sixth, [VULGAR FRACTION ONE SIXTH]
ENTITY_frac18 = "\\U0215B" # fraction one-eighth, [VULGAR FRACTION ONE EIGHTH]
ENTITY_frac23 = "\\U02154" # fraction two-thirds, [VULGAR FRACTION TWO THIRDS]
ENTITY_frac25 = "\\U02156" # fraction two-fifths, [VULGAR FRACTION TWO FIFTHS]
ENTITY_frac34 = "\\U000BE" # fraction three-quarters, [VULGAR FRACTION THREE QUARTERS]
ENTITY_frac35 = "\\U02157" # fraction three-fifths, [VULGAR FRACTION THREE FIFTHS]
ENTITY_frac38 = "\\U0215C" # fraction three-eighths, [VULGAR FRACTION THREE EIGHTHS]
ENTITY_frac45 = "\\U02158" # fraction four-fifths, [VULGAR FRACTION FOUR FIFTHS]
ENTITY_frac56 = "\\U0215A" # fraction five-sixths, [VULGAR FRACTION FIVE SIXTHS]
ENTITY_frac58 = "\\U0215D" # fraction five-eighths, [VULGAR FRACTION FIVE EIGHTHS]
ENTITY_frac78 = "\\U0215E" # fraction seven-eighths, [VULGAR FRACTION SEVEN EIGHTHS]
ENTITY_frown = "\\U02322" # /frown R: down curve, [FROWN]
ENTITY_fscr = "\\U1D4BB" # /scr f, script letter f, [MATHEMATICAL SCRIPT SMALL F]
ENTITY_gE = "\\U02267" # /geqq R: greater, double equals, [GREATER-THAN OVER EQUAL TO]
ENTITY_gEl = "\\U02A8C" # /gtreqqless R: gt, dbl equals, less, [GREATER-THAN ABOVE DOUBLE-LINE EQUAL ABOVE LESS-THAN]
ENTITY_gacute = "\\U001F5" # small g, acute accent, [LATIN SMALL LETTER G WITH ACUTE]
ENTITY_gamma = "\\U003B3" # /gamma small gamma, Greek, [GREEK SMALL LETTER GAMMA]
ENTITY_gammad = "\\U003DD" # /digamma, [GREEK SMALL LETTER DIGAMMA]
ENTITY_gap = "\\U02A86" # /gtrapprox R: greater, approximate, [GREATER-THAN OR APPROXIMATE]
ENTITY_gbreve = "\\U0011F" # small g, breve, [LATIN SMALL LETTER G WITH BREVE]
ENTITY_gcirc = "\\U0011D" # small g, circumflex accent, [LATIN SMALL LETTER G WITH CIRCUMFLEX]
ENTITY_gcy = "\\U00433" # small ghe, Cyrillic, [CYRILLIC SMALL LETTER GHE]
ENTITY_gdot = "\\U00121" # small g, dot above, [LATIN SMALL LETTER G WITH DOT ABOVE]
ENTITY_ge = "\\U02265" # /geq /ge R: greater-than-or-equal, [GREATER-THAN OR EQUAL TO]
ENTITY_gel = "\\U022DB" # /gtreqless R: greater, equals, less, [GREATER-THAN EQUAL TO OR LESS-THAN]
ENTITY_geq = "\\U02265" # alias ISOTECH ge, [GREATER-THAN OR EQUAL TO]
ENTITY_geqq = "\\U02267" # alias ISOAMSR gE, [GREATER-THAN OVER EQUAL TO]
ENTITY_geqslant = "\\U02A7E" # alias ISOAMSR ges, [GREATER-THAN OR SLANTED EQUAL TO]
ENTITY_ges = "\\U02A7E" # /geqslant R: gt-or-equal, slanted, [GREATER-THAN OR SLANTED EQUAL TO]
ENTITY_gescc = "\\U02AA9" # greater than, closed by curve, equal, slanted, [GREATER-THAN CLOSED BY CURVE ABOVE SLANTED EQUAL]
ENTITY_gesdot = "\\U02A80" # greater-than-or-equal, slanted, dot inside, [GREATER-THAN OR SLANTED EQUAL TO WITH DOT INSIDE]
ENTITY_gesdoto = "\\U02A82" # greater-than-or-equal, slanted, dot above, [GREATER-THAN OR SLANTED EQUAL TO WITH DOT ABOVE]
ENTITY_gesdotol = "\\U02A84" # greater-than-or-equal, slanted, dot above left, [GREATER-THAN OR SLANTED EQUAL TO WITH DOT ABOVE LEFT]
ENTITY_gesl = "\\U022DB" # 0FE00, greater, equal, slanted, less, [GREATER-THAN slanted EQUAL TO OR LESS-THAN]
ENTITY_gesles = "\\U02A94" # greater, equal, slanted, less, equal, slanted, [GREATER-THAN ABOVE SLANTED EQUAL ABOVE LESS-THAN ABOVE SLANTED EQUAL]
ENTITY_gfr = "\\U1D524" # /frak g, lower case g, [MATHEMATICAL FRAKTUR SMALL G]
ENTITY_gg = "\\U0226B" # alias ISOAMSR Gt, [MUCH GREATER-THAN]
ENTITY_ggg = "\\U022D9" # alias ISOAMSR Gg, [VERY MUCH GREATER-THAN]
ENTITY_gimel = "\\U02137" # /gimel - gimel, Hebrew, [GIMEL SYMBOL]
ENTITY_gjcy = "\\U00453" # small gje, Macedonian, [CYRILLIC SMALL LETTER GJE]
ENTITY_gl = "\\U02277" # /gtrless R: greater, less, [GREATER-THAN OR LESS-THAN]
ENTITY_glE = "\\U02A92" # greater, less, equal, [GREATER-THAN ABOVE LESS-THAN ABOVE DOUBLE-LINE EQUAL]
ENTITY_gla = "\\U02AA5" # greater, less, apart, [GREATER-THAN BESIDE LESS-THAN]
ENTITY_glj = "\\U02AA4" # greater, less, overlapping, [GREATER-THAN OVERLAPPING LESS-THAN]
ENTITY_gnE = "\\U02269" # /gneqq N: greater, not dbl equals, [GREATER-THAN BUT NOT EQUAL TO]
ENTITY_gnap = "\\U02A8A" # /gnapprox N: greater, not approximate, [GREATER-THAN AND NOT APPROXIMATE]
ENTITY_gnapprox = "\\U02A8A" # alias ISOAMSN gnap, [GREATER-THAN AND NOT APPROXIMATE]
ENTITY_gne = "\\U02A88" # /gneq N: greater, not equals, [GREATER-THAN AND SINGLE-LINE NOT EQUAL TO]
ENTITY_gneq = "\\U02A88" # alias ISOAMSN gne, [GREATER-THAN AND SINGLE-LINE NOT EQUAL TO]
ENTITY_gneqq = "\\U02269" # alias ISOAMSN gnE, [GREATER-THAN BUT NOT EQUAL TO]
ENTITY_gnsim = "\\U022E7" # /gnsim N: greater, not similar, [GREATER-THAN BUT NOT EQUIVALENT TO]
ENTITY_gopf = "\\U1D558" # , [MATHEMATICAL DOUBLE-STRUCK SMALL G]
ENTITY_grave = "\\U00060" # grave accent, [GRAVE ACCENT]
ENTITY_gscr = "\\U0210A" # /scr g, script letter g, [SCRIPT SMALL G]
ENTITY_gsim = "\\U02273" # /gtrsim R: greater, similar, [GREATER-THAN OR EQUIVALENT TO]
ENTITY_gsime = "\\U02A8E" # greater, similar, equal, [GREATER-THAN ABOVE SIMILAR OR EQUAL]
ENTITY_gsiml = "\\U02A90" # greater, similar, less, [GREATER-THAN ABOVE SIMILAR ABOVE LESS-THAN]
ENTITY_gt = "\\U0003E" # greater-than sign R:, [GREATER-THAN SIGN]
ENTITY_gtcc = "\\U02AA7" # greater than, closed by curve, [GREATER-THAN CLOSED BY CURVE]
ENTITY_gtcir = "\\U02A7A" # greater than, circle inside, [GREATER-THAN WITH CIRCLE INSIDE]
ENTITY_gtdot = "\\U022D7" # /gtrdot R: greater than, with dot, [GREATER-THAN WITH DOT]
ENTITY_gtlPar = "\\U02995" # dbl left parenthesis, greater, [DOUBLE LEFT ARC GREATER-THAN BRACKET]
ENTITY_gtquest = "\\U02A7C" # greater than, questionmark above, [GREATER-THAN WITH QUESTION MARK ABOVE]
ENTITY_gtrapprox = "\\U02A86" # alias ISOAMSR gap, [GREATER-THAN OR APPROXIMATE]
ENTITY_gtrarr = "\\U02978" # greater than, right arrow, [GREATER-THAN ABOVE RIGHTWARDS ARROW]
ENTITY_gtrdot = "\\U022D7" # alias ISOAMSR gtdot, [GREATER-THAN WITH DOT]
ENTITY_gtreqless = "\\U022DB" # alias ISOAMSR gel, [GREATER-THAN EQUAL TO OR LESS-THAN]
ENTITY_gtreqqless = "\\U02A8C" # alias ISOAMSR gEl, [GREATER-THAN ABOVE DOUBLE-LINE EQUAL ABOVE LESS-THAN]
ENTITY_gtrless = "\\U02277" # alias ISOAMSR gl, [GREATER-THAN OR LESS-THAN]
ENTITY_gtrsim = "\\U02273" # alias ISOAMSR gsim, [GREATER-THAN OR EQUIVALENT TO]
ENTITY_gvertneqq = "\\U02269" # 0FE00, alias ISOAMSN gvnE, [GREATER-THAN BUT NOT EQUAL TO - with vertical stroke]
ENTITY_gvnE = "\\U02269" # 0FE00, /gvertneqq N: gt, vert, not dbl eq, [GREATER-THAN BUT NOT EQUAL TO - with vertical stroke]
ENTITY_hArr = "\\U021D4" # /Leftrightarrow A: l&amp;r dbl arrow, [LEFT RIGHT DOUBLE ARROW]
ENTITY_hairsp = " " #"\\U0200A" # hair space, [HAIR SPACE]
ENTITY_half = "\\U000BD" # fraction one-half, [VULGAR FRACTION ONE HALF]
ENTITY_hamilt = "\\U0210B" # Hamiltonian (script capital H), [SCRIPT CAPITAL H]
ENTITY_hardcy = "\\U0044A" # small hard sign, Cyrillic, [CYRILLIC SMALL LETTER HARD SIGN]
ENTITY_harr = "\\U02194" # /leftrightarrow A: l&amp;r arrow, [LEFT RIGHT ARROW]
ENTITY_harrcir = "\\U02948" # left and right arrow with a circle, [LEFT RIGHT ARROW THROUGH SMALL CIRCLE]
ENTITY_harrw = "\\U021AD" # /leftrightsquigarrow A: l&amp;r arr-wavy, [LEFT RIGHT WAVE ARROW]
ENTITY_hbar = "\\U0210F" # alias ISOAMSO plank, [PLANCK CONSTANT OVER TWO PI]
ENTITY_hcirc = "\\U00125" # small h, circumflex accent, [LATIN SMALL LETTER H WITH CIRCUMFLEX]
ENTITY_hearts = "\\U02665" # /heartsuit =heart suit symbol, [BLACK HEART SUIT]
ENTITY_heartsuit = "\\U02665" # ISOPUB hearts, [BLACK HEART SUIT]
ENTITY_hellip = "\\U02026" # ellipsis (horizontal), [HORIZONTAL ELLIPSIS]
ENTITY_hercon = "\\U022B9" # hermitian conjugate matrix, [HERMITIAN CONJUGATE MATRIX]
ENTITY_hfr = "\\U1D525" # /frak h, lower case h, [MATHEMATICAL FRAKTUR SMALL H]
ENTITY_hksearow = "\\U02925" # alias ISOAMSA searhk, [SOUTH EAST ARROW WITH HOOK]
ENTITY_hkswarow = "\\U02926" # alias ISOAMSA swarhk, [SOUTH WEST ARROW WITH HOOK]
ENTITY_hoarr = "\\U021FF" # horizontal open arrow, [LEFT RIGHT OPEN-HEADED ARROW]
ENTITY_homtht = "\\U0223B" # homothetic, [HOMOTHETIC]
ENTITY_hookleftarrow = "\\U021A9" # alias ISOAMSA larrhk, [LEFTWARDS ARROW WITH HOOK]
ENTITY_hookrightarrow = "\\U021AA" # alias ISOAMSA rarrhk, [RIGHTWARDS ARROW WITH HOOK]
ENTITY_hopf = "\\U1D559" # , [MATHEMATICAL DOUBLE-STRUCK SMALL H]
ENTITY_horbar = "\\U02015" # horizontal bar, [HORIZONTAL BAR]
ENTITY_hscr = "\\U1D4BD" # /scr h, script letter h, [MATHEMATICAL SCRIPT SMALL H]
ENTITY_hslash = "\\U0210F" # alias ISOAMSO plankv, [PLANCK CONSTANT OVER TWO PI]
ENTITY_hstrok = "\\U00127" # small h, stroke, [LATIN SMALL LETTER H WITH STROKE]
ENTITY_hybull = "\\U02043" # rectangle, filled (hyphen bullet), [HYPHEN BULLET]
ENTITY_hyphen = "\\U02010" # hyphen, [HYPHEN]
ENTITY_iacute = "\\U000ED" # small i, acute accent, [LATIN SMALL LETTER I WITH ACUTE]
ENTITY_ic = "" # "\\U02063" # short form of &amp;InvisibleComma;, [INVISIBLE SEPARATOR]
ENTITY_icirc = "\\U000EE" # small i, circumflex accent, [LATIN SMALL LETTER I WITH CIRCUMFLEX]
ENTITY_icy = "\\U00438" # small i, Cyrillic, [CYRILLIC SMALL LETTER I]
ENTITY_iecy = "\\U00435" # small ie, Cyrillic, [CYRILLIC SMALL LETTER IE]
ENTITY_iexcl = "\\U000A1" # inverted exclamation mark, [INVERTED EXCLAMATION MARK]
ENTITY_iff = "\\U021D4" # /iff if and only if, [LEFT RIGHT DOUBLE ARROW]
ENTITY_ifr = "\\U1D526" # /frak i, lower case i, [MATHEMATICAL FRAKTUR SMALL I]
ENTITY_igrave = "\\U000EC" # small i, grave accent, [LATIN SMALL LETTER I WITH GRAVE]
ENTITY_ii = "\\U02148" # i for use as a square root of -1, [DOUBLE-STRUCK ITALIC SMALL I]
ENTITY_iiiint = "\\U02A0C" # alias ISOTECH qint, [QUADRUPLE INTEGRAL OPERATOR]
ENTITY_iiint = "\\U0222D" # alias ISOTECH tint, [TRIPLE INTEGRAL]
ENTITY_iinfin = "\\U029DC" # infinity sign, incomplete, [INCOMPLETE INFINITY]
ENTITY_iiota = "\\U02129" # inverted iota, [TURNED GREEK SMALL LETTER IOTA]
ENTITY_ijlig = "ij" # "\\U00133" # small ij ligature, [LATIN SMALL LIGATURE IJ]
ENTITY_imacr = "\\U0012B" # small i, macron, [LATIN SMALL LETTER I WITH MACRON]
ENTITY_image = "\\U02111" # /Im - imaginary, [BLACK-LETTER CAPITAL I]
ENTITY_imagline = "\\U02110" # the geometric imaginary line, [SCRIPT CAPITAL I]
ENTITY_imagpart = "\\U02111" # alias ISOAMSO image, [BLACK-LETTER CAPITAL I]
ENTITY_imath = "\\U00131" # /imath - small i, no dot, [LATIN SMALL LETTER DOTLESS I]
ENTITY_imof = "\\U022B7" # image of, [IMAGE OF]
ENTITY_imped = "\\U001B5" # impedance, [LATIN CAPITAL LETTER Z WITH STROKE]
ENTITY_in = "\\U02208" # ISOTECH isin, [ELEMENT OF]
ENTITY_incare = "\\U02105" # in-care-of symbol, [CARE OF]
ENTITY_infin = "\\U0221E" # /infty infinity, [INFINITY]
ENTITY_infintie = "\\U029DD" # tie, infinity, [TIE OVER INFINITY]
ENTITY_inodot = "\\U00131" # small i without dot, [LATIN SMALL LETTER DOTLESS I]
ENTITY_int = "\\U0222B" # /int L: integral operator, [INTEGRAL]
ENTITY_intcal = "\\U022BA" # /intercal B: intercal, [INTERCALATE]
ENTITY_integers = "\\U02124" # the ring of integers, [DOUBLE-STRUCK CAPITAL Z]
ENTITY_intercal = "\\U022BA" # alias ISOAMSB intcal, [INTERCALATE]
ENTITY_intlarhk = "\\U02A17" # integral, left arrow with hook, [INTEGRAL WITH LEFTWARDS ARROW WITH HOOK]
ENTITY_intprod = "\\U02A3C" # alias ISOAMSB iprod, [INTERIOR PRODUCT]
ENTITY_iocy = "\\U00451" # small io, Russian, [CYRILLIC SMALL LETTER IO]
ENTITY_iogon = "\\U0012F" # small i, ogonek, [LATIN SMALL LETTER I WITH OGONEK]
ENTITY_iopf = "\\U1D55A" # , [MATHEMATICAL DOUBLE-STRUCK SMALL I]
ENTITY_iota = "\\U003B9" # /iota small iota, Greek, [GREEK SMALL LETTER IOTA]
ENTITY_iprod = "\\U02A3C" # /intprod, [INTERIOR PRODUCT]
ENTITY_iquest = "\\U000BF" # inverted question mark, [INVERTED QUESTION MARK]
ENTITY_iscr = "\\U1D4BE" # /scr i, script letter i, [MATHEMATICAL SCRIPT SMALL I]
ENTITY_isin = "\\U02208" # /in R: set membership, [ELEMENT OF]
ENTITY_isinE = "\\U022F9" # set membership, two horizontal strokes, [ELEMENT OF WITH TWO HORIZONTAL STROKES]
ENTITY_isindot = "\\U022F5" # set membership, dot above, [ELEMENT OF WITH DOT ABOVE]
ENTITY_isins = "\\U022F4" # set membership, vertical bar on horizontal stroke, [SMALL ELEMENT OF WITH VERTICAL BAR AT END OF HORIZONTAL STROKE]
ENTITY_isinsv = "\\U022F3" # large set membership, vertical bar on horizontal stroke, [ELEMENT OF WITH VERTICAL BAR AT END OF HORIZONTAL STROKE]
ENTITY_isinv = "\\U02208" # set membership, variant, [ELEMENT OF]
ENTITY_it = "" # "\\U02062" # marks multiplication when it is understood without a mark, [INVISIBLE TIMES]
ENTITY_itilde = "\\U00129" # small i, tilde, [LATIN SMALL LETTER I WITH TILDE]
ENTITY_iukcy = "\\U00456" # small i, Ukrainian, [CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I]
ENTITY_iuml = "\\U000EF" # small i, dieresis or umlaut mark, [LATIN SMALL LETTER I WITH DIAERESIS]
ENTITY_jcirc = "\\U00135" # small j, circumflex accent, [LATIN SMALL LETTER J WITH CIRCUMFLEX]
ENTITY_jcy = "\\U00439" # small short i, Cyrillic, [CYRILLIC SMALL LETTER SHORT I]
ENTITY_jfr = "\\U1D527" # /frak j, lower case j, [MATHEMATICAL FRAKTUR SMALL J]
ENTITY_jmath = "\\U0006A" # /jmath - small j, no dot, [LATIN SMALL LETTER J]
ENTITY_jopf = "\\U1D55B" # , [MATHEMATICAL DOUBLE-STRUCK SMALL J]
ENTITY_jscr = "\\U1D4BF" # /scr j, script letter j, [MATHEMATICAL SCRIPT SMALL J]
ENTITY_jsercy = "\\U00458" # small je, Serbian, [CYRILLIC SMALL LETTER JE]
ENTITY_jukcy = "\\U00454" # small je, Ukrainian, [CYRILLIC SMALL LETTER UKRAINIAN IE]
ENTITY_kappa = "\\U003BA" # /kappa small kappa, Greek, [GREEK SMALL LETTER KAPPA]
ENTITY_kappav = "\\U003F0" # /varkappa, [GREEK KAPPA SYMBOL]
ENTITY_kcedil = "\\U00137" # small k, cedilla, [LATIN SMALL LETTER K WITH CEDILLA]
ENTITY_kcy = "\\U0043A" # small ka, Cyrillic, [CYRILLIC SMALL LETTER KA]
ENTITY_kfr = "\\U1D528" # /frak k, lower case k, [MATHEMATICAL FRAKTUR SMALL K]
ENTITY_kgreen = "\\U00138" # small k, Greenlandic, [LATIN SMALL LETTER KRA]
ENTITY_khcy = "\\U00445" # small ha, Cyrillic, [CYRILLIC SMALL LETTER HA]
ENTITY_kjcy = "\\U0045C" # small kje Macedonian, [CYRILLIC SMALL LETTER KJE]
ENTITY_kopf = "\\U1D55C" # , [MATHEMATICAL DOUBLE-STRUCK SMALL K]
ENTITY_kscr = "\\U1D4C0" # /scr k, script letter k, [MATHEMATICAL SCRIPT SMALL K]
ENTITY_lAarr = "\\U021DA" # /Lleftarrow A: left triple arrow, [LEFTWARDS TRIPLE ARROW]
ENTITY_lArr = "\\U021D0" # /Leftarrow A: is implied by, [LEFTWARDS DOUBLE ARROW]
ENTITY_lAtail = "\\U0291B" # left double arrow-tail, [LEFTWARDS DOUBLE ARROW-TAIL]
ENTITY_lBarr = "\\U0290E" # left doubly broken arrow, [LEFTWARDS TRIPLE DASH ARROW]
ENTITY_lE = "\\U02266" # /leqq R: less, double equals, [LESS-THAN OVER EQUAL TO]
ENTITY_lEg = "\\U02A8B" # /lesseqqgtr R: less, dbl eq, greater, [LESS-THAN ABOVE DOUBLE-LINE EQUAL ABOVE GREATER-THAN]
ENTITY_lHar = "\\U02962" # left harpoon-up over left harpoon-down, [LEFTWARDS HARPOON WITH BARB UP ABOVE LEFTWARDS HARPOON WITH BARB DOWN]
ENTITY_lacute = "\\U0013A" # small l, acute accent, [LATIN SMALL LETTER L WITH ACUTE]
ENTITY_laemptyv = "\\U029B4" # circle, slash, left arrow above, [EMPTY SET WITH LEFT ARROW ABOVE]
ENTITY_lagran = "\\U02112" # Lagrangian (script capital L), [SCRIPT CAPITAL L]
ENTITY_lambda = "\\U003BB" # /lambda small lambda, Greek, [GREEK SMALL LETTER LAMDA]
ENTITY_lang = "\\U02329" # /langle O: left angle bracket, [LEFT-POINTING ANGLE BRACKET]
ENTITY_langd = "\\U02991" # left angle, dot, [LEFT ANGLE BRACKET WITH DOT]
ENTITY_langle = "\\U02329" # alias ISOTECH lang, [LEFT-POINTING ANGLE BRACKET]
ENTITY_lap = "\\U02A85" # /lessapprox R: less, approximate, [LESS-THAN OR APPROXIMATE]
ENTITY_laquo = "\\U000AB" # angle quotation mark, left, [LEFT-POINTING DOUBLE ANGLE QUOTATION MARK]
ENTITY_larr = "\\U02190" # /leftarrow /gets A: =leftward arrow, [LEFTWARDS ARROW]
ENTITY_larrb = "\\U021E4" # leftwards arrow to bar, [LEFTWARDS ARROW TO BAR]
ENTITY_larrbfs = "\\U0291F" # left arrow-bar, filled square, [LEFTWARDS ARROW FROM BAR TO BLACK DIAMOND]
ENTITY_larrfs = "\\U0291D" # left arrow, filled square, [LEFTWARDS ARROW TO BLACK DIAMOND]
ENTITY_larrhk = "\\U021A9" # /hookleftarrow A: left arrow-hooked, [LEFTWARDS ARROW WITH HOOK]
ENTITY_larrlp = "\\U021AB" # /looparrowleft A: left arrow-looped, [LEFTWARDS ARROW WITH LOOP]
ENTITY_larrpl = "\\U02939" # left arrow, plus, [LEFT-SIDE ARC ANTICLOCKWISE ARROW]
ENTITY_larrsim = "\\U02973" # left arrow, similar, [LEFTWARDS ARROW ABOVE TILDE OPERATOR]
ENTITY_larrtl = "\\U021A2" # /leftarrowtail A: left arrow-tailed, [LEFTWARDS ARROW WITH TAIL]
ENTITY_lat = "\\U02AAB" # larger than, [LARGER THAN]
ENTITY_latail = "\\U02919" # left arrow-tail, [LEFTWARDS ARROW-TAIL]
ENTITY_late = "\\U02AAD" # larger than or equal, [LARGER THAN OR EQUAL TO]
ENTITY_lates = "\\U02AAD" # 0FE00, larger than or equal, slanted, [LARGER THAN OR slanted EQUAL]
ENTITY_lbarr = "\\U0290C" # left broken arrow, [LEFTWARDS DOUBLE DASH ARROW]
ENTITY_lbbrk = "\\U03014" # left broken bracket, [LEFT TORTOISE SHELL BRACKET]
ENTITY_lbrace = "\\U0007B" # alias ISONUM lcub, [LEFT CURLY BRACKET]
ENTITY_lbrack = "\\U0005B" # alias ISONUM lsqb, [LEFT SQUARE BRACKET]
ENTITY_lbrke = "\\U0298B" # left bracket, equal, [LEFT SQUARE BRACKET WITH UNDERBAR]
ENTITY_lbrksld = "\\U0298F" # left bracket, solidus bottom corner, [LEFT SQUARE BRACKET WITH TICK IN BOTTOM CORNER]
ENTITY_lbrkslu = "\\U0298D" # left bracket, solidus top corner, [LEFT SQUARE BRACKET WITH TICK IN TOP CORNER]
ENTITY_lcaron = "\\U0013E" # small l, caron, [LATIN SMALL LETTER L WITH CARON]
ENTITY_lcedil = "\\U0013C" # small l, cedilla, [LATIN SMALL LETTER L WITH CEDILLA]
ENTITY_lceil = "\\U02308" # /lceil O: left ceiling, [LEFT CEILING]
ENTITY_lcub = "\\U0007B" # /lbrace O: =left curly bracket, [LEFT CURLY BRACKET]
ENTITY_lcy = "\\U0043B" # small el, Cyrillic, [CYRILLIC SMALL LETTER EL]
ENTITY_ldca = "\\U02936" # left down curved arrow, [ARROW POINTING DOWNWARDS THEN CURVING LEFTWARDS]
ENTITY_ldquo = "\\U0201C" # double quotation mark, left, [LEFT DOUBLE QUOTATION MARK]
ENTITY_ldquor = "\\U0201E" # rising dbl quote, left (low), [DOUBLE LOW-9 QUOTATION MARK]
ENTITY_ldrdhar = "\\U02967" # left harpoon-down over right harpoon-down, [LEFTWARDS HARPOON WITH BARB DOWN ABOVE RIGHTWARDS HARPOON WITH BARB DOWN]
ENTITY_ldrushar = "\\U0294B" # left-down-right-up harpoon, [LEFT BARB DOWN RIGHT BARB UP HARPOON]
ENTITY_ldsh = "\\U021B2" # left down angled arrow, [DOWNWARDS ARROW WITH TIP LEFTWARDS]
ENTITY_le = "\\U02264" # /leq /le R: less-than-or-equal, [LESS-THAN OR EQUAL TO]
ENTITY_leftarrow = "\\U02190" # alias ISONUM larr, [LEFTWARDS ARROW]
ENTITY_leftarrowtail = "\\U021A2" # alias ISOAMSA larrtl, [LEFTWARDS ARROW WITH TAIL]
ENTITY_leftharpoondown = "\\U021BD" # alias ISOAMSA lhard, [LEFTWARDS HARPOON WITH BARB DOWNWARDS]
ENTITY_leftharpoonup = "\\U021BC" # alias ISOAMSA lharu, [LEFTWARDS HARPOON WITH BARB UPWARDS]
ENTITY_leftleftarrows = "\\U021C7" # alias ISOAMSA llarr, [LEFTWARDS PAIRED ARROWS]
ENTITY_leftrightarrow = "\\U02194" # alias ISOAMSA harr, [LEFT RIGHT ARROW]
ENTITY_leftrightarrows = "\\U021C6" # alias ISOAMSA lrarr, [LEFTWARDS ARROW OVER RIGHTWARDS ARROW]
ENTITY_leftrightharpoons = "\\U021CB" # alias ISOAMSA lrhar, [LEFTWARDS HARPOON OVER RIGHTWARDS HARPOON]
ENTITY_leftrightsquigarrow = "\\U021AD" # alias ISOAMSA harrw, [LEFT RIGHT WAVE ARROW]
ENTITY_leftthreetimes = "\\U022CB" # alias ISOAMSB lthree, [LEFT SEMIDIRECT PRODUCT]
ENTITY_leg = "\\U022DA" # /lesseqgtr R: less, eq, greater, [LESS-THAN EQUAL TO OR GREATER-THAN]
ENTITY_leq = "\\U02264" # alias ISOTECH le, [LESS-THAN OR EQUAL TO]
ENTITY_leqq = "\\U02266" # alias ISOAMSR lE, [LESS-THAN OVER EQUAL TO]
ENTITY_leqslant = "\\U02A7D" # alias ISOAMSR les, [LESS-THAN OR SLANTED EQUAL TO]
ENTITY_les = "\\U02A7D" # /leqslant R: less-than-or-eq, slant, [LESS-THAN OR SLANTED EQUAL TO]
ENTITY_lescc = "\\U02AA8" # less than, closed by curve, equal, slanted, [LESS-THAN CLOSED BY CURVE ABOVE SLANTED EQUAL]
ENTITY_lesdot = "\\U02A7F" # less-than-or-equal, slanted, dot inside, [LESS-THAN OR SLANTED EQUAL TO WITH DOT INSIDE]
ENTITY_lesdoto = "\\U02A81" # less-than-or-equal, slanted, dot above, [LESS-THAN OR SLANTED EQUAL TO WITH DOT ABOVE]
ENTITY_lesdotor = "\\U02A83" # less-than-or-equal, slanted, dot above right, [LESS-THAN OR SLANTED EQUAL TO WITH DOT ABOVE RIGHT]
ENTITY_lesg = "\\U022DA" # 0FE00, less, equal, slanted, greater, [LESS-THAN slanted EQUAL TO OR GREATER-THAN]
ENTITY_lesges = "\\U02A93" # less, equal, slanted, greater, equal, slanted, [LESS-THAN ABOVE SLANTED EQUAL ABOVE GREATER-THAN ABOVE SLANTED EQUAL]
ENTITY_lessapprox = "\\U02A85" # alias ISOAMSR lap, [LESS-THAN OR APPROXIMATE]
ENTITY_lessdot = "\\U022D6" # alias ISOAMSR ltdot, [LESS-THAN WITH DOT]
ENTITY_lesseqgtr = "\\U022DA" # alias ISOAMSR leg, [LESS-THAN EQUAL TO OR GREATER-THAN]
ENTITY_lesseqqgtr = "\\U02A8B" # alias ISOAMSR lEg, [LESS-THAN ABOVE DOUBLE-LINE EQUAL ABOVE GREATER-THAN]
ENTITY_lessgtr = "\\U02276" # alias ISOAMSR lg, [LESS-THAN OR GREATER-THAN]
ENTITY_lesssim = "\\U02272" # alias ISOAMSR lsim, [LESS-THAN OR EQUIVALENT TO]
ENTITY_lfisht = "\\U0297C" # left fish tail, [LEFT FISH TAIL]
ENTITY_lfloor = "\\U0230A" # /lfloor O: left floor, [LEFT FLOOR]
ENTITY_lfr = "\\U1D529" # /frak l, lower case l, [MATHEMATICAL FRAKTUR SMALL L]
ENTITY_lg = "\\U02276" # /lessgtr R: less, greater, [LESS-THAN OR GREATER-THAN]
ENTITY_lgE = "\\U02A91" # less, greater, equal, [LESS-THAN ABOVE GREATER-THAN ABOVE DOUBLE-LINE EQUAL]
ENTITY_lhard = "\\U021BD" # /leftharpoondown A: l harpoon-down, [LEFTWARDS HARPOON WITH BARB DOWNWARDS]
ENTITY_lharu = "\\U021BC" # /leftharpoonup A: left harpoon-up, [LEFTWARDS HARPOON WITH BARB UPWARDS]
ENTITY_lharul = "\\U0296A" # left harpoon-up over long dash, [LEFTWARDS HARPOON WITH BARB UP ABOVE LONG DASH]
ENTITY_lhblk = "\\U02584" # lower half block, [LOWER HALF BLOCK]
ENTITY_ljcy = "\\U00459" # small lje, Serbian, [CYRILLIC SMALL LETTER LJE]
ENTITY_ll = "\\U0226A" # alias ISOAMSR Lt, [MUCH LESS-THAN]
ENTITY_llarr = "\\U021C7" # /leftleftarrows A: two left arrows, [LEFTWARDS PAIRED ARROWS]
ENTITY_llcorner = "\\U0231E" # alias ISOAMSC dlcorn, [BOTTOM LEFT CORNER]
ENTITY_llhard = "\\U0296B" # left harpoon-down below long dash, [LEFTWARDS HARPOON WITH BARB DOWN BELOW LONG DASH]
ENTITY_lltri = "\\U025FA" # lower left triangle, [LOWER LEFT TRIANGLE]
ENTITY_lmidot = "\\U00140" # small l, middle dot, [LATIN SMALL LETTER L WITH MIDDLE DOT]
ENTITY_lmoust = "\\U023B0" # /lmoustache, [UPPER LEFT OR LOWER RIGHT CURLY BRACKET SECTION]
ENTITY_lmoustache = "\\U023B0" # alias ISOAMSC lmoust, [UPPER LEFT OR LOWER RIGHT CURLY BRACKET SECTION]
ENTITY_lnE = "\\U02268" # /lneqq N: less, not double equals, [LESS-THAN BUT NOT EQUAL TO]
ENTITY_lnap = "\\U02A89" # /lnapprox N: less, not approximate, [LESS-THAN AND NOT APPROXIMATE]
ENTITY_lnapprox = "\\U02A89" # alias ISOAMSN lnap, [LESS-THAN AND NOT APPROXIMATE]
ENTITY_lne = "\\U02A87" # /lneq N: less, not equals, [LESS-THAN AND SINGLE-LINE NOT EQUAL TO]
ENTITY_lneq = "\\U02A87" # alias ISOAMSN lne, [LESS-THAN AND SINGLE-LINE NOT EQUAL TO]
ENTITY_lneqq = "\\U02268" # alias ISOAMSN lnE, [LESS-THAN BUT NOT EQUAL TO]
ENTITY_lnsim = "\\U022E6" # /lnsim N: less, not similar, [LESS-THAN BUT NOT EQUIVALENT TO]
ENTITY_loang = "\\U03018" # left open angular bracket, [LEFT WHITE TORTOISE SHELL BRACKET]
ENTITY_loarr = "\\U021FD" # left open arrow, [LEFTWARDS OPEN-HEADED ARROW]
ENTITY_lobrk = "\\U0301A" # left open bracket, [LEFT WHITE SQUARE BRACKET]
ENTITY_longleftarrow = "\\U027F5" # alias ISOAMSA xlarr, [LONG LEFTWARDS ARROW]
ENTITY_longleftrightarrow = "\\U027F7" # alias ISOAMSA xharr, [LONG LEFT RIGHT ARROW]
ENTITY_longmapsto = "\\U027FC" # alias ISOAMSA xmap, [LONG RIGHTWARDS ARROW FROM BAR]
ENTITY_longrightarrow = "\\U027F6" # alias ISOAMSA xrarr, [LONG RIGHTWARDS ARROW]
ENTITY_looparrowleft = "\\U021AB" # alias ISOAMSA larrlp, [LEFTWARDS ARROW WITH LOOP]
ENTITY_looparrowright = "\\U021AC" # alias ISOAMSA rarrlp, [RIGHTWARDS ARROW WITH LOOP]
ENTITY_lopar = "\\U02985" # left open parenthesis, [LEFT WHITE PARENTHESIS]
ENTITY_lopf = "\\U1D55D" # , [MATHEMATICAL DOUBLE-STRUCK SMALL L]
ENTITY_loplus = "\\U02A2D" # plus sign in left half circle, [PLUS SIGN IN LEFT HALF CIRCLE]
ENTITY_lotimes = "\\U02A34" # multiply sign in left half circle, [MULTIPLICATION SIGN IN LEFT HALF CIRCLE]
ENTITY_lowast = "\\U02217" # low asterisk, [ASTERISK OPERATOR]
ENTITY_lowbar = "\\U0005F" # low line, [LOW LINE]
ENTITY_loz = "\\U025CA" # /lozenge - lozenge or total mark, [LOZENGE]
ENTITY_lozenge = "\\U025CA" # alias ISOPUB loz, [LOZENGE]
ENTITY_lozf = "\\U029EB" # /blacklozenge - lozenge, filled, [BLACK LOZENGE]
ENTITY_lpar = "\\U00028" # O: =left parenthesis, [LEFT PARENTHESIS]
ENTITY_lparlt = "\\U02993" # O: left parenthesis, lt, [LEFT ARC LESS-THAN BRACKET]
ENTITY_lrarr = "\\U021C6" # /leftrightarrows A: l arr over r arr, [LEFTWARDS ARROW OVER RIGHTWARDS ARROW]
ENTITY_lrcorner = "\\U0231F" # alias ISOAMSC drcorn, [BOTTOM RIGHT CORNER]
ENTITY_lrhar = "\\U021CB" # /leftrightharpoons A: l harp over r, [LEFTWARDS HARPOON OVER RIGHTWARDS HARPOON]
ENTITY_lrhard = "\\U0296D" # right harpoon-down below long dash, [RIGHTWARDS HARPOON WITH BARB DOWN BELOW LONG DASH]
ENTITY_lrtri = "\\U022BF" # lower right triangle, [RIGHT TRIANGLE]
ENTITY_lscr = "\\U1D4C1" # /scr l, script letter l, [MATHEMATICAL SCRIPT SMALL L]
ENTITY_lsh = "\\U021B0" # /Lsh A:, [UPWARDS ARROW WITH TIP LEFTWARDS]
ENTITY_lsim = "\\U02272" # /lesssim R: less, similar, [LESS-THAN OR EQUIVALENT TO]
ENTITY_lsime = "\\U02A8D" # less, similar, equal, [LESS-THAN ABOVE SIMILAR OR EQUAL]
ENTITY_lsimg = "\\U02A8F" # less, similar, greater, [LESS-THAN ABOVE SIMILAR ABOVE GREATER-THAN]
ENTITY_lsqb = "\\U0005B" # /lbrack O: =left square bracket, [LEFT SQUARE BRACKET]
ENTITY_lsquo = "\\U02018" # single quotation mark, left, [LEFT SINGLE QUOTATION MARK]
ENTITY_lsquor = "\\U0201A" # rising single quote, left (low), [SINGLE LOW-9 QUOTATION MARK]
ENTITY_lstrok = "\\U00142" # small l, stroke, [LATIN SMALL LETTER L WITH STROKE]
ENTITY_lt = "\\U0003C" # less-than sign R:, [LESS-THAN SIGN]
ENTITY_ltcc = "\\U02AA6" # less than, closed by curve, [LESS-THAN CLOSED BY CURVE]
ENTITY_ltcir = "\\U02A79" # less than, circle inside, [LESS-THAN WITH CIRCLE INSIDE]
ENTITY_ltdot = "\\U022D6" # /lessdot R: less than, with dot, [LESS-THAN WITH DOT]
ENTITY_lthree = "\\U022CB" # /leftthreetimes B:, [LEFT SEMIDIRECT PRODUCT]
ENTITY_ltimes = "\\U022C9" # /ltimes B: times sign, left closed, [LEFT NORMAL FACTOR SEMIDIRECT PRODUCT]
ENTITY_ltlarr = "\\U02976" # less than, left arrow, [LESS-THAN ABOVE LEFTWARDS ARROW]
ENTITY_ltquest = "\\U02A7B" # less than, questionmark above, [LESS-THAN WITH QUESTION MARK ABOVE]
ENTITY_ltrPar = "\\U02996" # dbl right parenthesis, less, [DOUBLE RIGHT ARC LESS-THAN BRACKET]
ENTITY_ltri = "\\U025C3" # /triangleleft B: l triangle, open, [WHITE LEFT-POINTING SMALL TRIANGLE]
ENTITY_ltrie = "\\U022B4" # /trianglelefteq R: left triangle, eq, [NORMAL SUBGROUP OF OR EQUAL TO]
ENTITY_ltrif = "\\U025C2" # /blacktriangleleft R: =l tri, filled, [BLACK LEFT-POINTING SMALL TRIANGLE]
ENTITY_lurdshar = "\\U0294A" # left-up-right-down harpoon, [LEFT BARB UP RIGHT BARB DOWN HARPOON]
ENTITY_luruhar = "\\U02966" # left harpoon-up over right harpoon-up, [LEFTWARDS HARPOON WITH BARB UP ABOVE RIGHTWARDS HARPOON WITH BARB UP]
ENTITY_lvertneqq = "\\U02268" # 0FE00, alias ISOAMSN lvnE, [LESS-THAN BUT NOT EQUAL TO - with vertical stroke]
ENTITY_lvnE = "\\U02268" # 0FE00, /lvertneqq N: less, vert, not dbl eq, [LESS-THAN BUT NOT EQUAL TO - with vertical stroke]
ENTITY_mDDot = "\\U0223A" # minus with four dots, geometric properties, [GEOMETRIC PROPORTION]
ENTITY_macr = "\\U000AF" # macron, [MACRON]
ENTITY_male = "\\U02642" # male symbol, [MALE SIGN]
ENTITY_malt = "\\U02720" # /maltese =maltese cross, [MALTESE CROSS]
ENTITY_maltese = "\\U02720" # alias ISOPUB malt, [MALTESE CROSS]
ENTITY_map = "\\U021A6" # /mapsto A:, [RIGHTWARDS ARROW FROM BAR]
ENTITY_mapsto = "\\U021A6" # alias ISOAMSA map, [RIGHTWARDS ARROW FROM BAR]
ENTITY_mapstodown = "\\U021A7" # downwards arrow from bar, [DOWNWARDS ARROW FROM BAR]
ENTITY_mapstoleft = "\\U021A4" # leftwards arrow from bar, [LEFTWARDS ARROW FROM BAR]
ENTITY_mapstoup = "\\U021A5" # upwards arrow from bar, [UPWARDS ARROW FROM BAR]
ENTITY_marker = "\\U025AE" # histogram marker, [BLACK VERTICAL RECTANGLE]
ENTITY_mcomma = "\\U02A29" # minus, comma above, [MINUS SIGN WITH COMMA ABOVE]
ENTITY_mcy = "\\U0043C" # small em, Cyrillic, [CYRILLIC SMALL LETTER EM]
ENTITY_mdash = "\\U02014" # em dash, [EM DASH]
ENTITY_measuredangle = "\\U02221" # alias ISOAMSO angmsd, [MEASURED ANGLE]
ENTITY_mfr = "\\U1D52A" # /frak m, lower case m, [MATHEMATICAL FRAKTUR SMALL M]
ENTITY_mho = "\\U02127" # /mho - conductance, [INVERTED OHM SIGN]
ENTITY_micro = "\\U000B5" # micro sign, [MICRO SIGN]
ENTITY_mid = "\\U02223" # /mid R:, [DIVIDES]
ENTITY_midast = "\\U0002A" # /ast B: asterisk, [ASTERISK]
ENTITY_midcir = "\\U02AF0" # mid, circle below, [VERTICAL LINE WITH CIRCLE BELOW]
ENTITY_middot = "\\U000B7" # /centerdot B: =middle dot, [MIDDLE DOT]
ENTITY_minus = "\\U02212" # B: minus sign, [MINUS SIGN]
ENTITY_minusb = "\\U0229F" # /boxminus B: minus sign in box, [SQUARED MINUS]
ENTITY_minusd = "\\U02238" # /dotminus B: minus sign, dot above, [DOT MINUS]
ENTITY_minusdu = "\\U02A2A" # minus sign, dot below, [MINUS SIGN WITH DOT BELOW]
ENTITY_mlcp = "\\U02ADB" # /mlcp, [TRANSVERSAL INTERSECTION]
ENTITY_mldr = "\\U02026" # em leader, [HORIZONTAL ELLIPSIS]
ENTITY_mnplus = "\\U02213" # /mp B: minus-or-plus sign, [MINUS-OR-PLUS SIGN]
ENTITY_models = "\\U022A7" # /models R:, [MODELS]
ENTITY_mopf = "\\U1D55E" # , [MATHEMATICAL DOUBLE-STRUCK SMALL M]
ENTITY_mp = "\\U02213" # alias ISOTECH mnplus, [MINUS-OR-PLUS SIGN]
ENTITY_mscr = "\\U1D4C2" # /scr m, script letter m, [MATHEMATICAL SCRIPT SMALL M]
ENTITY_mstpos = "\\U0223E" # most positive, [INVERTED LAZY S]
ENTITY_mu = "\\U003BC" # /mu small mu, Greek, [GREEK SMALL LETTER MU]
ENTITY_multimap = "\\U022B8" # alias ISOAMSA mumap, [MULTIMAP]
ENTITY_mumap = "\\U022B8" # /multimap A:, [MULTIMAP]
ENTITY_nGg = "\\U022D9" # 00338, not triple greater than, [VERY MUCH GREATER-THAN with slash]
ENTITY_nGt = "\\U0226B" # 020D2, not, vert, much greater than, [MUCH GREATER THAN with vertical line]
ENTITY_nGtv = "\\U0226B" # 00338, not much greater than, variant, [MUCH GREATER THAN with slash]
ENTITY_nLeftarrow = "\\U021CD" # alias ISOAMSA nlArr, [LEFTWARDS DOUBLE ARROW WITH STROKE]
ENTITY_nLeftrightarrow = "\\U021CE" # alias ISOAMSA nhArr, [LEFT RIGHT DOUBLE ARROW WITH STROKE]
ENTITY_nLl = "\\U022D8" # 00338, not triple less than, [VERY MUCH LESS-THAN with slash]
ENTITY_nLt = "\\U0226A" # 020D2, not, vert, much less than, [MUCH LESS THAN with vertical line]
ENTITY_nLtv = "\\U0226A" # 00338, not much less than, variant, [MUCH LESS THAN with slash]
ENTITY_nRightarrow = "\\U021CF" # alias ISOAMSA nrArr, [RIGHTWARDS DOUBLE ARROW WITH STROKE]
ENTITY_nVDash = "\\U022AF" # /nVDash N: not dbl vert, dbl dash, [NEGATED DOUBLE VERTICAL BAR DOUBLE RIGHT TURNSTILE]
ENTITY_nVdash = "\\U022AE" # /nVdash N: not dbl vertical, dash, [DOES NOT FORCE]
ENTITY_nabla = "\\U02207" # /nabla del, Hamilton operator, [NABLA]
ENTITY_nacute = "\\U00144" # small n, acute accent, [LATIN SMALL LETTER N WITH ACUTE]
ENTITY_nang = "\\U02220" # 020D2, not, vert, angle, [ANGLE with vertical line]
ENTITY_nap = "\\U02249" # /napprox N: not approximate, [NOT ALMOST EQUAL TO]
ENTITY_napE = "\\U02A70" # 00338, not approximately equal or equal to, [APPROXIMATELY EQUAL OR EQUAL TO with slash]
ENTITY_napid = "\\U0224B" # 00338, not approximately identical to, [TRIPLE TILDE with slash]
ENTITY_napos = "\\U00149" # small n, apostrophe, [LATIN SMALL LETTER N PRECEDED BY APOSTROPHE]
ENTITY_napprox = "\\U02249" # alias ISOAMSN nap, [NOT ALMOST EQUAL TO]
ENTITY_natur = "\\U0266E" # /natural - music natural, [MUSIC NATURAL SIGN]
ENTITY_natural = "\\U0266E" # alias ISOPUB natur, [MUSIC NATURAL SIGN]
ENTITY_naturals = "\\U02115" # the semi-ring of natural numbers, [DOUBLE-STRUCK CAPITAL N]
ENTITY_nbsp = " " # "\\U000A0" # no break (required) space, [NO-BREAK SPACE]
ENTITY_nbump = "\\U0224E" # 00338, not bumpy equals, [GEOMETRICALLY EQUIVALENT TO with slash]
ENTITY_nbumpe = "\\U0224F" # 00338, not bumpy single equals, [DIFFERENCE BETWEEN with slash]
ENTITY_ncap = "\\U02A43" # bar, intersection, [INTERSECTION WITH OVERBAR]
ENTITY_ncaron = "\\U00148" # small n, caron, [LATIN SMALL LETTER N WITH CARON]
ENTITY_ncedil = "\\U00146" # small n, cedilla, [LATIN SMALL LETTER N WITH CEDILLA]
ENTITY_ncong = "\\U02247" # /ncong N: not congruent with, [NEITHER APPROXIMATELY NOR ACTUALLY EQUAL TO]
ENTITY_ncongdot = "\\U02A6D" # 00338, not congruent, dot, [CONGRUENT WITH DOT ABOVE with slash]
ENTITY_ncup = "\\U02A42" # bar, union, [UNION WITH OVERBAR]
ENTITY_ncy = "\\U0043D" # small en, Cyrillic, [CYRILLIC SMALL LETTER EN]
ENTITY_ndash = "\\U02013" # en dash, [EN DASH]
ENTITY_ne = "\\U02260" # /ne /neq R: not equal, [NOT EQUAL TO]
ENTITY_neArr = "\\U021D7" # NE pointing dbl arrow, [NORTH EAST DOUBLE ARROW]
ENTITY_nearhk = "\\U02924" # NE arrow-hooked, [NORTH EAST ARROW WITH HOOK]
ENTITY_nearr = "\\U02197" # /nearrow A: NE pointing arrow, [NORTH EAST ARROW]
ENTITY_nearrow = "\\U02197" # alias ISOAMSA nearr, [NORTH EAST ARROW]
ENTITY_nedot = "\\U02250" # 00338, not equal, dot, [APPROACHES THE LIMIT with slash]
ENTITY_nequiv = "\\U02262" # /nequiv N: not identical with, [NOT IDENTICAL TO]
ENTITY_nesear = "\\U02928" # /toea A: NE &amp; SE arrows, [NORTH EAST ARROW AND SOUTH EAST ARROW]
ENTITY_nesim = "\\U02242" # 00338, not equal or similar, [MINUS TILDE with slash]
ENTITY_nexist = "\\U02204" # /nexists - negated exists, [THERE DOES NOT EXIST]
ENTITY_nexists = "\\U02204" # alias ISOAMSO nexist, [THERE DOES NOT EXIST]
ENTITY_nfr = "\\U1D52B" # /frak n, lower case n, [MATHEMATICAL FRAKTUR SMALL N]
ENTITY_ngE = "\\U02267" # 00338, /ngeqq N: not greater, dbl equals, [GREATER-THAN OVER EQUAL TO with slash]
ENTITY_nge = "\\U02271" # /ngeq N: not greater-than-or-equal, [NEITHER GREATER-THAN NOR EQUAL TO]
ENTITY_ngeq = "\\U02271" # alias ISOAMSN nge, [NEITHER GREATER-THAN NOR EQUAL TO]
ENTITY_ngeqq = "\\U02267" # 00338, alias ISOAMSN ngE, [GREATER-THAN OVER EQUAL TO with slash]
ENTITY_ngeqslant = "\\U02A7E" # 00338, alias ISOAMSN nges, [GREATER-THAN OR SLANTED EQUAL TO with slash]
ENTITY_nges = "\\U02A7E" # 00338, /ngeqslant N: not gt-or-eq, slanted, [GREATER-THAN OR SLANTED EQUAL TO with slash]
ENTITY_ngsim = "\\U02275" # not greater, similar, [NEITHER GREATER-THAN NOR EQUIVALENT TO]
ENTITY_ngt = "\\U0226F" # /ngtr N: not greater-than, [NOT GREATER-THAN]
ENTITY_ngtr = "\\U0226F" # alias ISOAMSN ngt, [NOT GREATER-THAN]
ENTITY_nhArr = "\\U021CE" # /nLeftrightarrow A: not l&amp;r dbl arr, [LEFT RIGHT DOUBLE ARROW WITH STROKE]
ENTITY_nharr = "\\U021AE" # /nleftrightarrow A: not l&amp;r arrow, [LEFT RIGHT ARROW WITH STROKE]
ENTITY_nhpar = "\\U02AF2" # not, horizontal, parallel, [PARALLEL WITH HORIZONTAL STROKE]
ENTITY_ni = "\\U0220B" # /ni /owns R: contains, [CONTAINS AS MEMBER]
ENTITY_nis = "\\U022FC" # contains, vertical bar on horizontal stroke, [SMALL CONTAINS WITH VERTICAL BAR AT END OF HORIZONTAL STROKE]
ENTITY_nisd = "\\U022FA" # contains, long horizontal stroke, [CONTAINS WITH LONG HORIZONTAL STROKE]
ENTITY_niv = "\\U0220B" # contains, variant, [CONTAINS AS MEMBER]
ENTITY_njcy = "\\U0045A" # small nje, Serbian, [CYRILLIC SMALL LETTER NJE]
ENTITY_nlArr = "\\U021CD" # /nLeftarrow A: not implied by, [LEFTWARDS DOUBLE ARROW WITH STROKE]
ENTITY_nlE = "\\U02266" # 00338, /nleqq N: not less, dbl equals, [LESS-THAN OVER EQUAL TO with slash]
ENTITY_nlarr = "\\U0219A" # /nleftarrow A: not left arrow, [LEFTWARDS ARROW WITH STROKE]
ENTITY_nldr = "\\U02025" # double baseline dot (en leader), [TWO DOT LEADER]
ENTITY_nle = "\\U02270" # /nleq N: not less-than-or-equal, [NEITHER LESS-THAN NOR EQUAL TO]
ENTITY_nleftarrow = "\\U0219A" # alias ISOAMSA nlarr, [LEFTWARDS ARROW WITH STROKE]
ENTITY_nleftrightarrow = "\\U021AE" # alias ISOAMSA nharr, [LEFT RIGHT ARROW WITH STROKE]
ENTITY_nleq = "\\U02270" # alias ISOAMSN nle, [NEITHER LESS-THAN NOR EQUAL TO]
ENTITY_nleqq = "\\U02266" # 00338, alias ISOAMSN nlE, [LESS-THAN OVER EQUAL TO with slash]
ENTITY_nleqslant = "\\U02A7D" # 00338, alias ISOAMSN nles, [LESS-THAN OR SLANTED EQUAL TO with slash]
ENTITY_nles = "\\U02A7D" # 00338, /nleqslant N: not less-or-eq, slant, [LESS-THAN OR SLANTED EQUAL TO with slash]
ENTITY_nless = "\\U0226E" # alias ISOAMSN nlt, [NOT LESS-THAN]
ENTITY_nlsim = "\\U02274" # not less, similar, [NEITHER LESS-THAN NOR EQUIVALENT TO]
ENTITY_nlt = "\\U0226E" # /nless N: not less-than, [NOT LESS-THAN]
ENTITY_nltri = "\\U022EA" # /ntriangleleft N: not left triangle, [NOT NORMAL SUBGROUP OF]
ENTITY_nltrie = "\\U022EC" # /ntrianglelefteq N: not l tri, eq, [NOT NORMAL SUBGROUP OF OR EQUAL TO]
ENTITY_nmid = "\\U02224" # /nmid, [DOES NOT DIVIDE]
ENTITY_nopf = "\\U1D55F" # , [MATHEMATICAL DOUBLE-STRUCK SMALL N]
ENTITY_not = "\\U000AC" # /neg /lnot =not sign, [NOT SIGN]
ENTITY_notin = "\\U02209" # /notin N: negated set membership, [NOT AN ELEMENT OF]
ENTITY_notinE = "\\U022F9" # 00338, negated set membership, two horizontal strokes, [ELEMENT OF WITH TWO HORIZONTAL STROKES with slash]
ENTITY_notindot = "\\U022F5" # 00338, negated set membership, dot above, [ELEMENT OF WITH DOT ABOVE with slash]
ENTITY_notinva = "\\U02209" # negated set membership, variant, [NOT AN ELEMENT OF]
ENTITY_notinvb = "\\U022F7" # negated set membership, variant, [SMALL ELEMENT OF WITH OVERBAR]
ENTITY_notinvc = "\\U022F6" # negated set membership, variant, [ELEMENT OF WITH OVERBAR]
ENTITY_notni = "\\U0220C" # negated contains, [DOES NOT CONTAIN AS MEMBER]
ENTITY_notniva = "\\U0220C" # negated contains, variant, [DOES NOT CONTAIN AS MEMBER]
ENTITY_notnivb = "\\U022FE" # contains, variant, [SMALL CONTAINS WITH OVERBAR]
ENTITY_notnivc = "\\U022FD" # contains, variant, [CONTAINS WITH OVERBAR]
ENTITY_npar = "\\U02226" # /nparallel N: not parallel, [NOT PARALLEL TO]
ENTITY_nparallel = "\\U02226" # alias ISOAMSN npar, [NOT PARALLEL TO]
ENTITY_nparsl = "\\U02AFD" # 020E5, not parallel, slanted, [DOUBLE SOLIDUS OPERATOR with reverse slash]
ENTITY_npart = "\\U02202" # 00338, not partial differential, [PARTIAL DIFFERENTIAL with slash]
ENTITY_npolint = "\\U02A14" # line integration, not including the pole, [LINE INTEGRATION NOT INCLUDING THE POLE]
ENTITY_npr = "\\U02280" # /nprec N: not precedes, [DOES NOT PRECEDE]
ENTITY_nprcue = "\\U022E0" # not curly precedes, eq, [DOES NOT PRECEDE OR EQUAL]
ENTITY_npre = "\\U02AAF" # 00338, /npreceq N: not precedes, equals, [PRECEDES ABOVE SINGLE-LINE EQUALS SIGN with slash]
ENTITY_nprec = "\\U02280" # alias ISOAMSN npr, [DOES NOT PRECEDE]
ENTITY_npreceq = "\\U02AAF" # 00338, alias ISOAMSN npre, [PRECEDES ABOVE SINGLE-LINE EQUALS SIGN with slash]
ENTITY_nrArr = "\\U021CF" # /nRightarrow A: not implies, [RIGHTWARDS DOUBLE ARROW WITH STROKE]
ENTITY_nrarr = "\\U0219B" # /nrightarrow A: not right arrow, [RIGHTWARDS ARROW WITH STROKE]
ENTITY_nrarrc = "\\U02933" # 00338, not right arrow-curved, [WAVE ARROW POINTING DIRECTLY RIGHT with slash]
ENTITY_nrarrw = "\\U0219D" # 00338, not right arrow-wavy, [RIGHTWARDS WAVE ARROW with slash]
ENTITY_nrightarrow = "\\U0219B" # alias ISOAMSA nrarr, [RIGHTWARDS ARROW WITH STROKE]
ENTITY_nrtri = "\\U022EB" # /ntriangleright N: not rt triangle, [DOES NOT CONTAIN AS NORMAL SUBGROUP]
ENTITY_nrtrie = "\\U022ED" # /ntrianglerighteq N: not r tri, eq, [DOES NOT CONTAIN AS NORMAL SUBGROUP OR EQUAL]
ENTITY_nsc = "\\U02281" # /nsucc N: not succeeds, [DOES NOT SUCCEED]
ENTITY_nsccue = "\\U022E1" # not succeeds, curly eq, [DOES NOT SUCCEED OR EQUAL]
ENTITY_nsce = "\\U02AB0" # 00338, /nsucceq N: not succeeds, equals, [SUCCEEDS ABOVE SINGLE-LINE EQUALS SIGN with slash]
ENTITY_nscr = "\\U1D4C3" # /scr n, script letter n, [MATHEMATICAL SCRIPT SMALL N]
ENTITY_nshortmid = "\\U02224" # alias ISOAMSN nsmid, [DOES NOT DIVIDE]
ENTITY_nshortparallel = "\\U02226" # alias ISOAMSN nspar, [NOT PARALLEL TO]
ENTITY_nsim = "\\U02241" # /nsim N: not similar, [NOT TILDE]
ENTITY_nsime = "\\U02244" # /nsimeq N: not similar, equals, [NOT ASYMPTOTICALLY EQUAL TO]
ENTITY_nsimeq = "\\U02244" # alias ISOAMSN nsime, [NOT ASYMPTOTICALLY EQUAL TO]
ENTITY_nsmid = "\\U02224" # /nshortmid, [DOES NOT DIVIDE]
ENTITY_nspar = "\\U02226" # /nshortparallel N: not short par, [NOT PARALLEL TO]
ENTITY_nsqsube = "\\U022E2" # not, square subset, equals, [NOT SQUARE IMAGE OF OR EQUAL TO]
ENTITY_nsqsupe = "\\U022E3" # not, square superset, equals, [NOT SQUARE ORIGINAL OF OR EQUAL TO]
ENTITY_nsub = "\\U02284" # not subset, [NOT A SUBSET OF]
ENTITY_nsubE = "\\U02AC5" # 00338, /nsubseteqq N: not subset, dbl eq, [SUBSET OF ABOVE EQUALS SIGN with slash]
ENTITY_nsube = "\\U02288" # /nsubseteq N: not subset, equals, [NEITHER A SUBSET OF NOR EQUAL TO]
ENTITY_nsubset = "\\U02282" # 020D2, alias ISOAMSN vnsub, [SUBSET OF with vertical line]
ENTITY_nsubseteq = "\\U02288" # alias ISOAMSN nsube, [NEITHER A SUBSET OF NOR EQUAL TO]
ENTITY_nsubseteqq = "\\U02AC5" # 00338, alias ISOAMSN nsubE, [SUBSET OF ABOVE EQUALS SIGN with slash]
ENTITY_nsucc = "\\U02281" # alias ISOAMSN nsc, [DOES NOT SUCCEED]
ENTITY_nsucceq = "\\U02AB0" # 00338, alias ISOAMSN nsce, [SUCCEEDS ABOVE SINGLE-LINE EQUALS SIGN with slash]
ENTITY_nsup = "\\U02285" # not superset, [NOT A SUPERSET OF]
ENTITY_nsupE = "\\U02AC6" # 00338, /nsupseteqq N: not superset, dbl eq, [SUPERSET OF ABOVE EQUALS SIGN with slash]
ENTITY_nsupe = "\\U02289" # /nsupseteq N: not superset, equals, [NEITHER A SUPERSET OF NOR EQUAL TO]
ENTITY_nsupset = "\\U02283" # 020D2, alias ISOAMSN vnsup, [SUPERSET OF with vertical line]
ENTITY_nsupseteq = "\\U02289" # alias ISOAMSN nsupe, [NEITHER A SUPERSET OF NOR EQUAL TO]
ENTITY_nsupseteqq = "\\U02AC6" # 00338, alias ISOAMSN nsupE, [SUPERSET OF ABOVE EQUALS SIGN with slash]
ENTITY_ntgl = "\\U02279" # not greater, less, [NEITHER GREATER-THAN NOR LESS-THAN]
ENTITY_ntilde = "\\U000F1" # small n, tilde, [LATIN SMALL LETTER N WITH TILDE]
ENTITY_ntlg = "\\U02278" # not less, greater, [NEITHER LESS-THAN NOR GREATER-THAN]
ENTITY_ntriangleleft = "\\U022EA" # alias ISOAMSN nltri, [NOT NORMAL SUBGROUP OF]
ENTITY_ntrianglelefteq = "\\U022EC" # alias ISOAMSN nltrie, [NOT NORMAL SUBGROUP OF OR EQUAL TO]
ENTITY_ntriangleright = "\\U022EB" # alias ISOAMSN nrtri, [DOES NOT CONTAIN AS NORMAL SUBGROUP]
ENTITY_ntrianglerighteq = "\\U022ED" # alias ISOAMSN nrtrie, [DOES NOT CONTAIN AS NORMAL SUBGROUP OR EQUAL]
ENTITY_nu = "\\U003BD" # /nu small nu, Greek, [GREEK SMALL LETTER NU]
ENTITY_num = "\\U00023" # number sign, [NUMBER SIGN]
ENTITY_numero = "\\U02116" # numero sign, [NUMERO SIGN]
ENTITY_numsp = " " #"\\U02007" # digit space (width of a number), [FIGURE SPACE]
ENTITY_nvDash = "\\U022AD" # /nvDash N: not vertical, dbl dash, [NOT TRUE]
ENTITY_nvHarr = "\\U02904" # not, vert, left and right double arrow, [LEFT RIGHT DOUBLE ARROW WITH VERTICAL STROKE]
ENTITY_nvap = "\\U0224D" # 020D2, not, vert, approximate, [EQUIVALENT TO with vertical line]
ENTITY_nvdash = "\\U022AC" # /nvdash N: not vertical, dash, [DOES NOT PROVE]
ENTITY_nvge = "\\U02265" # 020D2, not, vert, greater-than-or-equal, [GREATER-THAN OR EQUAL TO with vertical line]
ENTITY_nvgt = "\\U0003E" # 020D2, not, vert, greater-than, [GREATER-THAN SIGN with vertical line]
ENTITY_nvinfin = "\\U029DE" # not, vert, infinity, [INFINITY NEGATED WITH VERTICAL BAR]
ENTITY_nvlArr = "\\U02902" # not, vert, left double arrow, [LEFTWARDS DOUBLE ARROW WITH VERTICAL STROKE]
ENTITY_nvle = "\\U02264" # 020D2, not, vert, less-than-or-equal, [LESS-THAN OR EQUAL TO with vertical line]
ENTITY_nvlt = "\\U0003C" # 020D2, not, vert, less-than, [LESS-THAN SIGN with vertical line]
ENTITY_nvltrie = "\\U022B4" # 020D2, not, vert, left triangle, equals, [NORMAL SUBGROUP OF OR EQUAL TO with vertical line]
ENTITY_nvrArr = "\\U02903" # not, vert, right double arrow, [RIGHTWARDS DOUBLE ARROW WITH VERTICAL STROKE]
ENTITY_nvrtrie = "\\U022B5" # 020D2, not, vert, right triangle, equals, [CONTAINS AS NORMAL SUBGROUP OR EQUAL TO with vertical line]
ENTITY_nvsim = "\\U0223C" # 020D2, not, vert, similar, [TILDE OPERATOR with vertical line]
ENTITY_nwArr = "\\U021D6" # NW pointing dbl arrow, [NORTH WEST DOUBLE ARROW]
ENTITY_nwarhk = "\\U02923" # NW arrow-hooked, [NORTH WEST ARROW WITH HOOK]
ENTITY_nwarr = "\\U02196" # /nwarrow A: NW pointing arrow, [NORTH WEST ARROW]
ENTITY_nwarrow = "\\U02196" # alias ISOAMSA nwarr, [NORTH WEST ARROW]
ENTITY_nwnear = "\\U02927" # NW &amp; NE arrows, [NORTH WEST ARROW AND NORTH EAST ARROW]
ENTITY_oS = "\\U024C8" # /circledS - capital S in circle, [CIRCLED LATIN CAPITAL LETTER S]
ENTITY_oacute = "\\U000F3" # small o, acute accent, [LATIN SMALL LETTER O WITH ACUTE]
ENTITY_oast = "\\U0229B" # /circledast B: asterisk in circle, [CIRCLED ASTERISK OPERATOR]
ENTITY_ocir = "\\U0229A" # /circledcirc B: small circle in circle, [CIRCLED RING OPERATOR]
ENTITY_ocirc = "\\U000F4" # small o, circumflex accent, [LATIN SMALL LETTER O WITH CIRCUMFLEX]
ENTITY_ocy = "\\U0043E" # small o, Cyrillic, [CYRILLIC SMALL LETTER O]
ENTITY_odash = "\\U0229D" # /circleddash B: hyphen in circle, [CIRCLED DASH]
ENTITY_odblac = "\\U00151" # small o, double acute accent, [LATIN SMALL LETTER O WITH DOUBLE ACUTE]
ENTITY_odiv = "\\U02A38" # divide in circle, [CIRCLED DIVISION SIGN]
ENTITY_odot = "\\U02299" # /odot B: middle dot in circle, [CIRCLED DOT OPERATOR]
ENTITY_odsold = "\\U029BC" # dot, solidus, dot in circle, [CIRCLED ANTICLOCKWISE-ROTATED DIVISION SIGN]
ENTITY_oelig = "oe" # "\\U00153" # small oe ligature, [LATIN SMALL LIGATURE OE]
ENTITY_ofcir = "\\U029BF" # filled circle in circle, [CIRCLED BULLET]
ENTITY_ofr = "\\U1D52C" # /frak o, lower case o, [MATHEMATICAL FRAKTUR SMALL O]
ENTITY_ogon = "\\U002DB" # ogonek, [OGONEK]
ENTITY_ograve = "\\U000F2" # small o, grave accent, [LATIN SMALL LETTER O WITH GRAVE]
ENTITY_ogt = "\\U029C1" # greater-than in circle, [CIRCLED GREATER-THAN]
ENTITY_ohbar = "\\U029B5" # circle with horizontal bar, [CIRCLE WITH HORIZONTAL BAR]
ENTITY_ohm = "\\U02126" # ohm sign, [OHM SIGN]
ENTITY_oint = "\\U0222E" # alias ISOTECH conint, [CONTOUR INTEGRAL]
ENTITY_olarr = "\\U021BA" # /circlearrowleft A: l arr in circle, [ANTICLOCKWISE OPEN CIRCLE ARROW]
ENTITY_olcir = "\\U029BE" # large circle in circle, [CIRCLED WHITE BULLET]
ENTITY_olcross = "\\U029BB" # circle, cross, [CIRCLE WITH SUPERIMPOSED X]
ENTITY_olt = "\\U029C0" # less-than in circle, [CIRCLED LESS-THAN]
ENTITY_omacr = "\\U0014D" # small o, macron, [LATIN SMALL LETTER O WITH MACRON]
ENTITY_omega = "\\U003C9" # /omega small omega, Greek, [GREEK SMALL LETTER OMEGA]
ENTITY_omid = "\\U029B6" # vertical bar in circle, [CIRCLED VERTICAL BAR]
ENTITY_ominus = "\\U02296" # /ominus B: minus sign in circle, [CIRCLED MINUS]
ENTITY_oopf = "\\U1D560" # , [MATHEMATICAL DOUBLE-STRUCK SMALL O]
ENTITY_opar = "\\U029B7" # parallel in circle, [CIRCLED PARALLEL]
ENTITY_operp = "\\U029B9" # perpendicular in circle, [CIRCLED PERPENDICULAR]
ENTITY_oplus = "\\U02295" # /oplus B: plus sign in circle, [CIRCLED PLUS]
ENTITY_or = "\\U02228" # /vee /lor B: logical or, [LOGICAL OR]
ENTITY_orarr = "\\U021BB" # /circlearrowright A: r arr in circle, [CLOCKWISE OPEN CIRCLE ARROW]
ENTITY_ord = "\\U02A5D" # or, horizontal dash, [LOGICAL OR WITH HORIZONTAL DASH]
ENTITY_order = "\\U02134" # order of (script small o), [SCRIPT SMALL O]
ENTITY_orderof = "\\U02134" # alias ISOTECH order, [SCRIPT SMALL O]
ENTITY_ordf = "\\U000AA" # ordinal indicator, feminine, [FEMININE ORDINAL INDICATOR]
ENTITY_ordm = "\\U000BA" # ordinal indicator, masculine, [MASCULINE ORDINAL INDICATOR]
ENTITY_origof = "\\U022B6" # original of, [ORIGINAL OF]
ENTITY_oror = "\\U02A56" # two logical or, [TWO INTERSECTING LOGICAL OR]
ENTITY_orslope = "\\U02A57" # sloping large or, [SLOPING LARGE OR]
ENTITY_orv = "\\U02A5B" # or with middle stem, [LOGICAL OR WITH MIDDLE STEM]
ENTITY_oscr = "\\U02134" # /scr o, script letter o, [SCRIPT SMALL O]
ENTITY_oslash = "\\U000F8" # latin small letter o with stroke, [LATIN SMALL LETTER O WITH STROKE]
ENTITY_osol = "\\U02298" # /oslash B: solidus in circle, [CIRCLED DIVISION SLASH]
ENTITY_otilde = "\\U000F5" # small o, tilde, [LATIN SMALL LETTER O WITH TILDE]
ENTITY_otimes = "\\U02297" # /otimes B: multiply sign in circle, [CIRCLED TIMES]
ENTITY_otimesas = "\\U02A36" # multiply sign in circle, circumflex accent, [CIRCLED MULTIPLICATION SIGN WITH CIRCUMFLEX ACCENT]
ENTITY_ouml = "\\U000F6" # small o, dieresis or umlaut mark, [LATIN SMALL LETTER O WITH DIAERESIS]
ENTITY_ovbar = "\\U0233D" # circle with vertical bar, [APL FUNCTIONAL SYMBOL CIRCLE STILE]
ENTITY_par = "\\U02225" # /parallel R: parallel, [PARALLEL TO]
ENTITY_para = "\\U000B6" # pilcrow (paragraph sign), [PILCROW SIGN]
ENTITY_parallel = "\\U02225" # alias ISOTECH par, [PARALLEL TO]
ENTITY_parsim = "\\U02AF3" # parallel, similar, [PARALLEL WITH TILDE OPERATOR]
ENTITY_parsl = "\\U02AFD" # parallel, slanted, [DOUBLE SOLIDUS OPERATOR]
ENTITY_part = "\\U02202" # /partial partial differential, [PARTIAL DIFFERENTIAL]
ENTITY_pcy = "\\U0043F" # small pe, Cyrillic, [CYRILLIC SMALL LETTER PE]
ENTITY_percnt = "\\U00025" # percent sign, [PERCENT SIGN]
ENTITY_period = "\\U0002E" # full stop, period, [FULL STOP]
ENTITY_permil = "\\U02030" # per thousand, [PER MILLE SIGN]
ENTITY_perp = "\\U022A5" # /perp R: perpendicular, [UP TACK]
ENTITY_pertenk = "\\U02031" # per 10 thousand, [PER TEN THOUSAND SIGN]
ENTITY_pfr = "\\U1D52D" # /frak p, lower case p, [MATHEMATICAL FRAKTUR SMALL P]
ENTITY_phi = "\\U003D5" # /straightphi - small phi, Greek, [GREEK PHI SYMBOL]
ENTITY_phiv = "\\U003C6" # /varphi - curly or open phi, [GREEK SMALL LETTER PHI]
ENTITY_phmmat = "\\U02133" # physics M-matrix (script capital M), [SCRIPT CAPITAL M]
ENTITY_phone = "\\U0260E" # telephone symbol, [BLACK TELEPHONE]
ENTITY_pi = "\\U003C0" # /pi small pi, Greek, [GREEK SMALL LETTER PI]
ENTITY_pitchfork = "\\U022D4" # alias ISOAMSR fork, [PITCHFORK]
ENTITY_piv = "\\U003D6" # /varpi, [GREEK PI SYMBOL]
ENTITY_planck = "\\U0210F" # /hbar - Planck's over 2pi, [PLANCK CONSTANT OVER TWO PI]
ENTITY_planckh = "\\U0210E" # the ring (skew field) of quaternions, [PLANCK CONSTANT]
ENTITY_plankv = "\\U0210F" # /hslash - variant Planck's over 2pi, [PLANCK CONSTANT OVER TWO PI]
ENTITY_plus = "\\U0002B" # plus sign B:, [PLUS SIGN]
ENTITY_plusacir = "\\U02A23" # plus, circumflex accent above, [PLUS SIGN WITH CIRCUMFLEX ACCENT ABOVE]
ENTITY_plusb = "\\U0229E" # /boxplus B: plus sign in box, [SQUARED PLUS]
ENTITY_pluscir = "\\U02A22" # plus, small circle above, [PLUS SIGN WITH SMALL CIRCLE ABOVE]
ENTITY_plusdo = "\\U02214" # /dotplus B: plus sign, dot above, [DOT PLUS]
ENTITY_plusdu = "\\U02A25" # plus sign, dot below, [PLUS SIGN WITH DOT BELOW]
ENTITY_pluse = "\\U02A72" # plus, equals, [PLUS SIGN ABOVE EQUALS SIGN]
ENTITY_plusmn = "\\U000B1" # /pm B: =plus-or-minus sign, [PLUS-MINUS SIGN]
ENTITY_plussim = "\\U02A26" # plus, similar below, [PLUS SIGN WITH TILDE BELOW]
ENTITY_plustwo = "\\U02A27" # plus, two; Nim-addition, [PLUS SIGN WITH SUBSCRIPT TWO]
ENTITY_pm = "\\U000B1" # alias ISONUM plusmn, [PLUS-MINUS SIGN]
ENTITY_pointint = "\\U02A15" # integral around a point operator, [INTEGRAL AROUND A POINT OPERATOR]
ENTITY_popf = "\\U1D561" # , [MATHEMATICAL DOUBLE-STRUCK SMALL P]
ENTITY_pound = "\\U000A3" # pound sign, [POUND SIGN]
ENTITY_pr = "\\U0227A" # /prec R: precedes, [PRECEDES]
ENTITY_prE = "\\U02AB3" # precedes, dbl equals, [PRECEDES ABOVE EQUALS SIGN]
ENTITY_prap = "\\U02AB7" # /precapprox R: precedes, approximate, [PRECEDES ABOVE ALMOST EQUAL TO]
ENTITY_prcue = "\\U0227C" # /preccurlyeq R: precedes, curly eq, [PRECEDES OR EQUAL TO]
ENTITY_pre = "\\U02AAF" # /preceq R: precedes, equals, [PRECEDES ABOVE SINGLE-LINE EQUALS SIGN]
ENTITY_prec = "\\U0227A" # alias ISOAMSR pr, [PRECEDES]
ENTITY_precapprox = "\\U02AB7" # alias ISOAMSR prap, [PRECEDES ABOVE ALMOST EQUAL TO]
ENTITY_preccurlyeq = "\\U0227C" # alias ISOAMSR prcue, [PRECEDES OR EQUAL TO]
ENTITY_preceq = "\\U02AAF" # alias ISOAMSR pre, [PRECEDES ABOVE SINGLE-LINE EQUALS SIGN]
ENTITY_precnapprox = "\\U02AB9" # alias ISOAMSN prnap, [PRECEDES ABOVE NOT ALMOST EQUAL TO]
ENTITY_precneqq = "\\U02AB5" # alias ISOAMSN prnE, [PRECEDES ABOVE NOT EQUAL TO]
ENTITY_precnsim = "\\U022E8" # alias ISOAMSN prnsim, [PRECEDES BUT NOT EQUIVALENT TO]
ENTITY_precsim = "\\U0227E" # alias ISOAMSR prsim, [PRECEDES OR EQUIVALENT TO]
ENTITY_prime = "\\U02032" # /prime prime or minute, [PRIME]
ENTITY_primes = "\\U02119" # the prime natural numbers, [DOUBLE-STRUCK CAPITAL P]
ENTITY_prnE = "\\U02AB5" # /precneqq N: precedes, not dbl eq, [PRECEDES ABOVE NOT EQUAL TO]
ENTITY_prnap = "\\U02AB9" # /precnapprox N: precedes, not approx, [PRECEDES ABOVE NOT ALMOST EQUAL TO]
ENTITY_prnsim = "\\U022E8" # /precnsim N: precedes, not similar, [PRECEDES BUT NOT EQUIVALENT TO]
ENTITY_prod = "\\U0220F" # /prod L: product operator, [N-ARY PRODUCT]
ENTITY_profalar = "\\U0232E" # all-around profile, [ALL AROUND-PROFILE]
ENTITY_profline = "\\U02312" # profile of a line, [ARC]
ENTITY_profsurf = "\\U02313" # profile of a surface, [SEGMENT]
ENTITY_prop = "\\U0221D" # /propto R: is proportional to, [PROPORTIONAL TO]
ENTITY_propto = "\\U0221D" # alias ISOTECH prop, [PROPORTIONAL TO]
ENTITY_prsim = "\\U0227E" # /precsim R: precedes, similar, [PRECEDES OR EQUIVALENT TO]
ENTITY_prurel = "\\U022B0" # element precedes under relation, [PRECEDES UNDER RELATION]
ENTITY_pscr = "\\U1D4C5" # /scr p, script letter p, [MATHEMATICAL SCRIPT SMALL P]
ENTITY_psi = "\\U003C8" # /psi small psi, Greek, [GREEK SMALL LETTER PSI]
ENTITY_puncsp = " " #"\\U02008" # punctuation space (width of comma), [PUNCTUATION SPACE]
ENTITY_qfr = "\\U1D52E" # /frak q, lower case q, [MATHEMATICAL FRAKTUR SMALL Q]
ENTITY_qint = "\\U02A0C" # /iiiint quadruple integral operator, [QUADRUPLE INTEGRAL OPERATOR]
ENTITY_qopf = "\\U1D562" # , [MATHEMATICAL DOUBLE-STRUCK SMALL Q]
ENTITY_qprime = "\\U02057" # quadruple prime, [QUADRUPLE PRIME]
ENTITY_qscr = "\\U1D4C6" # /scr q, script letter q, [MATHEMATICAL SCRIPT SMALL Q]
ENTITY_quaternions = "\\U0210D" # the ring (skew field) of quaternions, [DOUBLE-STRUCK CAPITAL H]
ENTITY_quatint = "\\U02A16" # quaternion integral operator, [QUATERNION INTEGRAL OPERATOR]
ENTITY_quest = "\\U0003F" # question mark, [QUESTION MARK]
ENTITY_questeq = "\\U0225F" # alias ISOAMSR equest, [QUESTIONED EQUAL TO]
ENTITY_quot = "\\U00022" # quotation mark, [QUOTATION MARK]
ENTITY_rAarr = "\\U021DB" # /Rrightarrow A: right triple arrow, [RIGHTWARDS TRIPLE ARROW]
ENTITY_rArr = "\\U021D2" # /Rightarrow A: implies, [RIGHTWARDS DOUBLE ARROW]
ENTITY_rAtail = "\\U0291C" # right double arrow-tail, [RIGHTWARDS DOUBLE ARROW-TAIL]
ENTITY_rBarr = "\\U0290F" # /dbkarow A: right doubly broken arrow, [RIGHTWARDS TRIPLE DASH ARROW]
ENTITY_rHar = "\\U02964" # right harpoon-up over right harpoon-down, [RIGHTWARDS HARPOON WITH BARB UP ABOVE RIGHTWARDS HARPOON WITH BARB DOWN]
ENTITY_race = "\\U029DA" # reverse most positive, line below, [LEFT DOUBLE WIGGLY FENCE]
ENTITY_racute = "\\U00155" # small r, acute accent, [LATIN SMALL LETTER R WITH ACUTE]
ENTITY_radic = "\\U0221A" # /surd radical, [SQUARE ROOT]
ENTITY_raemptyv = "\\U029B3" # circle, slash, right arrow above, [EMPTY SET WITH RIGHT ARROW ABOVE]
ENTITY_rang = "\\U0232A" # /rangle C: right angle bracket, [RIGHT-POINTING ANGLE BRACKET]
ENTITY_rangd = "\\U02992" # right angle, dot, [RIGHT ANGLE BRACKET WITH DOT]
ENTITY_range = "\\U029A5" # reverse angle, equal, [REVERSED ANGLE WITH UNDERBAR]
ENTITY_rangle = "\\U0232A" # alias ISOTECH rang, [RIGHT-POINTING ANGLE BRACKET]
ENTITY_raquo = "\\U000BB" # angle quotation mark, right, [RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK]
ENTITY_rarr = "\\U02192" # /rightarrow /to A: =rightward arrow, [RIGHTWARDS ARROW]
ENTITY_rarrap = "\\U02975" # approximate, right arrow above, [RIGHTWARDS ARROW ABOVE ALMOST EQUAL TO]
ENTITY_rarrb = "\\U021E5" # leftwards arrow to bar, [RIGHTWARDS ARROW TO BAR]
ENTITY_rarrbfs = "\\U02920" # right arrow-bar, filled square, [RIGHTWARDS ARROW FROM BAR TO BLACK DIAMOND]
ENTITY_rarrc = "\\U02933" # right arrow-curved, [WAVE ARROW POINTING DIRECTLY RIGHT]
ENTITY_rarrfs = "\\U0291E" # right arrow, filled square, [RIGHTWARDS ARROW TO BLACK DIAMOND]
ENTITY_rarrhk = "\\U021AA" # /hookrightarrow A: rt arrow-hooked, [RIGHTWARDS ARROW WITH HOOK]
ENTITY_rarrlp = "\\U021AC" # /looparrowright A: rt arrow-looped, [RIGHTWARDS ARROW WITH LOOP]
ENTITY_rarrpl = "\\U02945" # right arrow, plus, [RIGHTWARDS ARROW WITH PLUS BELOW]
ENTITY_rarrsim = "\\U02974" # right arrow, similar, [RIGHTWARDS ARROW ABOVE TILDE OPERATOR]
ENTITY_rarrtl = "\\U021A3" # /rightarrowtail A: rt arrow-tailed, [RIGHTWARDS ARROW WITH TAIL]
ENTITY_rarrw = "\\U0219D" # /rightsquigarrow A: rt arrow-wavy, [RIGHTWARDS WAVE ARROW]
ENTITY_ratail = "\\U0291A" # right arrow-tail, [RIGHTWARDS ARROW-TAIL]
ENTITY_ratio = "\\U02236" # /ratio, [RATIO]
ENTITY_rationals = "\\U0211A" # the field of rational numbers, [DOUBLE-STRUCK CAPITAL Q]
ENTITY_rbarr = "\\U0290D" # /bkarow A: right broken arrow, [RIGHTWARDS DOUBLE DASH ARROW]
ENTITY_rbbrk = "\\U03015" # right broken bracket, [RIGHT TORTOISE SHELL BRACKET]
ENTITY_rbrace = "\\U0007D" # alias ISONUM rcub, [RIGHT CURLY BRACKET]
ENTITY_rbrack = "\\U0005D" # alias ISONUM rsqb, [RIGHT SQUARE BRACKET]
ENTITY_rbrke = "\\U0298C" # right bracket, equal, [RIGHT SQUARE BRACKET WITH UNDERBAR]
ENTITY_rbrksld = "\\U0298E" # right bracket, solidus bottom corner, [RIGHT SQUARE BRACKET WITH TICK IN BOTTOM CORNER]
ENTITY_rbrkslu = "\\U02990" # right bracket, solidus top corner, [RIGHT SQUARE BRACKET WITH TICK IN TOP CORNER]
ENTITY_rcaron = "\\U00159" # small r, caron, [LATIN SMALL LETTER R WITH CARON]
ENTITY_rcedil = "\\U00157" # small r, cedilla, [LATIN SMALL LETTER R WITH CEDILLA]
ENTITY_rceil = "\\U02309" # /rceil C: right ceiling, [RIGHT CEILING]
ENTITY_rcub = "\\U0007D" # /rbrace C: =right curly bracket, [RIGHT CURLY BRACKET]
ENTITY_rcy = "\\U00440" # small er, Cyrillic, [CYRILLIC SMALL LETTER ER]
ENTITY_rdca = "\\U02937" # right down curved arrow, [ARROW POINTING DOWNWARDS THEN CURVING RIGHTWARDS]
ENTITY_rdldhar = "\\U02969" # right harpoon-down over left harpoon-down, [RIGHTWARDS HARPOON WITH BARB DOWN ABOVE LEFTWARDS HARPOON WITH BARB DOWN]
ENTITY_rdquo = "\\U0201D" # double quotation mark, right, [RIGHT DOUBLE QUOTATION MARK]
ENTITY_rdquor = "\\U0201D" # rising dbl quote, right (high), [RIGHT DOUBLE QUOTATION MARK]
ENTITY_rdsh = "\\U021B3" # right down angled arrow, [DOWNWARDS ARROW WITH TIP RIGHTWARDS]
ENTITY_real = "\\U0211C" # /Re - real, [BLACK-LETTER CAPITAL R]
ENTITY_realine = "\\U0211B" # the geometric real line, [SCRIPT CAPITAL R]
ENTITY_realpart = "\\U0211C" # alias ISOAMSO real, [BLACK-LETTER CAPITAL R]
ENTITY_reals = "\\U0211D" # the field of real numbers, [DOUBLE-STRUCK CAPITAL R]
ENTITY_rect = "\\U025AD" # rectangle, open, [WHITE RECTANGLE]
ENTITY_reg = "\\U000AE" # /circledR =registered sign, [REGISTERED SIGN]
ENTITY_rfisht = "\\U0297D" # right fish tail, [RIGHT FISH TAIL]
ENTITY_rfloor = "\\U0230B" # /rfloor C: right floor, [RIGHT FLOOR]
ENTITY_rfr = "\\U1D52F" # /frak r, lower case r, [MATHEMATICAL FRAKTUR SMALL R]
ENTITY_rhard = "\\U021C1" # /rightharpoondown A: rt harpoon-down, [RIGHTWARDS HARPOON WITH BARB DOWNWARDS]
ENTITY_rharu = "\\U021C0" # /rightharpoonup A: rt harpoon-up, [RIGHTWARDS HARPOON WITH BARB UPWARDS]
ENTITY_rharul = "\\U0296C" # right harpoon-up over long dash, [RIGHTWARDS HARPOON WITH BARB UP ABOVE LONG DASH]
ENTITY_rho = "\\U003C1" # /rho small rho, Greek, [GREEK SMALL LETTER RHO]
ENTITY_rhov = "\\U003F1" # /varrho, [GREEK RHO SYMBOL]
ENTITY_rightarrow = "\\U02192" # alias ISONUM rarr, [RIGHTWARDS ARROW]
ENTITY_rightarrowtail = "\\U021A3" # alias ISOAMSA rarrtl, [RIGHTWARDS ARROW WITH TAIL]
ENTITY_rightharpoondown = "\\U021C1" # alias ISOAMSA rhard, [RIGHTWARDS HARPOON WITH BARB DOWNWARDS]
ENTITY_rightharpoonup = "\\U021C0" # alias ISOAMSA rharu, [RIGHTWARDS HARPOON WITH BARB UPWARDS]
ENTITY_rightleftarrows = "\\U021C4" # alias ISOAMSA rlarr, [RIGHTWARDS ARROW OVER LEFTWARDS ARROW]
ENTITY_rightleftharpoons = "\\U021CC" # alias ISOAMSA rlhar, [RIGHTWARDS HARPOON OVER LEFTWARDS HARPOON]
ENTITY_rightrightarrows = "\\U021C9" # alias ISOAMSA rrarr, [RIGHTWARDS PAIRED ARROWS]
ENTITY_rightsquigarrow = "\\U0219D" # alias ISOAMSA rarrw, [RIGHTWARDS WAVE ARROW]
ENTITY_rightthreetimes = "\\U022CC" # alias ISOAMSB rthree, [RIGHT SEMIDIRECT PRODUCT]
ENTITY_ring = "\\U002DA" # ring, [RING ABOVE]
ENTITY_risingdotseq = "\\U02253" # alias ISOAMSR erDot, [IMAGE OF OR APPROXIMATELY EQUAL TO]
ENTITY_rlarr = "\\U021C4" # /rightleftarrows A: r arr over l arr, [RIGHTWARDS ARROW OVER LEFTWARDS ARROW]
ENTITY_rlhar = "\\U021CC" # /rightleftharpoons A: r harp over l, [RIGHTWARDS HARPOON OVER LEFTWARDS HARPOON]
ENTITY_rmoust = "\\U023B1" # /rmoustache, [UPPER RIGHT OR LOWER LEFT CURLY BRACKET SECTION]
ENTITY_rmoustache = "\\U023B1" # alias ISOAMSC rmoust, [UPPER RIGHT OR LOWER LEFT CURLY BRACKET SECTION]
ENTITY_rnmid = "\\U02AEE" # reverse /nmid, [DOES NOT DIVIDE WITH REVERSED NEGATION SLASH]
ENTITY_roang = "\\U03019" # right open angular bracket, [RIGHT WHITE TORTOISE SHELL BRACKET]
ENTITY_roarr = "\\U021FE" # right open arrow, [RIGHTWARDS OPEN-HEADED ARROW]
ENTITY_robrk = "\\U0301B" # right open bracket, [RIGHT WHITE SQUARE BRACKET]
ENTITY_ropar = "\\U02986" # right open parenthesis, [RIGHT WHITE PARENTHESIS]
ENTITY_ropf = "\\U1D563" # , [MATHEMATICAL DOUBLE-STRUCK SMALL R]
ENTITY_roplus = "\\U02A2E" # plus sign in right half circle, [PLUS SIGN IN RIGHT HALF CIRCLE]
ENTITY_rotimes = "\\U02A35" # multiply sign in right half circle, [MULTIPLICATION SIGN IN RIGHT HALF CIRCLE]
ENTITY_rpar = "\\U00029" # C: =right parenthesis, [RIGHT PARENTHESIS]
ENTITY_rpargt = "\\U02994" # C: right paren, gt, [RIGHT ARC GREATER-THAN BRACKET]
ENTITY_rppolint = "\\U02A12" # line integration, rectangular path around pole, [LINE INTEGRATION WITH RECTANGULAR PATH AROUND POLE]
ENTITY_rrarr = "\\U021C9" # /rightrightarrows A: two rt arrows, [RIGHTWARDS PAIRED ARROWS]
ENTITY_rscr = "\\U1D4C7" # /scr r, script letter r, [MATHEMATICAL SCRIPT SMALL R]
ENTITY_rsh = "\\U021B1" # /Rsh A:, [UPWARDS ARROW WITH TIP RIGHTWARDS]
ENTITY_rsqb = "\\U0005D" # /rbrack C: =right square bracket, [RIGHT SQUARE BRACKET]
ENTITY_rsquo = "\\U02019" # single quotation mark, right, [RIGHT SINGLE QUOTATION MARK]
ENTITY_rsquor = "\\U02019" # rising single quote, right (high), [RIGHT SINGLE QUOTATION MARK]
ENTITY_rthree = "\\U022CC" # /rightthreetimes B:, [RIGHT SEMIDIRECT PRODUCT]
ENTITY_rtimes = "\\U022CA" # /rtimes B: times sign, right closed, [RIGHT NORMAL FACTOR SEMIDIRECT PRODUCT]
ENTITY_rtri = "\\U025B9" # /triangleright B: r triangle, open, [WHITE RIGHT-POINTING SMALL TRIANGLE]
ENTITY_rtrie = "\\U022B5" # /trianglerighteq R: right tri, eq, [CONTAINS AS NORMAL SUBGROUP OR EQUAL TO]
ENTITY_rtrif = "\\U025B8" # /blacktriangleright R: =r tri, filled, [BLACK RIGHT-POINTING SMALL TRIANGLE]
ENTITY_rtriltri = "\\U029CE" # right triangle above left triangle, [RIGHT TRIANGLE ABOVE LEFT TRIANGLE]
ENTITY_ruluhar = "\\U02968" # right harpoon-up over left harpoon-up, [RIGHTWARDS HARPOON WITH BARB UP ABOVE LEFTWARDS HARPOON WITH BARB UP]
ENTITY_rx = "\\U0211E" # pharmaceutical prescription (Rx), [PRESCRIPTION TAKE]
ENTITY_sacute = "\\U0015B" # small s, acute accent, [LATIN SMALL LETTER S WITH ACUTE]
ENTITY_sc = "\\U0227B" # /succ R: succeeds, [SUCCEEDS]
ENTITY_scE = "\\U02AB4" # succeeds, dbl equals, [SUCCEEDS ABOVE EQUALS SIGN]
ENTITY_scap = "\\U02AB8" # /succapprox R: succeeds, approximate, [SUCCEEDS ABOVE ALMOST EQUAL TO]
ENTITY_scaron = "\\U00161" # small s, caron, [LATIN SMALL LETTER S WITH CARON]
ENTITY_sccue = "\\U0227D" # /succcurlyeq R: succeeds, curly eq, [SUCCEEDS OR EQUAL TO]
ENTITY_sce = "\\U02AB0" # /succeq R: succeeds, equals, [SUCCEEDS ABOVE SINGLE-LINE EQUALS SIGN]
ENTITY_scedil = "\\U0015F" # small s, cedilla, [LATIN SMALL LETTER S WITH CEDILLA]
ENTITY_scirc = "\\U0015D" # small s, circumflex accent, [LATIN SMALL LETTER S WITH CIRCUMFLEX]
ENTITY_scnE = "\\U02AB6" # /succneqq N: succeeds, not dbl eq, [SUCCEEDS ABOVE NOT EQUAL TO]
ENTITY_scnap = "\\U02ABA" # /succnapprox N: succeeds, not approx, [SUCCEEDS ABOVE NOT ALMOST EQUAL TO]
ENTITY_scnsim = "\\U022E9" # /succnsim N: succeeds, not similar, [SUCCEEDS BUT NOT EQUIVALENT TO]
ENTITY_scpolint = "\\U02A13" # line integration, semi-circular path around pole, [LINE INTEGRATION WITH SEMICIRCULAR PATH AROUND POLE]
ENTITY_scsim = "\\U0227F" # /succsim R: succeeds, similar, [SUCCEEDS OR EQUIVALENT TO]
ENTITY_scy = "\\U00441" # small es, Cyrillic, [CYRILLIC SMALL LETTER ES]
ENTITY_sdot = "\\U022C5" # /cdot B: small middle dot, [DOT OPERATOR]
ENTITY_sdotb = "\\U022A1" # /dotsquare /boxdot B: small dot in box, [SQUARED DOT OPERATOR]
ENTITY_sdote = "\\U02A66" # equal, dot below, [EQUALS SIGN WITH DOT BELOW]
ENTITY_seArr = "\\U021D8" # SE pointing dbl arrow, [SOUTH EAST DOUBLE ARROW]
ENTITY_searhk = "\\U02925" # /hksearow A: SE arrow-hooken, [SOUTH EAST ARROW WITH HOOK]
ENTITY_searr = "\\U02198" # /searrow A: SE pointing arrow, [SOUTH EAST ARROW]
ENTITY_searrow = "\\U02198" # alias ISOAMSA searr, [SOUTH EAST ARROW]
ENTITY_sect = "\\U000A7" # section sign, [SECTION SIGN]
ENTITY_semi = "\\U0003B" # semicolon P:, [SEMICOLON]
ENTITY_seswar = "\\U02929" # /tosa A: SE &amp; SW arrows, [SOUTH EAST ARROW AND SOUTH WEST ARROW]
ENTITY_setminus = "\\U02216" # alias ISOAMSB setmn, [SET MINUS]
ENTITY_setmn = "\\U02216" # /setminus B: reverse solidus, [SET MINUS]
ENTITY_sext = "\\U02736" # sextile (6-pointed star), [SIX POINTED BLACK STAR]
ENTITY_sfr = "\\U1D530" # /frak s, lower case s, [MATHEMATICAL FRAKTUR SMALL S]
ENTITY_sfrown = "\\U02322" # /smallfrown R: small down curve, [FROWN]
ENTITY_sharp = "\\U0266F" # /sharp =musical sharp, [MUSIC SHARP SIGN]
ENTITY_shchcy = "\\U00449" # small shcha, Cyrillic, [CYRILLIC SMALL LETTER SHCHA]
ENTITY_shcy = "\\U00448" # small sha, Cyrillic, [CYRILLIC SMALL LETTER SHA]
ENTITY_shortmid = "\\U02223" # alias ISOAMSR smid, [DIVIDES]
ENTITY_shortparallel = "\\U02225" # alias ISOAMSR spar, [PARALLEL TO]
ENTITY_shy = "\\U000AD" # soft hyphen, [SOFT HYPHEN]
ENTITY_sigma = "\\U003C3" # /sigma small sigma, Greek, [GREEK SMALL LETTER SIGMA]
ENTITY_sigmav = "\\U003C2" # /varsigma, [GREEK SMALL LETTER FINAL SIGMA]
ENTITY_sim = "\\U0223C" # /sim R: similar, [TILDE OPERATOR]
ENTITY_simdot = "\\U02A6A" # similar, dot, [TILDE OPERATOR WITH DOT ABOVE]
ENTITY_sime = "\\U02243" # /simeq R: similar, equals, [ASYMPTOTICALLY EQUAL TO]
ENTITY_simeq = "\\U02243" # alias ISOTECH sime, [ASYMPTOTICALLY EQUAL TO]
ENTITY_simg = "\\U02A9E" # similar, greater, [SIMILAR OR GREATER-THAN]
ENTITY_simgE = "\\U02AA0" # similar, greater, equal, [SIMILAR ABOVE GREATER-THAN ABOVE EQUALS SIGN]
ENTITY_siml = "\\U02A9D" # similar, less, [SIMILAR OR LESS-THAN]
ENTITY_simlE = "\\U02A9F" # similar, less, equal, [SIMILAR ABOVE LESS-THAN ABOVE EQUALS SIGN]
ENTITY_simne = "\\U02246" # similar, not equals, [APPROXIMATELY BUT NOT ACTUALLY EQUAL TO]
ENTITY_simplus = "\\U02A24" # plus, similar above, [PLUS SIGN WITH TILDE ABOVE]
ENTITY_simrarr = "\\U02972" # similar, right arrow below, [TILDE OPERATOR ABOVE RIGHTWARDS ARROW]
ENTITY_slarr = "\\U02190" # short left arrow, [LEFTWARDS ARROW]
ENTITY_smallsetminus = "\\U02216" # alias ISOAMSB ssetmn, [SET MINUS]
ENTITY_smashp = "\\U02A33" # smash product, [SMASH PRODUCT]
ENTITY_smeparsl = "\\U029E4" # similar, parallel, slanted, equal, [EQUALS SIGN AND SLANTED PARALLEL WITH TILDE ABOVE]
ENTITY_smid = "\\U02223" # /shortmid R:, [DIVIDES]
ENTITY_smile = "\\U02323" # /smile R: up curve, [SMILE]
ENTITY_smt = "\\U02AAA" # smaller than, [SMALLER THAN]
ENTITY_smte = "\\U02AAC" # smaller than or equal, [SMALLER THAN OR EQUAL TO]
ENTITY_smtes = "\\U02AAC" # 0FE00, smaller than or equal, slanted, [SMALLER THAN OR slanted EQUAL]
ENTITY_softcy = "\\U0044C" # small soft sign, Cyrillic, [CYRILLIC SMALL LETTER SOFT SIGN]
ENTITY_sol = "\\U0002F" # solidus, [SOLIDUS]
ENTITY_solb = "\\U029C4" # solidus in square, [SQUARED RISING DIAGONAL SLASH]
ENTITY_solbar = "\\U0233F" # solidus, bar through, [APL FUNCTIONAL SYMBOL SLASH BAR]
ENTITY_sopf = "\\U1D564" # , [MATHEMATICAL DOUBLE-STRUCK SMALL S]
ENTITY_spades = "\\U02660" # /spadesuit =spades suit symbol, [BLACK SPADE SUIT]
ENTITY_spadesuit = "\\U02660" # ISOPUB spades, [BLACK SPADE SUIT]
ENTITY_spar = "\\U02225" # /shortparallel R: short parallel, [PARALLEL TO]
ENTITY_sqcap = "\\U02293" # /sqcap B: square intersection, [SQUARE CAP]
ENTITY_sqcaps = "\\U02293" # 0FE00, square intersection, serifs, [SQUARE CAP with serifs]
ENTITY_sqcup = "\\U02294" # /sqcup B: square union, [SQUARE CUP]
ENTITY_sqcups = "\\U02294" # 0FE00, square union, serifs, [SQUARE CUP with serifs]
ENTITY_sqsub = "\\U0228F" # /sqsubset R: square subset, [SQUARE IMAGE OF]
ENTITY_sqsube = "\\U02291" # /sqsubseteq R: square subset, equals, [SQUARE IMAGE OF OR EQUAL TO]
ENTITY_sqsubset = "\\U0228F" # alias ISOAMSR sqsub, [SQUARE IMAGE OF]
ENTITY_sqsubseteq = "\\U02291" # alias ISOAMSR sqsube, [SQUARE IMAGE OF OR EQUAL TO]
ENTITY_sqsup = "\\U02290" # /sqsupset R: square superset, [SQUARE ORIGINAL OF]
ENTITY_sqsupe = "\\U02292" # /sqsupseteq R: square superset, eq, [SQUARE ORIGINAL OF OR EQUAL TO]
ENTITY_sqsupset = "\\U02290" # alias ISOAMSR sqsup, [SQUARE ORIGINAL OF]
ENTITY_sqsupseteq = "\\U02292" # alias ISOAMSR sqsupe, [SQUARE ORIGINAL OF OR EQUAL TO]
ENTITY_squ = "\\U025A1" # square, open, [WHITE SQUARE]
ENTITY_square = "\\U025A1" # /square, square, [WHITE SQUARE]
ENTITY_squarf = "\\U025AA" # /blacksquare, square, filled, [BLACK SMALL SQUARE]
ENTITY_squf = "\\U025AA" # /blacksquare =sq bullet, filled, [BLACK SMALL SQUARE]
ENTITY_srarr = "\\U02192" # short right arrow, [RIGHTWARDS ARROW]
ENTITY_sscr = "\\U1D4C8" # /scr s, script letter s, [MATHEMATICAL SCRIPT SMALL S]
ENTITY_ssetmn = "\\U02216" # /smallsetminus B: sm reverse solidus, [SET MINUS]
ENTITY_ssmile = "\\U02323" # /smallsmile R: small up curve, [SMILE]
ENTITY_sstarf = "\\U022C6" # /star B: small star, filled, [STAR OPERATOR]
ENTITY_star = "\\U02606" # star, open, [WHITE STAR]
ENTITY_starf = "\\U02605" # /bigstar - star, filled, [BLACK STAR]
ENTITY_straightepsilon = "\\U003F5" # alias ISOGRK3 epsi, [GREEK LUNATE EPSILON SYMBOL]
ENTITY_straightphi = "\\U003D5" # alias ISOGRK3 phi, [GREEK PHI SYMBOL]
ENTITY_strns = "\\U000AF" # straightness, [MACRON]
ENTITY_sub = "\\U02282" # /subset R: subset or is implied by, [SUBSET OF]
ENTITY_subE = "\\U02AC5" # /subseteqq R: subset, dbl equals, [SUBSET OF ABOVE EQUALS SIGN]
ENTITY_subdot = "\\U02ABD" # subset, with dot, [SUBSET WITH DOT]
ENTITY_sube = "\\U02286" # /subseteq R: subset, equals, [SUBSET OF OR EQUAL TO]
ENTITY_subedot = "\\U02AC3" # subset, equals, dot, [SUBSET OF OR EQUAL TO WITH DOT ABOVE]
ENTITY_submult = "\\U02AC1" # subset, multiply, [SUBSET WITH MULTIPLICATION SIGN BELOW]
ENTITY_subnE = "\\U02ACB" # /subsetneqq N: subset, not dbl eq, [SUBSET OF ABOVE NOT EQUAL TO]
ENTITY_subne = "\\U0228A" # /subsetneq N: subset, not equals, [SUBSET OF WITH NOT EQUAL TO]
ENTITY_subplus = "\\U02ABF" # subset, plus, [SUBSET WITH PLUS SIGN BELOW]
ENTITY_subrarr = "\\U02979" # subset, right arrow, [SUBSET ABOVE RIGHTWARDS ARROW]
ENTITY_subset = "\\U02282" # alias ISOTECH sub, [SUBSET OF]
ENTITY_subseteq = "\\U02286" # alias ISOTECH sube, [SUBSET OF OR EQUAL TO]
ENTITY_subseteqq = "\\U02AC5" # alias ISOAMSR subE, [SUBSET OF ABOVE EQUALS SIGN]
ENTITY_subsetneq = "\\U0228A" # alias ISOAMSN subne, [SUBSET OF WITH NOT EQUAL TO]
ENTITY_subsetneqq = "\\U02ACB" # alias ISOAMSN subnE, [SUBSET OF ABOVE NOT EQUAL TO]
ENTITY_subsim = "\\U02AC7" # subset, similar, [SUBSET OF ABOVE TILDE OPERATOR]
ENTITY_subsub = "\\U02AD5" # subset above subset, [SUBSET ABOVE SUBSET]
ENTITY_subsup = "\\U02AD3" # subset above superset, [SUBSET ABOVE SUPERSET]
ENTITY_succ = "\\U0227B" # alias ISOAMSR sc, [SUCCEEDS]
ENTITY_succapprox = "\\U02AB8" # alias ISOAMSR scap, [SUCCEEDS ABOVE ALMOST EQUAL TO]
ENTITY_succcurlyeq = "\\U0227D" # alias ISOAMSR sccue, [SUCCEEDS OR EQUAL TO]
ENTITY_succeq = "\\U02AB0" # alias ISOAMSR sce, [SUCCEEDS ABOVE SINGLE-LINE EQUALS SIGN]
ENTITY_succnapprox = "\\U02ABA" # alias ISOAMSN scnap, [SUCCEEDS ABOVE NOT ALMOST EQUAL TO]
ENTITY_succneqq = "\\U02AB6" # alias ISOAMSN scnE, [SUCCEEDS ABOVE NOT EQUAL TO]
ENTITY_succnsim = "\\U022E9" # alias ISOAMSN scnsim, [SUCCEEDS BUT NOT EQUIVALENT TO]
ENTITY_succsim = "\\U0227F" # alias ISOAMSR scsim, [SUCCEEDS OR EQUIVALENT TO]
ENTITY_sum = "\\U02211" # /sum L: summation operator, [N-ARY SUMMATION]
ENTITY_sung = "\\U0266A" # music note (sung text sign), [EIGHTH NOTE]
ENTITY_sup = "\\U02283" # /supset R: superset or implies, [SUPERSET OF]
ENTITY_sup1 = "\\U000B9" # superscript one, [SUPERSCRIPT ONE]
ENTITY_sup2 = "\\U000B2" # superscript two, [SUPERSCRIPT TWO]
ENTITY_sup3 = "\\U000B3" # superscript three, [SUPERSCRIPT THREE]
ENTITY_supE = "\\U02AC6" # /supseteqq R: superset, dbl equals, [SUPERSET OF ABOVE EQUALS SIGN]
ENTITY_supdot = "\\U02ABE" # superset, with dot, [SUPERSET WITH DOT]
ENTITY_supdsub = "\\U02AD8" # superset, subset, dash joining them, [SUPERSET BESIDE AND JOINED BY DASH WITH SUBSET]
ENTITY_supe = "\\U02287" # /supseteq R: superset, equals, [SUPERSET OF OR EQUAL TO]
ENTITY_supedot = "\\U02AC4" # superset, equals, dot, [SUPERSET OF OR EQUAL TO WITH DOT ABOVE]
ENTITY_suphsol = "\\U02283" # 0002F, superset, solidus, [SUPERSET OF, SOLIDUS]
ENTITY_suphsub = "\\U02AD7" # superset, subset, [SUPERSET BESIDE SUBSET]
ENTITY_suplarr = "\\U0297B" # superset, left arrow, [SUPERSET ABOVE LEFTWARDS ARROW]
ENTITY_supmult = "\\U02AC2" # superset, multiply, [SUPERSET WITH MULTIPLICATION SIGN BELOW]
ENTITY_supnE = "\\U02ACC" # /supsetneqq N: superset, not dbl eq, [SUPERSET OF ABOVE NOT EQUAL TO]
ENTITY_supne = "\\U0228B" # /supsetneq N: superset, not equals, [SUPERSET OF WITH NOT EQUAL TO]
ENTITY_supplus = "\\U02AC0" # superset, plus, [SUPERSET WITH PLUS SIGN BELOW]
ENTITY_supset = "\\U02283" # alias ISOTECH sup, [SUPERSET OF]
ENTITY_supseteq = "\\U02287" # alias ISOTECH supe, [SUPERSET OF OR EQUAL TO]
ENTITY_supseteqq = "\\U02AC6" # alias ISOAMSR supE, [SUPERSET OF ABOVE EQUALS SIGN]
ENTITY_supsetneq = "\\U0228B" # alias ISOAMSN supne, [SUPERSET OF WITH NOT EQUAL TO]
ENTITY_supsetneqq = "\\U02ACC" # alias ISOAMSN supnE, [SUPERSET OF ABOVE NOT EQUAL TO]
ENTITY_supsim = "\\U02AC8" # superset, similar, [SUPERSET OF ABOVE TILDE OPERATOR]
ENTITY_supsub = "\\U02AD4" # superset above subset, [SUPERSET ABOVE SUBSET]
ENTITY_supsup = "\\U02AD6" # superset above superset, [SUPERSET ABOVE SUPERSET]
ENTITY_swArr = "\\U021D9" # SW pointing dbl arrow, [SOUTH WEST DOUBLE ARROW]
ENTITY_swarhk = "\\U02926" # /hkswarow A: SW arrow-hooked, [SOUTH WEST ARROW WITH HOOK]
ENTITY_swarr = "\\U02199" # /swarrow A: SW pointing arrow, [SOUTH WEST ARROW]
ENTITY_swarrow = "\\U02199" # alias ISOAMSA swarr, [SOUTH WEST ARROW]
ENTITY_swnwar = "\\U0292A" # SW &amp; NW arrows, [SOUTH WEST ARROW AND NORTH WEST ARROW]
ENTITY_szlig = "sz" # "\\U000DF" # small sharp s, German (sz ligature), [LATIN SMALL LETTER SHARP S]
ENTITY_target = "\\U02316" # register mark or target, [POSITION INDICATOR]
ENTITY_tau = "\\U003C4" # /tau small tau, Greek, [GREEK SMALL LETTER TAU]
ENTITY_tbrk = "\\U023B4" # top square bracket, [TOP SQUARE BRACKET]
ENTITY_tcaron = "\\U00165" # small t, caron, [LATIN SMALL LETTER T WITH CARON]
ENTITY_tcedil = "\\U00163" # small t, cedilla, [LATIN SMALL LETTER T WITH CEDILLA]
ENTITY_tcy = "\\U00442" # small te, Cyrillic, [CYRILLIC SMALL LETTER TE]
ENTITY_tdot = "\\U020DB" # three dots above, [COMBINING THREE DOTS ABOVE]
ENTITY_telrec = "\\U02315" # telephone recorder symbol, [TELEPHONE RECORDER]
ENTITY_tfr = "\\U1D531" # /frak t, lower case t, [MATHEMATICAL FRAKTUR SMALL T]
ENTITY_there4 = "\\U02234" # /therefore R: therefore, [THEREFORE]
ENTITY_therefore = "\\U02234" # alias ISOTECH there4, [THEREFORE]
ENTITY_theta = "\\U003B8" # /theta straight theta, small theta, Greek, [GREEK SMALL LETTER THETA]
ENTITY_thetav = "\\U003D1" # /vartheta - curly or open theta, [GREEK THETA SYMBOL]
ENTITY_thickapprox = "\\U02248" # ISOAMSR thkap, [ALMOST EQUAL TO]
ENTITY_thicksim = "\\U0223C" # ISOAMSR thksim, [TILDE OPERATOR]
ENTITY_thinsp = " " #"\\U02009" # thin space (1/6-em), [THIN SPACE]
ENTITY_thkap = "\\U02248" # /thickapprox R: thick approximate, [ALMOST EQUAL TO]
ENTITY_thksim = "\\U0223C" # /thicksim R: thick similar, [TILDE OPERATOR]
ENTITY_thorn = "\\U000FE" # small thorn, Icelandic, [LATIN SMALL LETTER THORN]
ENTITY_tilde = "\\U002DC" # tilde, [SMALL TILDE]
ENTITY_times = "\\U000D7" # /times B: =multiply sign, [MULTIPLICATION SIGN]
ENTITY_timesb = "\\U022A0" # /boxtimes B: multiply sign in box, [SQUARED TIMES]
ENTITY_timesbar = "\\U02A31" # multiply sign, bar below, [MULTIPLICATION SIGN WITH UNDERBAR]
ENTITY_timesd = "\\U02A30" # times, dot, [MULTIPLICATION SIGN WITH DOT ABOVE]
ENTITY_tint = "\\U0222D" # /iiint triple integral operator, [TRIPLE INTEGRAL]
ENTITY_toea = "\\U02928" # alias ISOAMSA nesear, [NORTH EAST ARROW AND SOUTH EAST ARROW]
ENTITY_top = "\\U022A4" # /top top, [DOWN TACK]
ENTITY_topbot = "\\U02336" # top and bottom, [APL FUNCTIONAL SYMBOL I-BEAM]
ENTITY_topcir = "\\U02AF1" # top, circle below, [DOWN TACK WITH CIRCLE BELOW]
ENTITY_topf = "\\U1D565" # , [MATHEMATICAL DOUBLE-STRUCK SMALL T]
ENTITY_topfork = "\\U02ADA" # fork with top, [PITCHFORK WITH TEE TOP]
ENTITY_tosa = "\\U02929" # alias ISOAMSA seswar, [SOUTH EAST ARROW AND SOUTH WEST ARROW]
ENTITY_tprime = "\\U02034" # triple prime, [TRIPLE PRIME]
ENTITY_trade = "\\U02122" # trade mark sign, [TRADE MARK SIGN]
ENTITY_triangle = "\\U025B5" # alias ISOPUB utri, [WHITE UP-POINTING SMALL TRIANGLE]
ENTITY_triangledown = "\\U025BF" # alias ISOPUB dtri, [WHITE DOWN-POINTING SMALL TRIANGLE]
ENTITY_triangleleft = "\\U025C3" # alias ISOPUB ltri, [WHITE LEFT-POINTING SMALL TRIANGLE]
ENTITY_trianglelefteq = "\\U022B4" # alias ISOAMSR ltrie, [NORMAL SUBGROUP OF OR EQUAL TO]
ENTITY_triangleq = "\\U0225C" # alias ISOAMSR trie, [DELTA EQUAL TO]
ENTITY_triangleright = "\\U025B9" # alias ISOPUB rtri, [WHITE RIGHT-POINTING SMALL TRIANGLE]
ENTITY_trianglerighteq = "\\U022B5" # alias ISOAMSR rtrie, [CONTAINS AS NORMAL SUBGROUP OR EQUAL TO]
ENTITY_tridot = "\\U025EC" # dot in triangle, [WHITE UP-POINTING TRIANGLE WITH DOT]
ENTITY_trie = "\\U0225C" # /triangleq R: triangle, equals, [DELTA EQUAL TO]
ENTITY_triminus = "\\U02A3A" # minus in triangle, [MINUS SIGN IN TRIANGLE]
ENTITY_triplus = "\\U02A39" # plus in triangle, [PLUS SIGN IN TRIANGLE]
ENTITY_trisb = "\\U029CD" # triangle, serifs at bottom, [TRIANGLE WITH SERIFS AT BOTTOM]
ENTITY_tritime = "\\U02A3B" # multiply in triangle, [MULTIPLICATION SIGN IN TRIANGLE]
ENTITY_trpezium = "\\U0FFFD" # trapezium, [REPLACEMENT CHARACTER]
ENTITY_tscr = "\\U1D4C9" # /scr t, script letter t, [MATHEMATICAL SCRIPT SMALL T]
ENTITY_tscy = "\\U00446" # small tse, Cyrillic, [CYRILLIC SMALL LETTER TSE]
ENTITY_tshcy = "\\U0045B" # small tshe, Serbian, [CYRILLIC SMALL LETTER TSHE]
ENTITY_tstrok = "\\U00167" # small t, stroke, [LATIN SMALL LETTER T WITH STROKE]
ENTITY_twixt = "\\U0226C" # /between R: between, [BETWEEN]
ENTITY_twoheadleftarrow = "\\U0219E" # alias ISOAMSA Larr, [LEFTWARDS TWO HEADED ARROW]
ENTITY_twoheadrightarrow = "\\U021A0" # alias ISOAMSA Rarr, [RIGHTWARDS TWO HEADED ARROW]
ENTITY_uArr = "\\U021D1" # /Uparrow A: up dbl arrow, [UPWARDS DOUBLE ARROW]
ENTITY_uHar = "\\U02963" # up harpoon-left, up harpoon-right, [UPWARDS HARPOON WITH BARB LEFT BESIDE UPWARDS HARPOON WITH BARB RIGHT]
ENTITY_uacute = "\\U000FA" # small u, acute accent, [LATIN SMALL LETTER U WITH ACUTE]
ENTITY_uarr = "\\U02191" # /uparrow A: =upward arrow, [UPWARDS ARROW]
ENTITY_ubrcy = "\\U0045E" # small u, Byelorussian, [CYRILLIC SMALL LETTER SHORT U]
ENTITY_ubreve = "\\U0016D" # small u, breve, [LATIN SMALL LETTER U WITH BREVE]
ENTITY_ucirc = "\\U000FB" # small u, circumflex accent, [LATIN SMALL LETTER U WITH CIRCUMFLEX]
ENTITY_ucy = "\\U00443" # small u, Cyrillic, [CYRILLIC SMALL LETTER U]
ENTITY_udarr = "\\U021C5" # up arrow, down arrow, [UPWARDS ARROW LEFTWARDS OF DOWNWARDS ARROW]
ENTITY_udblac = "\\U00171" # small u, double acute accent, [LATIN SMALL LETTER U WITH DOUBLE ACUTE]
ENTITY_udhar = "\\U0296E" # up harp, down harp, [UPWARDS HARPOON WITH BARB LEFT BESIDE DOWNWARDS HARPOON WITH BARB RIGHT]
ENTITY_ufisht = "\\U0297E" # up fish tail, [UP FISH TAIL]
ENTITY_ufr = "\\U1D532" # /frak u, lower case u, [MATHEMATICAL FRAKTUR SMALL U]
ENTITY_ugrave = "\\U000F9" # small u, grave accent, [LATIN SMALL LETTER U WITH GRAVE]
ENTITY_uharl = "\\U021BF" # /upharpoonleft A: up harpoon-left, [UPWARDS HARPOON WITH BARB LEFTWARDS]
ENTITY_uharr = "\\U021BE" # /upharpoonright /restriction A: up harp-r, [UPWARDS HARPOON WITH BARB RIGHTWARDS]
ENTITY_uhblk = "\\U02580" # upper half block, [UPPER HALF BLOCK]
ENTITY_ulcorn = "\\U0231C" # /ulcorner O: upper left corner, [TOP LEFT CORNER]
ENTITY_ulcorner = "\\U0231C" # alias ISOAMSC ulcorn, [TOP LEFT CORNER]
ENTITY_ulcrop = "\\U0230F" # upward left crop mark, [TOP LEFT CROP]
ENTITY_ultri = "\\U025F8" # upper left triangle, [UPPER LEFT TRIANGLE]
ENTITY_umacr = "\\U0016B" # small u, macron, [LATIN SMALL LETTER U WITH MACRON]
ENTITY_uml = "\\U000A8" # umlaut mark, [DIAERESIS]
ENTITY_uogon = "\\U00173" # small u, ogonek, [LATIN SMALL LETTER U WITH OGONEK]
ENTITY_uopf = "\\U1D566" # , [MATHEMATICAL DOUBLE-STRUCK SMALL U]
ENTITY_uparrow = "\\U02191" # alias ISONUM uarr, [UPWARDS ARROW]
ENTITY_updownarrow = "\\U02195" # alias ISOAMSA varr, [UP DOWN ARROW]
ENTITY_upharpoonleft = "\\U021BF" # alias ISOAMSA uharl, [UPWARDS HARPOON WITH BARB LEFTWARDS]
ENTITY_upharpoonright = "\\U021BE" # alias ISOAMSA uharr, [UPWARDS HARPOON WITH BARB RIGHTWARDS]
ENTITY_uplus = "\\U0228E" # /uplus B: plus sign in union, [MULTISET UNION]
ENTITY_upsi = "\\U003C5" # /upsilon small upsilon, Greek, [GREEK SMALL LETTER UPSILON]
ENTITY_upsilon = "\\U003C5" # alias ISOGRK3 upsi, [GREEK SMALL LETTER UPSILON]
ENTITY_upuparrows = "\\U021C8" # alias ISOAMSA uuarr, [UPWARDS PAIRED ARROWS]
ENTITY_urcorn = "\\U0231D" # /urcorner C: upper right corner, [TOP RIGHT CORNER]
ENTITY_urcorner = "\\U0231D" # alias ISOAMSC urcorn, [TOP RIGHT CORNER]
ENTITY_urcrop = "\\U0230E" # upward right crop mark, [TOP RIGHT CROP]
ENTITY_uring = "\\U0016F" # small u, ring, [LATIN SMALL LETTER U WITH RING ABOVE]
ENTITY_urtri = "\\U025F9" # upper right triangle, [UPPER RIGHT TRIANGLE]
ENTITY_uscr = "\\U1D4CA" # /scr u, script letter u, [MATHEMATICAL SCRIPT SMALL U]
ENTITY_utdot = "\\U022F0" # three dots, ascending, [UP RIGHT DIAGONAL ELLIPSIS]
ENTITY_utilde = "\\U00169" # small u, tilde, [LATIN SMALL LETTER U WITH TILDE]
ENTITY_utri = "\\U025B5" # /triangle =up triangle, open, [WHITE UP-POINTING SMALL TRIANGLE]
ENTITY_utrif = "\\U025B4" # /blacktriangle =up tri, filled, [BLACK UP-POINTING SMALL TRIANGLE]
ENTITY_uuarr = "\\U021C8" # /upuparrows A: two up arrows, [UPWARDS PAIRED ARROWS]
ENTITY_uuml = "\\U000FC" # small u, dieresis or umlaut mark, [LATIN SMALL LETTER U WITH DIAERESIS]
ENTITY_uwangle = "\\U029A7" # large upward pointing angle, [OBLIQUE ANGLE OPENING DOWN]
ENTITY_vArr = "\\U021D5" # /Updownarrow A: up&amp;down dbl arrow, [UP DOWN DOUBLE ARROW]
ENTITY_vBar = "\\U02AE8" # vert, dbl bar (under), [SHORT UP TACK WITH UNDERBAR]
ENTITY_vBarv = "\\U02AE9" # dbl bar, vert over and under, [SHORT UP TACK ABOVE SHORT DOWN TACK]
ENTITY_vDash = "\\U022A8" # /vDash R: vertical, dbl dash, [TRUE]
ENTITY_vangrt = "\\U0299C" # right angle, variant, [RIGHT ANGLE VARIANT WITH SQUARE]
ENTITY_varepsilon = "\\U003B5" # alias ISOGRK3 epsiv, [GREEK SMALL LETTER EPSILON]
ENTITY_varkappa = "\\U003F0" # alias ISOGRK3 kappav, [GREEK KAPPA SYMBOL]
ENTITY_varnothing = "\\U02205" # alias ISOAMSO emptyv, [EMPTY SET]
ENTITY_varphi = "\\U003C6" # alias ISOGRK3 phiv, [GREEK SMALL LETTER PHI]
ENTITY_varpi = "\\U003D6" # alias ISOGRK3 piv, [GREEK PI SYMBOL]
ENTITY_varpropto = "\\U0221D" # alias ISOAMSR vprop, [PROPORTIONAL TO]
ENTITY_varr = "\\U02195" # /updownarrow A: up&amp;down arrow, [UP DOWN ARROW]
ENTITY_varrho = "\\U003F1" # alias ISOGRK3 rhov, [GREEK RHO SYMBOL]
ENTITY_varsigma = "\\U003C2" # alias ISOGRK3 sigmav, [GREEK SMALL LETTER FINAL SIGMA]
ENTITY_varsubsetneq = "\\U0228A" # 0FE00, alias ISOAMSN vsubne, [SUBSET OF WITH NOT EQUAL TO - variant with stroke through bottom members]
ENTITY_varsubsetneqq = "\\U02ACB" # 0FE00, alias ISOAMSN vsubnE, [SUBSET OF ABOVE NOT EQUAL TO - variant with stroke through bottom members]
ENTITY_varsupsetneq = "\\U0228B" # 0FE00, alias ISOAMSN vsupne, [SUPERSET OF WITH NOT EQUAL TO - variant with stroke through bottom members]
ENTITY_varsupsetneqq = "\\U02ACC" # 0FE00, alias ISOAMSN vsupnE, [SUPERSET OF ABOVE NOT EQUAL TO - variant with stroke through bottom members]
ENTITY_vartheta = "\\U003D1" # alias ISOGRK3 thetav, [GREEK THETA SYMBOL]
ENTITY_vartriangleleft = "\\U022B2" # alias ISOAMSR vltri, [NORMAL SUBGROUP OF]
ENTITY_vartriangleright = "\\U022B3" # alias ISOAMSR vrtri, [CONTAINS AS NORMAL SUBGROUP]
ENTITY_vcy = "\\U00432" # small ve, Cyrillic, [CYRILLIC SMALL LETTER VE]
ENTITY_vdash = "\\U022A2" # /vdash R: vertical, dash, [RIGHT TACK]
ENTITY_vee = "\\U02228" # alias ISOTECH or, [LOGICAL OR]
ENTITY_veebar = "\\U022BB" # /veebar B: logical or, bar below, [XOR]
ENTITY_veeeq = "\\U0225A" # logical or, equals, [EQUIANGULAR TO]
ENTITY_vellip = "\\U022EE" # vertical ellipsis, [VERTICAL ELLIPSIS]
ENTITY_verbar = "\\U0007C" # /vert =vertical bar, [VERTICAL LINE]
ENTITY_vert = "\\U0007C" # alias ISONUM verbar, [VERTICAL LINE]
ENTITY_vfr = "\\U1D533" # /frak v, lower case v, [MATHEMATICAL FRAKTUR SMALL V]
ENTITY_vltri = "\\U022B2" # /vartriangleleft R: l tri, open, var, [NORMAL SUBGROUP OF]
ENTITY_vnsub = "\\U02282" # 020D2, /nsubset N: not subset, var, [SUBSET OF with vertical line]
ENTITY_vnsup = "\\U02283" # 020D2, /nsupset N: not superset, var, [SUPERSET OF with vertical line]
ENTITY_vopf = "\\U1D567" # , [MATHEMATICAL DOUBLE-STRUCK SMALL V]
ENTITY_vprop = "\\U0221D" # /varpropto R: proportional, variant, [PROPORTIONAL TO]
ENTITY_vrtri = "\\U022B3" # /vartriangleright R: r tri, open, var, [CONTAINS AS NORMAL SUBGROUP]
ENTITY_vscr = "\\U1D4CB" # /scr v, script letter v, [MATHEMATICAL SCRIPT SMALL V]
ENTITY_vsubnE = "\\U02ACB" # 0FE00, /varsubsetneqq N: subset not dbl eq, var, [SUBSET OF ABOVE NOT EQUAL TO - variant with stroke through bottom members]
ENTITY_vsubne = "\\U0228A" # 0FE00, /varsubsetneq N: subset, not eq, var, [SUBSET OF WITH NOT EQUAL TO - variant with stroke through bottom members]
ENTITY_vsupnE = "\\U02ACC" # 0FE00, /varsupsetneqq N: super not dbl eq, var, [SUPERSET OF ABOVE NOT EQUAL TO - variant with stroke through bottom members]
ENTITY_vsupne = "\\U0228B" # 0FE00, /varsupsetneq N: superset, not eq, var, [SUPERSET OF WITH NOT EQUAL TO - variant with stroke through bottom members]
ENTITY_vzigzag = "\\U0299A" # vertical zig-zag line, [VERTICAL ZIGZAG LINE]
ENTITY_wcirc = "\\U00175" # small w, circumflex accent, [LATIN SMALL LETTER W WITH CIRCUMFLEX]
ENTITY_wedbar = "\\U02A5F" # wedge, bar below, [LOGICAL AND WITH UNDERBAR]
ENTITY_wedge = "\\U02227" # alias ISOTECH and, [LOGICAL AND]
ENTITY_wedgeq = "\\U02259" # /wedgeq R: corresponds to (wedge, equals), [ESTIMATES]
ENTITY_weierp = "\\U02118" # /wp - Weierstrass p, [SCRIPT CAPITAL P]
ENTITY_wfr = "\\U1D534" # /frak w, lower case w, [MATHEMATICAL FRAKTUR SMALL W]
ENTITY_wopf = "\\U1D568" # , [MATHEMATICAL DOUBLE-STRUCK SMALL W]
ENTITY_wp = "\\U02118" # alias ISOAMSO weierp, [SCRIPT CAPITAL P]
ENTITY_wr = "\\U02240" # alias ISOAMSB wreath, [WREATH PRODUCT]
ENTITY_wreath = "\\U02240" # /wr B: wreath product, [WREATH PRODUCT]
ENTITY_wscr = "\\U1D4CC" # /scr w, script letter w, [MATHEMATICAL SCRIPT SMALL W]
ENTITY_xcap = "\\U022C2" # /bigcap L: intersection operator, [N-ARY INTERSECTION]
ENTITY_xcirc = "\\U025EF" # /bigcirc B: large circle, [LARGE CIRCLE]
ENTITY_xcup = "\\U022C3" # /bigcup L: union operator, [N-ARY UNION]
ENTITY_xdtri = "\\U025BD" # /bigtriangledown B: big dn tri, open, [WHITE DOWN-POINTING TRIANGLE]
ENTITY_xfr = "\\U1D535" # /frak x, lower case x, [MATHEMATICAL FRAKTUR SMALL X]
ENTITY_xhArr = "\\U027FA" # /Longleftrightarrow A: long l&amp;r dbl arr, [LONG LEFT RIGHT DOUBLE ARROW]
ENTITY_xharr = "\\U027F7" # /longleftrightarrow A: long l&amp;r arr, [LONG LEFT RIGHT ARROW]
ENTITY_xi = "\\U003BE" # /xi small xi, Greek, [GREEK SMALL LETTER XI]
ENTITY_xlArr = "\\U027F8" # /Longleftarrow A: long l dbl arrow, [LONG LEFTWARDS DOUBLE ARROW]
ENTITY_xlarr = "\\U027F5" # /longleftarrow A: long left arrow, [LONG LEFTWARDS ARROW]
ENTITY_xmap = "\\U027FC" # /longmapsto A:, [LONG RIGHTWARDS ARROW FROM BAR]
ENTITY_xnis = "\\U022FB" # large contains, vertical bar on horizontal stroke, [CONTAINS WITH VERTICAL BAR AT END OF HORIZONTAL STROKE]
ENTITY_xodot = "\\U02A00" # /bigodot L: circle dot operator, [N-ARY CIRCLED DOT OPERATOR]
ENTITY_xopf = "\\U1D569" # , [MATHEMATICAL DOUBLE-STRUCK SMALL X]
ENTITY_xoplus = "\\U02A01" # /bigoplus L: circle plus operator, [N-ARY CIRCLED PLUS OPERATOR]
ENTITY_xotime = "\\U02A02" # /bigotimes L: circle times operator, [N-ARY CIRCLED TIMES OPERATOR]
ENTITY_xrArr = "\\U027F9" # /Longrightarrow A: long rt dbl arr, [LONG RIGHTWARDS DOUBLE ARROW]
ENTITY_xrarr = "\\U027F6" # /longrightarrow A: long right arrow, [LONG RIGHTWARDS ARROW]
ENTITY_xscr = "\\U1D4CD" # /scr x, script letter x, [MATHEMATICAL SCRIPT SMALL X]
ENTITY_xsqcup = "\\U02A06" # /bigsqcup L: square union operator, [N-ARY SQUARE UNION OPERATOR]
ENTITY_xuplus = "\\U02A04" # /biguplus L:, [N-ARY UNION OPERATOR WITH PLUS]
ENTITY_xutri = "\\U025B3" # /bigtriangleup B: big up tri, open, [WHITE UP-POINTING TRIANGLE]
ENTITY_xvee = "\\U022C1" # /bigvee L: logical and operator, [N-ARY LOGICAL OR]
ENTITY_xwedge = "\\U022C0" # /bigwedge L: logical or operator, [N-ARY LOGICAL AND]
ENTITY_yacute = "\\U000FD" # small y, acute accent, [LATIN SMALL LETTER Y WITH ACUTE]
ENTITY_yacy = "\\U0044F" # small ya, Cyrillic, [CYRILLIC SMALL LETTER YA]
ENTITY_ycirc = "\\U00177" # small y, circumflex accent, [LATIN SMALL LETTER Y WITH CIRCUMFLEX]
ENTITY_ycy = "\\U0044B" # small yeru, Cyrillic, [CYRILLIC SMALL LETTER YERU]
ENTITY_yen = "\\U000A5" # /yen =yen sign, [YEN SIGN]
ENTITY_yfr = "\\U1D536" # /frak y, lower case y, [MATHEMATICAL FRAKTUR SMALL Y]
ENTITY_yicy = "\\U00457" # small yi, Ukrainian, [CYRILLIC SMALL LETTER YI]
ENTITY_yopf = "\\U1D56A" # , [MATHEMATICAL DOUBLE-STRUCK SMALL Y]
ENTITY_yscr = "\\U1D4CE" # /scr y, script letter y, [MATHEMATICAL SCRIPT SMALL Y]
ENTITY_yucy = "\\U0044E" # small yu, Cyrillic, [CYRILLIC SMALL LETTER YU]
ENTITY_yuml = "\\U000FF" # small y, dieresis or umlaut mark, [LATIN SMALL LETTER Y WITH DIAERESIS]
ENTITY_zacute = "\\U0017A" # small z, acute accent, [LATIN SMALL LETTER Z WITH ACUTE]
ENTITY_zcaron = "\\U0017E" # small z, caron, [LATIN SMALL LETTER Z WITH CARON]
ENTITY_zcy = "\\U00437" # small ze, Cyrillic, [CYRILLIC SMALL LETTER ZE]
ENTITY_zdot = "\\U0017C" # small z, dot above, [LATIN SMALL LETTER Z WITH DOT ABOVE]
ENTITY_zeetrf = "\\U02128" # zee transform, [BLACK-LETTER CAPITAL Z]
ENTITY_zeta = "\\U003B6" # /zeta small zeta, Greek, [GREEK SMALL LETTER ZETA]
ENTITY_zfr = "\\U1D537" # /frak z, lower case z, [MATHEMATICAL FRAKTUR SMALL Z]
ENTITY_zhcy = "\\U00436" # small zhe, Cyrillic, [CYRILLIC SMALL LETTER ZHE]
ENTITY_zigrarr = "\\U021DD" # right zig-zag arrow, [RIGHTWARDS SQUIGGLE ARROW]
ENTITY_zopf = "\\U1D56B" # , [MATHEMATICAL DOUBLE-STRUCK SMALL Z]
ENTITY_zscr = "\\U1D4CF" # /scr z, script letter z, [MATHEMATICAL SCRIPT SMALL Z]

# custom emissary configs
ENTITY_And != "*"
ENTITY_And = "&&" # "\\U02A53" # dbl logical and, [DOUBLE LOGICAL AND]
ENTITY_CloseCurlyDoubleQuote != "*"
ENTITY_CloseCurlyDoubleQuote = "\"" # "\\U0201D" # alias ISONUM rdquo, [RIGHT DOUBLE QUOTATION MARK]
ENTITY_CloseCurlyQuote != "*"
ENTITY_CloseCurlyQuote = "'" # "\\U02019" # alias ISONUM rsquo, [RIGHT SINGLE QUOTATION MARK]
ENTITY_Colon != "*"
ENTITY_Colon = "::" # "\\U02237" # /Colon, two colons, [PROPORTION]
ENTITY_Colone != "*"
ENTITY_Colone = "::=" # "\\U02A74" # double colon, equals, [DOUBLE COLON EQUAL]
ENTITY_OpenCurlyDoubleQuote != "*"
ENTITY_OpenCurlyDoubleQuote = "\"" # "\\U0201C" # alias ISONUM ldquo, [LEFT DOUBLE QUOTATION MARK]
ENTITY_OpenCurlyQuote != "*"
ENTITY_OpenCurlyQuote = "'" # "\\U02018" # alias ISONUM lsquo, [LEFT SINGLE QUOTATION MARK]
ENTITY_Or != "*"
ENTITY_Or = "||" # "\\U02A54" # dbl logical or, [DOUBLE LOGICAL OR]
ENTITY_rx != "*"
ENTITY_rx = "rx" # "\\U0211E" # pharmaceutical prescription (Rx), [PRESCRIPTION TAKE]
ENTITY_shy != "*"
ENTITY_shy = "" # "\\U000AD" # soft hyphen, [SOFT HYPHEN]

